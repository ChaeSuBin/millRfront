{"ast":null,"code":"export const onFileInputChange = (e, _setBuffer, _setFileInfo) => {\n  const fileByteArray = [];\n  let fileInfo = [];\n  let fileNum = 0;\n\n  let f = function (a, b) {\n    return b - a;\n  };\n\n  while (e.target.files.length > fileNum) {\n    //console.log(fileNum);\n    const reader = new FileReader();\n    const fileBufferArray = [];\n    fileInfo[fileNum] = {\n      name: e.target.files[fileNum].name,\n      type: e.target.files[fileNum].type,\n      size: e.target.files[fileNum].size\n    }; // reader.readAsArrayBuffer(e.target.files[fileNum]);\n    // reader.onloadend = (_evt) => {\n    //   if (_evt.target.readyState === FileReader.DONE) {\n    //     const arrayBuffer = _evt.target.result,\n    //     array = new Uint8Array(arrayBuffer);\n    //     for (const a of array) {\n    //       fileBufferArray.push(a);\n    //     }\n    //     fileByteArray.push(fileBufferArray);\n    //     //console.log(fileByteArray);\n    //   }\n    // }\n\n    ++fileNum;\n  }\n\n  console.log(fileInfo);\n\n  _setBuffer(fileByteArray);\n\n  _setFileInfo(fileInfo);\n};","map":{"version":3,"names":["onFileInputChange","e","_setBuffer","_setFileInfo","fileByteArray","fileInfo","fileNum","f","a","b","target","files","length","reader","FileReader","fileBufferArray","name","type","size","console","log"],"sources":["/home/giparang/threadweb/fortune/client/src/utilityUnits/fileToBuffer.js"],"sourcesContent":["\nexport const onFileInputChange = (e, _setBuffer, _setFileInfo) => {\n  const fileByteArray = [];\n  let fileInfo = [];\n  let fileNum = 0;\n  let f = function (a, b) { return b - a }\n    \n  while(e.target.files.length > fileNum){\n    //console.log(fileNum);\n    const reader = new FileReader();\n    const fileBufferArray = [];\n        \n    fileInfo[fileNum]={\n      name: e.target.files[fileNum].name,\n      type: e.target.files[fileNum].type,\n      size: e.target.files[fileNum].size\n    }\n\n    // reader.readAsArrayBuffer(e.target.files[fileNum]);\n    // reader.onloadend = (_evt) => {\n    //   if (_evt.target.readyState === FileReader.DONE) {\n    //     const arrayBuffer = _evt.target.result,\n    //     array = new Uint8Array(arrayBuffer);\n    //     for (const a of array) {\n    //       fileBufferArray.push(a);\n    //     }\n    //     fileByteArray.push(fileBufferArray);\n    //     //console.log(fileByteArray);\n    //   }\n    // }\n    ++fileNum;\n  }\n  console.log(fileInfo);\n  _setBuffer(fileByteArray);\n  _setFileInfo(fileInfo);\n}"],"mappings":"AACA,OAAO,MAAMA,iBAAiB,GAAG,CAACC,CAAD,EAAIC,UAAJ,EAAgBC,YAAhB,KAAiC;EAChE,MAAMC,aAAa,GAAG,EAAtB;EACA,IAAIC,QAAQ,GAAG,EAAf;EACA,IAAIC,OAAO,GAAG,CAAd;;EACA,IAAIC,CAAC,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAAgB;IAAE,OAAOA,CAAC,GAAGD,CAAX;EAAc,CAAxC;;EAEA,OAAMP,CAAC,CAACS,MAAF,CAASC,KAAT,CAAeC,MAAf,GAAwBN,OAA9B,EAAsC;IACpC;IACA,MAAMO,MAAM,GAAG,IAAIC,UAAJ,EAAf;IACA,MAAMC,eAAe,GAAG,EAAxB;IAEAV,QAAQ,CAACC,OAAD,CAAR,GAAkB;MAChBU,IAAI,EAAEf,CAAC,CAACS,MAAF,CAASC,KAAT,CAAeL,OAAf,EAAwBU,IADd;MAEhBC,IAAI,EAAEhB,CAAC,CAACS,MAAF,CAASC,KAAT,CAAeL,OAAf,EAAwBW,IAFd;MAGhBC,IAAI,EAAEjB,CAAC,CAACS,MAAF,CAASC,KAAT,CAAeL,OAAf,EAAwBY;IAHd,CAAlB,CALoC,CAWpC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IACA,EAAEZ,OAAF;EACD;;EACDa,OAAO,CAACC,GAAR,CAAYf,QAAZ;;EACAH,UAAU,CAACE,aAAD,CAAV;;EACAD,YAAY,CAACE,QAAD,CAAZ;AACD,CAlCM"},"metadata":{},"sourceType":"module"}