{"ast":null,"code":"import { mintingToken } from '../../utilityUnits/connMintService';\nimport { getUserId } from '../../api';\nlet count = 0;\nlet intervalId = null;\nexport const buyToknMint = async (_price, _itemId, setFlag, set_w_Flag, FROM_ADDR, PRIVATE_KEY) => {\n  console.log(PRIVATE_KEY);\n  const value = parseInt(_price * 100000) + '0000000000000';\n  mintingToken(FROM_ADDR, PRIVATE_KEY, _itemId, value).then(result => {\n    if (result === true) {\n      intervalId = setInterval(() => {\n        if (count > 9) {\n          clearInterval(intervalId);\n          set_w_Flag(false);\n          setFlag(false);\n          alert('입력하신 Private Key가 다른 주소의 키 같습니다\\n 키를 확인 후 다시 시도하여주십시오.');\n        } else ++count;\n      }, 1000);\n    } else {\n      set_w_Flag(false);\n      alert(`⚠️Err: ${result}`);\n    }\n  });\n};\nexport const serveToknIdx = async (_toknId, _itemId, FROM_ADDR) => {\n  const userId = await getUserId(FROM_ADDR);\n  const record = {\n    itemId: _itemId,\n    toknId: _toknId,\n    userId: userId\n  };\n  console.log(record); // if(_remain == 1){\n  //   console.log(_remain);\n  //   putItemClose({itemID: idxId});\n  // }\n\n  postMintTokn(record).then(resultIdx => {\n    if (resultIdx) {\n      //set_w_Flag(false); setFlag(false);\n      stopTimer();\n      alert('🎉Successfully purchased');\n      navigate(\"/\");\n    }\n  });\n};\n\nconst stopTimer = () => {\n  clearInterval(intervalId);\n  intervalId = null;\n};","map":{"version":3,"names":["mintingToken","getUserId","count","intervalId","buyToknMint","_price","_itemId","setFlag","set_w_Flag","FROM_ADDR","PRIVATE_KEY","console","log","value","parseInt","then","result","setInterval","clearInterval","alert","serveToknIdx","_toknId","userId","record","itemId","toknId","postMintTokn","resultIdx","stopTimer","navigate"],"sources":["/home/giparang/threadweb/fortune/client/src/components/detailPages/toknMint.js"],"sourcesContent":["import { mintingToken } from '../../utilityUnits/connMintService';\nimport { getUserId } from '../../api';\n\nlet count = 0;\nlet intervalId = null;\n\nexport const buyToknMint = async(_price, _itemId, setFlag, set_w_Flag, FROM_ADDR, PRIVATE_KEY) => {\n  console.log(PRIVATE_KEY);\n  const value = parseInt(_price*100000) + '0000000000000';\n  mintingToken(FROM_ADDR, PRIVATE_KEY, _itemId, value).then(result => {\n    if(result === true){\n      intervalId = setInterval(() => {\n        if(count > 9){\n          clearInterval(intervalId);\n          set_w_Flag(false); setFlag(false);\n          alert('입력하신 Private Key가 다른 주소의 키 같습니다\\n 키를 확인 후 다시 시도하여주십시오.')\n        }\n        else\n          ++count;\n      }, 1000);\n    }\n    else{\n      set_w_Flag(false);\n      alert(`⚠️Err: ${result}`);\n    }\n  })\n}\n\nexport const serveToknIdx = async(_toknId, _itemId, FROM_ADDR) => {\n  const userId = await getUserId(FROM_ADDR);\n  const record = {\n    itemId: _itemId,\n    toknId: _toknId,\n    userId: userId\n  }\n  console.log(record);\n  // if(_remain == 1){\n  //   console.log(_remain);\n  //   putItemClose({itemID: idxId});\n  // }\n  postMintTokn(record).then(resultIdx => {\n    if(resultIdx){\n      //set_w_Flag(false); setFlag(false);\n      stopTimer();\n      alert('🎉Successfully purchased');\n      navigate(\"/\");}\n  })\n}\nconst stopTimer = () => {\n  clearInterval(intervalId);\n  intervalId=null;\n}"],"mappings":"AAAA,SAASA,YAAT,QAA6B,oCAA7B;AACA,SAASC,SAAT,QAA0B,WAA1B;AAEA,IAAIC,KAAK,GAAG,CAAZ;AACA,IAAIC,UAAU,GAAG,IAAjB;AAEA,OAAO,MAAMC,WAAW,GAAG,OAAMC,MAAN,EAAcC,OAAd,EAAuBC,OAAvB,EAAgCC,UAAhC,EAA4CC,SAA5C,EAAuDC,WAAvD,KAAuE;EAChGC,OAAO,CAACC,GAAR,CAAYF,WAAZ;EACA,MAAMG,KAAK,GAAGC,QAAQ,CAACT,MAAM,GAAC,MAAR,CAAR,GAA0B,eAAxC;EACAL,YAAY,CAACS,SAAD,EAAYC,WAAZ,EAAyBJ,OAAzB,EAAkCO,KAAlC,CAAZ,CAAqDE,IAArD,CAA0DC,MAAM,IAAI;IAClE,IAAGA,MAAM,KAAK,IAAd,EAAmB;MACjBb,UAAU,GAAGc,WAAW,CAAC,MAAM;QAC7B,IAAGf,KAAK,GAAG,CAAX,EAAa;UACXgB,aAAa,CAACf,UAAD,CAAb;UACAK,UAAU,CAAC,KAAD,CAAV;UAAmBD,OAAO,CAAC,KAAD,CAAP;UACnBY,KAAK,CAAC,wDAAD,CAAL;QACD,CAJD,MAME,EAAEjB,KAAF;MACH,CARuB,EAQrB,IARqB,CAAxB;IASD,CAVD,MAWI;MACFM,UAAU,CAAC,KAAD,CAAV;MACAW,KAAK,CAAE,UAASH,MAAO,EAAlB,CAAL;IACD;EACF,CAhBD;AAiBD,CApBM;AAsBP,OAAO,MAAMI,YAAY,GAAG,OAAMC,OAAN,EAAef,OAAf,EAAwBG,SAAxB,KAAsC;EAChE,MAAMa,MAAM,GAAG,MAAMrB,SAAS,CAACQ,SAAD,CAA9B;EACA,MAAMc,MAAM,GAAG;IACbC,MAAM,EAAElB,OADK;IAEbmB,MAAM,EAAEJ,OAFK;IAGbC,MAAM,EAAEA;EAHK,CAAf;EAKAX,OAAO,CAACC,GAAR,CAAYW,MAAZ,EAPgE,CAQhE;EACA;EACA;EACA;;EACAG,YAAY,CAACH,MAAD,CAAZ,CAAqBR,IAArB,CAA0BY,SAAS,IAAI;IACrC,IAAGA,SAAH,EAAa;MACX;MACAC,SAAS;MACTT,KAAK,CAAC,0BAAD,CAAL;MACAU,QAAQ,CAAC,GAAD,CAAR;IAAe;EAClB,CAND;AAOD,CAnBM;;AAoBP,MAAMD,SAAS,GAAG,MAAM;EACtBV,aAAa,CAACf,UAAD,CAAb;EACAA,UAAU,GAAC,IAAX;AACD,CAHD"},"metadata":{},"sourceType":"module"}