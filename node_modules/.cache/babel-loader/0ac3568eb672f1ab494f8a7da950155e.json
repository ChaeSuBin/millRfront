{"ast":null,"code":"var _jsxFileName = \"/home/giparang/threadweb/fortune/client/src/components/uploadFiles.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { postUploadArtwork, postUploadItemIdx, getMerge } from \"../api\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UploadFiles = _ref => {\n  _s();\n\n  let {\n    fileBufferList,\n    fileInfoList,\n    finalHash,\n    title,\n    desc\n  } = _ref;\n  const [uploadState, setState] = useState(false);\n\n  const uploadItem = () => {\n    if (title !== '' && desc !== '') {\n      setFileChunks(); //uploadItemIdx();\n\n      setState(true);\n    } else {\n      alert('Please enter the title and description of the item to be uploaded');\n    }\n  };\n\n  const uploadItemIdx = () => {\n    const record = {\n      title: title,\n      desc: desc,\n      hash: finalHash\n    };\n    postUploadItemIdx(record).then(response => {\n      console.log(response);\n    });\n  };\n\n  const setFileChunks = async () => {\n    const size = 1024 * 50; //50KB 50KB Section size\n\n    await fileBufferList.map((file, index) => {\n      let fileChunks = [];\n      let fileIndex = 0;\n\n      for (let cur = 0; cur < file.length; cur += size) {\n        fileChunks.push({\n          section: fileIndex++,\n          chunk: file.slice(cur, cur + size)\n        });\n      }\n\n      uploadList(fileChunks, index++);\n    });\n    mergeChunks();\n  };\n\n  const uploadList = (fileChunks, _index) => {\n    //return new Promise(resolve => {\n    fileChunks.map((item, index) => {\n      const record = {\n        fileName: fileInfoList[_index].name,\n        section: item.section,\n        chunk: item.chunk\n      };\n      console.log(record);\n      postUploadArtwork(record).then(result => {\n        console.log(result);\n      });\n    }); //   resolve();\n    // })\n  };\n\n  const mergeChunks = async () => {\n    fileInfoList.map((item, idx) => {\n      getMerge(item.name, finalHash).then(response => {\n        console.log(response);\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: finalHash == undefined ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"uploadfiles.js\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), uploadState ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"upload complete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 24\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: uploadItem,\n        children: \"upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 47\n      }, this)]\n    }, void 0, true)\n  }, void 0, false);\n};\n\n_s(UploadFiles, \"F6Bjij5oRf6dDktMh7ApE9uCeSM=\");\n\n_c = UploadFiles;\n\nvar _c;\n\n$RefreshReg$(_c, \"UploadFiles\");","map":{"version":3,"names":["React","useState","postUploadArtwork","postUploadItemIdx","getMerge","UploadFiles","fileBufferList","fileInfoList","finalHash","title","desc","uploadState","setState","uploadItem","setFileChunks","alert","uploadItemIdx","record","hash","then","response","console","log","size","map","file","index","fileChunks","fileIndex","cur","length","push","section","chunk","slice","uploadList","mergeChunks","_index","item","fileName","name","result","idx","undefined"],"sources":["/home/giparang/threadweb/fortune/client/src/components/uploadFiles.js"],"sourcesContent":["import React, { useState }from \"react\";\nimport { postUploadArtwork, postUploadItemIdx, getMerge } from \"../api\";\n\nexport const UploadFiles = ({\n    fileBufferList,\n    fileInfoList,\n    finalHash,\n    title, desc\n  }) => {\n\n  const [uploadState, setState] = useState(false);\n\n  const uploadItem = () => {\n    if(title !== '' && desc !== ''){\n      setFileChunks();\n      //uploadItemIdx();\n      setState(true);\n    }\n    else{\n      alert('Please enter the title and description of the item to be uploaded')\n    }\n  }\n  const uploadItemIdx = () => {\n    const record = {\n      title: title,\n      desc: desc,\n      hash: finalHash\n    }\n    postUploadItemIdx(record).then(response => {\n      console.log(response);\n    })\n  }\n  const setFileChunks = async() => {\n    const size = 1024 * 50; //50KB 50KB Section size\n    await fileBufferList.map((file, index) => {\n      let fileChunks = [];\n      let fileIndex = 0;\n      for(let cur = 0; cur < file.length; cur += size) {\n        fileChunks.push({\n          section: fileIndex++,\n          chunk: file.slice(cur, cur + size),\n        });\n      }\n      uploadList(fileChunks, index++);\n    })\n    mergeChunks();\n  }\n  const uploadList = (fileChunks, _index) => {\n    //return new Promise(resolve => {\n      fileChunks.map((item, index) => {\n        const record = {\n          fileName: fileInfoList[_index].name,\n          section: item.section,\n          chunk: item.chunk,\n        }\n        console.log(record);\n        postUploadArtwork(record).then(result => {\n          console.log(result);\n        })\n      })\n    //   resolve();\n    // })\n    \n  }\n  const mergeChunks = async() => {\n    fileInfoList.map((item, idx) => {\n      getMerge(item.name, finalHash).then(response => {\n        console.log(response);\n      })\n    })\n  }\n  return(\n    <>\n      {finalHash == undefined ? <>\n      </> : \n      <>\n        <h4>uploadfiles.js</h4>\n        \n        {uploadState ? <p>upload complete</p>:<button onClick={uploadItem}>upload</button>}\n      </>}\n    </>\n  )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}