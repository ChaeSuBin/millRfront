{"ast":null,"code":"import { mintingToken } from '../../utilityUnits/connMintService';\nimport { getUserId } from '../../api';\nlet count = 0;\nconst intervalId = null;\nexport const buyToknMint = async (_price, _itemId, setFlag, set_w_Flag, FROM_ADDR, PRIVATE_KEY) => {\n  console.log(PRIVATE_KEY);\n  const value = parseInt(_price * 100000) + '0000000000000';\n  mintingToken(FROM_ADDR, PRIVATE_KEY, _itemId, value).then(result => {\n    if (result === true) {\n      intervalId = setInterval(() => {\n        if (count > 9) {\n          clearInterval(intervalId);\n          set_w_Flag(false);\n          setFlag(false);\n          alert('입력하신 Private Key가 다른 주소의 키 같습니다\\n 키를 확인 후 다시 시도하여주십시오.');\n        } else ++count;\n      }, 1000);\n    } else {\n      set_w_Flag(false);\n      alert(`⚠️Err: ${result}`);\n    }\n  });\n};\nexport const stopTimer = () => {\n  clearInterval(intervalId);\n  intervalId = null;\n};\nexport const serveToknIdx = async (_toknId, _remain) => {// const userId = await getUserId(cid);\n  // const record = {\n  //   itemId: itemId,\n  //   toknId: _toknId,\n  //   userId: userId\n  // }\n  // console.log(record);\n  // if(_remain == 1){\n  //   console.log(_remain);\n  //   putItemClose({itemID: idxId});\n  // }\n  // postMintTokn(record).then(resultIdx => {\n  //   if(resultIdx){\n  //     set_w_Flag(false); setFlag(false);\n  //     clearInterval(intervalId.current);\n  //     intervalId.current=null;\n  //     alert('🎉Successfully purchased');\n  //     navigate(\"/\");}\n  // })\n};","map":{"version":3,"names":["mintingToken","getUserId","count","intervalId","buyToknMint","_price","_itemId","setFlag","set_w_Flag","FROM_ADDR","PRIVATE_KEY","console","log","value","parseInt","then","result","setInterval","clearInterval","alert","stopTimer","serveToknIdx","_toknId","_remain"],"sources":["/home/giparang/threadweb/fortune/client/src/components/detailPages/toknMint.js"],"sourcesContent":["import { mintingToken } from '../../utilityUnits/connMintService';\nimport { getUserId } from '../../api';\n\nlet count = 0;\nconst intervalId = null;\n\nexport const buyToknMint = async(_price, _itemId, setFlag, set_w_Flag, FROM_ADDR, PRIVATE_KEY) => {\n  console.log(PRIVATE_KEY);\n  const value = parseInt(_price*100000) + '0000000000000';\n  mintingToken(FROM_ADDR, PRIVATE_KEY, _itemId, value).then(result => {\n    if(result === true){\n      intervalId = setInterval(() => {\n        if(count > 9){\n          clearInterval(intervalId);\n          set_w_Flag(false); setFlag(false);\n          alert('입력하신 Private Key가 다른 주소의 키 같습니다\\n 키를 확인 후 다시 시도하여주십시오.')\n        }\n        else\n          ++count;\n      }, 1000);\n    }\n    else{\n      set_w_Flag(false);\n      alert(`⚠️Err: ${result}`);\n    }\n  })\n}\nexport const stopTimer = () => {\n  clearInterval(intervalId);\n  intervalId=null;\n}\nexport const serveToknIdx = async(_toknId, _remain) => {\n  // const userId = await getUserId(cid);\n  // const record = {\n  //   itemId: itemId,\n  //   toknId: _toknId,\n  //   userId: userId\n  // }\n  // console.log(record);\n  // if(_remain == 1){\n  //   console.log(_remain);\n  //   putItemClose({itemID: idxId});\n  // }\n  // postMintTokn(record).then(resultIdx => {\n  //   if(resultIdx){\n  //     set_w_Flag(false); setFlag(false);\n  //     clearInterval(intervalId.current);\n  //     intervalId.current=null;\n  //     alert('🎉Successfully purchased');\n  //     navigate(\"/\");}\n  // })\n}"],"mappings":"AAAA,SAASA,YAAT,QAA6B,oCAA7B;AACA,SAASC,SAAT,QAA0B,WAA1B;AAEA,IAAIC,KAAK,GAAG,CAAZ;AACA,MAAMC,UAAU,GAAG,IAAnB;AAEA,OAAO,MAAMC,WAAW,GAAG,OAAMC,MAAN,EAAcC,OAAd,EAAuBC,OAAvB,EAAgCC,UAAhC,EAA4CC,SAA5C,EAAuDC,WAAvD,KAAuE;EAChGC,OAAO,CAACC,GAAR,CAAYF,WAAZ;EACA,MAAMG,KAAK,GAAGC,QAAQ,CAACT,MAAM,GAAC,MAAR,CAAR,GAA0B,eAAxC;EACAL,YAAY,CAACS,SAAD,EAAYC,WAAZ,EAAyBJ,OAAzB,EAAkCO,KAAlC,CAAZ,CAAqDE,IAArD,CAA0DC,MAAM,IAAI;IAClE,IAAGA,MAAM,KAAK,IAAd,EAAmB;MACjBb,UAAU,GAAGc,WAAW,CAAC,MAAM;QAC7B,IAAGf,KAAK,GAAG,CAAX,EAAa;UACXgB,aAAa,CAACf,UAAD,CAAb;UACAK,UAAU,CAAC,KAAD,CAAV;UAAmBD,OAAO,CAAC,KAAD,CAAP;UACnBY,KAAK,CAAC,wDAAD,CAAL;QACD,CAJD,MAME,EAAEjB,KAAF;MACH,CARuB,EAQrB,IARqB,CAAxB;IASD,CAVD,MAWI;MACFM,UAAU,CAAC,KAAD,CAAV;MACAW,KAAK,CAAE,UAASH,MAAO,EAAlB,CAAL;IACD;EACF,CAhBD;AAiBD,CApBM;AAqBP,OAAO,MAAMI,SAAS,GAAG,MAAM;EAC7BF,aAAa,CAACf,UAAD,CAAb;EACAA,UAAU,GAAC,IAAX;AACD,CAHM;AAIP,OAAO,MAAMkB,YAAY,GAAG,OAAMC,OAAN,EAAeC,OAAf,KAA2B,CACrD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACD,CApBM"},"metadata":{},"sourceType":"module"}