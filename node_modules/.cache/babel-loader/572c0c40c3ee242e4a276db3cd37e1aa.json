{"ast":null,"code":"var _jsxFileName = \"/home/giparang/threadweb/fortune/client/src/components/setFileHash.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { onFileInputChange } from \"../utilityUnits/fileToBuffer\";\nimport { fileToHash, setFinalHash } from '../utilityUnits/fileToHash';\nimport { FilesList } from \"../components/dispFileList\";\nimport { UploadFiles } from \"./uploadFiles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const SetFileHash = _ref => {\n  _s();\n\n  let {\n    title,\n    desc,\n    pWire\n  } = _ref;\n  let te = -1;\n  let hashArr = [];\n  const [status, setStatus] = useState(0);\n  const [fileBuffer, setFileBuffer] = useState([]);\n  const [fileInfo, setFileInfo] = useState([]);\n  const [fileHashs, setFileHashs] = useState([]);\n  const [endHash, setEndHash] = useState();\n  const [passA, setCheckA] = useState();\n  useEffect(() => {\n    pWire(endHash);\n  }, [endHash]);\n\n  const extractHash = async () => {\n    sortFileSize().then(result => {\n      if (result) {\n        getFileHashArr();\n      }\n    });\n  };\n\n  const getFileHashArr = () => {\n    console.log(fileBuffer.length);\n    hashArr = fileToHash(fileBuffer, setFileHashs, setStatus);\n    const endHash = getFinalHash(hashArr);\n    console.log(endHash);\n    setEndHash(endHash);\n  };\n\n  const sortFileSize = async () => {\n    let asc = function (a, b) {\n      return a.length < b.length ? -1 : 1; //オブジェクトの昇順ソート\n    };\n\n    let ascIndex = function (a, b) {\n      return a.size < b.size ? -1 : 1;\n    };\n\n    if (fileBuffer.length !== 0) {\n      fileBuffer.sort(asc);\n      fileInfo.sort(ascIndex);\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const getFinalHash = _hashArr => {\n    let fileNum = 0;\n    let hashsStr = ''; //let fileTypeArr = [];\n\n    do {\n      hashsStr += _hashArr[fileNum]; //fileTypeArr.push((fileInfo[fileNum].type).split('/').pop());\n\n      ++fileNum;\n    } while (_hashArr.length > fileNum);\n\n    return setFinalHash(hashsStr);\n  };\n\n  const checkFileLen = e => {\n    if (e.target.length === fileBuffer.length) {\n      console.log('wow');\n    } else {\n      console.log('else');\n      ;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"extract hash\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"inputfile\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: evt => onFileInputChange(evt, setFileBuffer, setFileInfo),\n        multiple: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 36\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 27\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), fileInfo.map(uploadItems => /*#__PURE__*/_jsxDEV(FilesList, {\n      row: ++te,\n      title: uploadItems.name,\n      type: uploadItems.type,\n      size: uploadItems.size,\n      hash: fileHashs[te]\n    }, uploadItems.name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: extractHash,\n      children: \"extract\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), status, /*#__PURE__*/_jsxDEV(UploadFiles, {\n      title: title,\n      desc: desc,\n      fileBufferList: fileBuffer,\n      fileInfoList: fileInfo,\n      finalHash: endHash\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SetFileHash, \"wNUm2CnveI8veDK1p19513fGLYc=\");\n\n_c = SetFileHash;\nexport const StatusPer = _ref2 => {\n  let {\n    status\n  } = _ref2;\n  console.log(status);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: status\n  }, void 0, false);\n};\n_c2 = StatusPer;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SetFileHash\");\n$RefreshReg$(_c2, \"StatusPer\");","map":{"version":3,"names":["React","useState","useEffect","onFileInputChange","fileToHash","setFinalHash","FilesList","UploadFiles","SetFileHash","title","desc","pWire","te","hashArr","status","setStatus","fileBuffer","setFileBuffer","fileInfo","setFileInfo","fileHashs","setFileHashs","endHash","setEndHash","passA","setCheckA","extractHash","sortFileSize","then","result","getFileHashArr","console","log","length","getFinalHash","asc","a","b","ascIndex","size","sort","_hashArr","fileNum","hashsStr","checkFileLen","e","target","evt","map","uploadItems","name","type","StatusPer"],"sources":["/home/giparang/threadweb/fortune/client/src/components/setFileHash.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { onFileInputChange } from \"../utilityUnits/fileToBuffer\";\nimport { fileToHash, setFinalHash } from '../utilityUnits/fileToHash'\nimport { FilesList } from \"../components/dispFileList\";\nimport { UploadFiles } from \"./uploadFiles\";\n\nexport const SetFileHash = ({title, desc, pWire}) => {\n\n  let te = -1;\n  let hashArr = [];\n  const [status, setStatus] = useState(0);\n  const [fileBuffer, setFileBuffer] = useState([]);\n  const [fileInfo, setFileInfo] = useState([]);\n  const [fileHashs, setFileHashs] = useState([]);\n  const [endHash, setEndHash] = useState();\n  const [passA, setCheckA] = useState();\n\n  useEffect(() => {\n    pWire(endHash);\n  },[endHash])\n  \n  const extractHash = async() => {\n    sortFileSize().then(result => {\n      if(result){\n        getFileHashArr();\n      }\n    })\n  }\n  const getFileHashArr = () => {\n    console.log(fileBuffer.length);\n    hashArr = fileToHash(fileBuffer, setFileHashs, setStatus);\n    const endHash = getFinalHash(hashArr);\n    console.log(endHash);\n    setEndHash(endHash);\n  }\n\n  const sortFileSize = async() => {\n    let asc = function (a, b) {\n      return (a.length < b.length) ? -1 : 1;  //オブジェクトの昇順ソート\n    }\n    let ascIndex = function(a, b) {\n      return (a.size < b.size) ? -1 : 1;\n    }\n    if(fileBuffer.length !== 0){\n      fileBuffer.sort(asc);\n      fileInfo.sort(ascIndex);\n      return true;\n    }\n    else{\n      return false;\n    }  \n  }\n  \n  const getFinalHash = (_hashArr) => {\n    let fileNum = 0;\n    let hashsStr = '';\n    //let fileTypeArr = [];\n    do {\n      hashsStr += _hashArr[fileNum];\n      //fileTypeArr.push((fileInfo[fileNum].type).split('/').pop());\n      ++fileNum;\n    } while (_hashArr.length > fileNum);\n    return setFinalHash(hashsStr);\n  }\n  const checkFileLen = (e) => {\n    if(e.target.length === fileBuffer.length){\n      console.log('wow')\n    }\n    else{\n      console.log('else');;\n    }\n  }\n  return(\n    <div>\n      <h4>extract hash</h4>\n      <label className=\"inputfile\"><input type='file' \n        onChange={(evt)=>\n          onFileInputChange(evt, setFileBuffer, setFileInfo)} \n        multiple/></label><br/>\n      <br/>\n      {fileInfo.map(uploadItems => (\n        <FilesList\n          key={uploadItems.name}\n          row={++te}\n          title = {uploadItems.name}\n          type = {uploadItems.type}\n          size = {uploadItems.size}\n          hash = {fileHashs[te]}\n        />\n      ))}\n      <button onClick={extractHash}>extract</button>\n      {status}\n      <UploadFiles\n        title = {title}\n        desc = {desc}\n        fileBufferList = {fileBuffer}\n        fileInfoList = {fileInfo}\n        finalHash = {endHash}\n      />\n    </div>\n  )\n}\nexport const StatusPer = ({status}) => {\n  console.log(status);\n  return(<>\n    {status}\n  </>)\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}