{"ast":null,"code":"var _jsxFileName = \"/home/giparang/threadweb/fortune/client/src/components/mintItem.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport MintServiceABI from '../contracts/MintService.json';\nimport { getChainId } from '../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const MintItemCpnt = _ref => {\n  _s();\n\n  let {\n    web3,\n    toknUri\n  } = _ref;\n  const SEND_ADDR = sessionStorage.getItem('chainid');\n  const [NumOfTokn, setNumOfTokn] = useState(null);\n  const [PRIVATE_KEY, setPrivKey] = useState(null);\n  const [mintService, setService] = useState(null);\n  const [nonce, setNonce] = useState();\n  const [chainId, setChainId] = useState();\n  const [modalFlag, setFlag] = useState(false);\n  useEffect(() => {\n    if (web3 !== null && toknUri !== null) {\n      setSignData();\n    }\n  }, [web3, toknUri]);\n\n  const setSignData = async () => {\n    const mintService = new web3.eth.Contract(MintServiceABI, '0x306a271F178aD37083cDA734F3Aca694FF301B0F');\n    setService(mintService);\n    const nonce = await web3.eth.getTransactionCount(SEND_ADDR, 'latest');\n    console.log('nonce: ', nonce);\n    setNonce(nonce);\n    const chainId = await web3.eth.getChainId();\n    console.log('chainId: ', chainId);\n    setChainId(chainId);\n  };\n\n  const setNFT = async () => {\n    const method = mintService.methods.CreateItem(SEND_ADDR, toknUri, NumOfTokn);\n    const code = await method.encodeABI();\n    const gas = await method.estimateGas({\n      from: SEND_ADDR\n    });\n    const gasPrice = await web3.eth.getGasPrice();\n    const tx = {\n      nonce: nonce,\n      chainId: chainId,\n      from: SEND_ADDR,\n      to: '0x306a271F178aD37083cDA734F3Aca694FF301B0F',\n      value: '0',\n      data: code,\n      gasPrice: gasPrice,\n      gas: gas\n    }; //console.log(tx);\n\n    const signedTx = await web3.eth.accounts.signTransaction(tx, PRIVATE_KEY);\n    web3.eth.sendSignedTransaction(signedTx.rawTransaction, function (error, hash) {\n      if (!error) console.log(\"🎉 The hash of your transaction is: \", hash, \"\\n Check Polygon Scan to view the status of your transaction!\");else console.log(\"❗Something went wrong while submitting your transaction:\", error);\n    });\n  };\n\n  const inputDataConfirm = () => {};\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"mintItem.js\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: [\"num of tokn to mint: \", /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"number of token\",\n        onChange: evt => setNumOfTokn(evt.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: [\"private Key: \", /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"input your private key to mint nft\",\n        onChange: evt => setPrivKey(evt.target.value),\n        size: \"45\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setFlag(true),\n      children: \"tempb\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(AlertModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MintItemCpnt, \"q/7Qau2Dg17pnFg3h59HUcFnRh0=\");\n\n_c = MintItemCpnt;\n\nconst AlertModal = _ref2 => {\n  let {\n    showFlag,\n    ADDR,\n    PRIVATE_KEY\n  } = _ref2;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: showFlag ?\n    /*#__PURE__*/\n    // showFlagがtrueだったらModalを表示する\n    _jsxDEV(\"div\", {\n      id: \"overlay\",\n      className: \"overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"modalcontents\",\n        className: \"modalcontents\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\uD83C\\uDF89Successfuly Created\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 32\n          }, this), \"CHAIN ID: \", ADDR, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 27\n          }, this), \"PRIVATE KEY: \", PRIVATE_KEY, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 37\n          }, this), \"\\uBE44\\uBC00\\uD0A4\\uB294 \\uBD84\\uC2E4 \\uC2DC \\uB418\\uCC3E\\uC744 \\uC218 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 32\n          }, this), \"\\uBC18\\uB4DC\\uC2DC \\uBA54\\uBAA8\\uC7A5 \\uB4F1 \\uC790\\uC2E0\\uB9CC\\uC774 \\uC54C \\uC218 \\uC788\\uB294 \\uACF3\\uC5D0 \\uC62E\\uACA8 \\uC800\\uC7A5\\uD558\\uC2ED\\uC2DC\\uC624.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 46\n          }, this), \"\\uBE44\\uBC00\\uD0A4\\uB294 \\uC808\\uB300\\uB85C \\uD0C0\\uC778\\uC5D0\\uAC8C \\uC54C\\uB824\\uC8FC\\uC9C0 \\uB9C8\\uC2ED\\uC2DC\\uC624.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 35\n          }, this), \"*\\uD398\\uC774\\uC9C0\\uB97C \\uC0C8\\uB85C\\uACE0\\uCE68\\uD558\\uBA74 \\uC801\\uC6A9\\uB429\\uB2C8\\uB2E4.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) // showFlagがfalseの場合はModalは表示しない)\n\n  }, void 0, false);\n};\n\n_c2 = AlertModal;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MintItemCpnt\");\n$RefreshReg$(_c2, \"AlertModal\");","map":{"version":3,"names":["React","useState","useEffect","MintServiceABI","getChainId","MintItemCpnt","web3","toknUri","SEND_ADDR","sessionStorage","getItem","NumOfTokn","setNumOfTokn","PRIVATE_KEY","setPrivKey","mintService","setService","nonce","setNonce","chainId","setChainId","modalFlag","setFlag","setSignData","eth","Contract","getTransactionCount","console","log","setNFT","method","methods","CreateItem","code","encodeABI","gas","estimateGas","from","gasPrice","getGasPrice","tx","to","value","data","signedTx","accounts","signTransaction","sendSignedTransaction","rawTransaction","error","hash","inputDataConfirm","evt","target","AlertModal","showFlag","ADDR"],"sources":["/home/giparang/threadweb/fortune/client/src/components/mintItem.js"],"sourcesContent":["import React from 'react';\nimport { useState, useEffect } from 'react';\nimport MintServiceABI from '../contracts/MintService.json';\nimport { getChainId } from '../api';\n\nexport const MintItemCpnt = ({web3, toknUri}) => {\n  const SEND_ADDR = sessionStorage.getItem('chainid');\n  const [NumOfTokn, setNumOfTokn] = useState(null);\n  const [PRIVATE_KEY, setPrivKey] = useState(null);\n  const [mintService, setService] = useState(null);\n  const [nonce, setNonce] = useState();\n  const [chainId, setChainId] = useState();\n  const [modalFlag, setFlag] = useState(false);\n\n  useEffect(() => {\n    if(web3 !== null && toknUri !==null ){\n      setSignData();\n    }\n  },[web3, toknUri])\n\n  const setSignData = async() => {\n    const mintService = new web3.eth.Contract(\n      MintServiceABI, '0x306a271F178aD37083cDA734F3Aca694FF301B0F'\n    )\n    setService(mintService);\n    \n    const nonce = await web3.eth.getTransactionCount(SEND_ADDR, 'latest');\n    console.log('nonce: ', nonce);\n    setNonce(nonce);\n\n    const chainId = await web3.eth.getChainId();\n    console.log('chainId: ', chainId);\n    setChainId(chainId); \n  }\n  const setNFT = async() => {\n    const method = mintService.methods.CreateItem(SEND_ADDR, toknUri, NumOfTokn);\n    const code = await method.encodeABI();\n    const gas = await method.estimateGas({from: SEND_ADDR});\n    const gasPrice = await web3.eth.getGasPrice();\n\n    const tx = {\n      nonce: nonce,\n      chainId: chainId,\n      from: SEND_ADDR,\n      to: '0x306a271F178aD37083cDA734F3Aca694FF301B0F',\n      value: '0',\n      data: code,\n      gasPrice: gasPrice,\n      gas: gas\n    };\n    //console.log(tx);\n    const signedTx = await web3.eth.accounts.signTransaction(tx, PRIVATE_KEY);\n\n    web3.eth.sendSignedTransaction(signedTx.rawTransaction, function(error, hash) {\n      if (!error)\n        console.log(\"🎉 The hash of your transaction is: \", hash, \"\\n Check Polygon Scan to view the status of your transaction!\");\n      else\n        console.log(\"❗Something went wrong while submitting your transaction:\", error);\n    });\n  }\n  const inputDataConfirm = () => {\n\n  }\n  return(\n    <>\n    <h4>mintItem.js</h4>\n    <h5>num of tokn to mint: <input placeholder='number of token' onChange={(evt)=>setNumOfTokn(evt.target.value)}/></h5>\n    <h5>private Key: <input placeholder='input your private key to mint nft' onChange={(evt)=>setPrivKey(evt.target.value)} size='45'/></h5>\n    <button onClick={()=>setFlag(true)}>tempb</button>\n    <AlertModal />\n    </>\n  )\n}\n\nconst AlertModal = ({showFlag, ADDR, PRIVATE_KEY}) => {\n  return(\n    <>{showFlag ? ( // showFlagがtrueだったらModalを表示する\n      <div id=\"overlay\" className='overlay'>\n        <div id=\"modalcontents\" className=\"modalcontents\">\n        <p>\n          🎉Successfuly Created<br/>\n          CHAIN ID: {ADDR}<br/>\n          PRIVATE KEY: {PRIVATE_KEY}<br/>\n          비밀키는 분실 시 되찾을 수 없습니다.<br/>\n          반드시 메모장 등 자신만이 알 수 있는 곳에 옮겨 저장하십시오.<br/>\n          비밀키는 절대로 타인에게 알려주지 마십시오.<br/>\n          *페이지를 새로고침하면 적용됩니다.\n        </p>\n        </div>\n      </div>\n      ) : (\n        <></>// showFlagがfalseの場合はModalは表示しない)\n      )}\n    </>\n  )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}