{"ast":null,"code":"var _jsxFileName = \"/home/giparang/threadweb/fortune/client/src/components/uploadFiles.js\";\nimport React from \"react\";\nimport { postUploadArtwork, postUploadItemIdx, getMerge } from \"../api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const UploadFiles = _ref => {\n  let {\n    fileBufferList,\n    fileInfoList,\n    finalHash,\n    title,\n    desc\n  } = _ref;\n\n  const checkParams = () => {\n    console.log(fileBufferList);\n  };\n\n  const uploadItem = () => {\n    if (title !== '' && desc !== '') {\n      setFileChunks();\n      uploadItemIdx();\n    } else {\n      alert('Please enter the title and description of the item to be uploaded');\n    }\n  };\n\n  const uploadItemIdx = () => {\n    const record = {\n      title: title,\n      desc: desc,\n      hash: finalHash\n    };\n    postUploadItemIdx(record).then(response => {\n      console.log(response);\n    });\n  };\n\n  const setFileChunks = () => {\n    const size = 1024 * 50; //50KB 50KB Section size\n\n    fileBufferList.map((file, index) => {\n      let fileChunks = [];\n      let fileIndex = 0;\n\n      for (let cur = 0; cur < file.length; cur += size) {\n        fileChunks.push({\n          section: fileIndex++,\n          chunk: file.slice(cur, cur + size)\n        });\n      }\n\n      uploadList(fileChunks, index++);\n    });\n    mergeChunks();\n  };\n\n  const uploadList = (fileChunks, _index) => {\n    fileChunks.map((item, index) => {\n      const record = {\n        fileName: fileInfoList[_index].name,\n        section: item.section,\n        chunk: item.chunk\n      };\n      console.log(record);\n      postUploadArtwork(record).then(result => {\n        console.log(result);\n      });\n    });\n  };\n\n  const mergeChunks = () => {\n    fileInfoList.map((item, idx) => {\n      getMerge(item.name, finalHash).then(response => {\n        console.log(response);\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \"uploadfiles.js\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: uploadItem,\n      children: \"upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_c = UploadFiles;\n\nvar _c;\n\n$RefreshReg$(_c, \"UploadFiles\");","map":{"version":3,"names":["React","postUploadArtwork","postUploadItemIdx","getMerge","UploadFiles","fileBufferList","fileInfoList","finalHash","title","desc","checkParams","console","log","uploadItem","setFileChunks","uploadItemIdx","alert","record","hash","then","response","size","map","file","index","fileChunks","fileIndex","cur","length","push","section","chunk","slice","uploadList","mergeChunks","_index","item","fileName","name","result","idx"],"sources":["/home/giparang/threadweb/fortune/client/src/components/uploadFiles.js"],"sourcesContent":["import React from \"react\";\nimport { postUploadArtwork, postUploadItemIdx, getMerge } from \"../api\";\n\nexport const UploadFiles = ({\n    fileBufferList,\n    fileInfoList,\n    finalHash,\n    title, desc,\n  }) => {\n\n  const checkParams = () => {\n    console.log(fileBufferList)\n  }\n  const uploadItem = () => {\n    if(title !== '' && desc !== ''){\n      setFileChunks();\n      uploadItemIdx();\n    }\n    else{\n      alert('Please enter the title and description of the item to be uploaded')\n    }\n  }\n  const uploadItemIdx = () => {\n    const record = {\n      title: title,\n      desc: desc,\n      hash: finalHash\n    }\n    postUploadItemIdx(record).then(response => {\n      console.log(response);\n    })\n  }\n  const setFileChunks = () => {\n    const size = 1024 * 50; //50KB 50KB Section size\n\n    fileBufferList.map((file, index) => {\n      let fileChunks = [];\n      let fileIndex = 0;\n      for(let cur = 0; cur < file.length; cur += size) {\n        fileChunks.push({\n          section: fileIndex++,\n          chunk: file.slice(cur, cur + size),\n        });\n      }\n      uploadList(fileChunks, index++);\n    })\n    mergeChunks();\n  }\n  const uploadList = (fileChunks, _index) => {\n    fileChunks.map((item, index) => {\n      const record = {\n        fileName: fileInfoList[_index].name,\n        section: item.section,\n        chunk: item.chunk,\n      }\n      console.log(record);\n      postUploadArtwork(record).then(result => {\n        console.log(result);\n      })\n    })\n  }\n  const mergeChunks = () => {\n    fileInfoList.map((item, idx) => {\n      getMerge(item.name, finalHash).then(response => {\n        console.log(response);\n      })\n    })\n  }\n  return(\n    <>\n      <h5>uploadfiles.js</h5>\n      {/* <button onClick={checkParams}>checkParams</button><br/> */}\n      <button onClick={uploadItem}>upload</button>\n    </>\n  )\n}"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,EAA4BC,iBAA5B,EAA+CC,QAA/C,QAA+D,QAA/D;;;AAEA,OAAO,MAAMC,WAAW,GAAG,QAKnB;EAAA,IALoB;IACxBC,cADwB;IAExBC,YAFwB;IAGxBC,SAHwB;IAIxBC,KAJwB;IAIjBC;EAJiB,CAKpB;;EAEN,MAAMC,WAAW,GAAG,MAAM;IACxBC,OAAO,CAACC,GAAR,CAAYP,cAAZ;EACD,CAFD;;EAGA,MAAMQ,UAAU,GAAG,MAAM;IACvB,IAAGL,KAAK,KAAK,EAAV,IAAgBC,IAAI,KAAK,EAA5B,EAA+B;MAC7BK,aAAa;MACbC,aAAa;IACd,CAHD,MAII;MACFC,KAAK,CAAC,mEAAD,CAAL;IACD;EACF,CARD;;EASA,MAAMD,aAAa,GAAG,MAAM;IAC1B,MAAME,MAAM,GAAG;MACbT,KAAK,EAAEA,KADM;MAEbC,IAAI,EAAEA,IAFO;MAGbS,IAAI,EAAEX;IAHO,CAAf;IAKAL,iBAAiB,CAACe,MAAD,CAAjB,CAA0BE,IAA1B,CAA+BC,QAAQ,IAAI;MACzCT,OAAO,CAACC,GAAR,CAAYQ,QAAZ;IACD,CAFD;EAGD,CATD;;EAUA,MAAMN,aAAa,GAAG,MAAM;IAC1B,MAAMO,IAAI,GAAG,OAAO,EAApB,CAD0B,CACF;;IAExBhB,cAAc,CAACiB,GAAf,CAAmB,CAACC,IAAD,EAAOC,KAAP,KAAiB;MAClC,IAAIC,UAAU,GAAG,EAAjB;MACA,IAAIC,SAAS,GAAG,CAAhB;;MACA,KAAI,IAAIC,GAAG,GAAG,CAAd,EAAiBA,GAAG,GAAGJ,IAAI,CAACK,MAA5B,EAAoCD,GAAG,IAAIN,IAA3C,EAAiD;QAC/CI,UAAU,CAACI,IAAX,CAAgB;UACdC,OAAO,EAAEJ,SAAS,EADJ;UAEdK,KAAK,EAAER,IAAI,CAACS,KAAL,CAAWL,GAAX,EAAgBA,GAAG,GAAGN,IAAtB;QAFO,CAAhB;MAID;;MACDY,UAAU,CAACR,UAAD,EAAaD,KAAK,EAAlB,CAAV;IACD,CAVD;IAWAU,WAAW;EACZ,CAfD;;EAgBA,MAAMD,UAAU,GAAG,CAACR,UAAD,EAAaU,MAAb,KAAwB;IACzCV,UAAU,CAACH,GAAX,CAAe,CAACc,IAAD,EAAOZ,KAAP,KAAiB;MAC9B,MAAMP,MAAM,GAAG;QACboB,QAAQ,EAAE/B,YAAY,CAAC6B,MAAD,CAAZ,CAAqBG,IADlB;QAEbR,OAAO,EAAEM,IAAI,CAACN,OAFD;QAGbC,KAAK,EAAEK,IAAI,CAACL;MAHC,CAAf;MAKApB,OAAO,CAACC,GAAR,CAAYK,MAAZ;MACAhB,iBAAiB,CAACgB,MAAD,CAAjB,CAA0BE,IAA1B,CAA+BoB,MAAM,IAAI;QACvC5B,OAAO,CAACC,GAAR,CAAY2B,MAAZ;MACD,CAFD;IAGD,CAVD;EAWD,CAZD;;EAaA,MAAML,WAAW,GAAG,MAAM;IACxB5B,YAAY,CAACgB,GAAb,CAAiB,CAACc,IAAD,EAAOI,GAAP,KAAe;MAC9BrC,QAAQ,CAACiC,IAAI,CAACE,IAAN,EAAY/B,SAAZ,CAAR,CAA+BY,IAA/B,CAAoCC,QAAQ,IAAI;QAC9CT,OAAO,CAACC,GAAR,CAAYQ,QAAZ;MACD,CAFD;IAGD,CAJD;EAKD,CAND;;EAOA,oBACE;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAGE;MAAQ,OAAO,EAAEP,UAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAHF;EAAA,gBADF;AAOD,CAxEM;KAAMT,W"},"metadata":{},"sourceType":"module"}