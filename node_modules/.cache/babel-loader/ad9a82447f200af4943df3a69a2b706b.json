{"ast":null,"code":"var _jsxFileName = \"/home/giparang/threadweb/fortune/client/src/components/uploadFiles.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { postUploadArtwork, postTemp } from \"../api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const UploadFiles = _ref => {\n  let {\n    fileBufferList,\n    fileInfoList,\n    finalHash,\n    title,\n    desc\n  } = _ref;\n\n  const checkParams = () => {\n    postTemp();\n  };\n\n  const setFileChunks = () => {\n    const size = 1024 * 50; //50KB 50KB Section size\n\n    let fileChunks = []; //let index = 0; //Section num\n\n    let fileIndex = 0;\n    fileBufferList.map((file, index) => {\n      for (let cur = 0; cur < file.length; cur += size) {\n        fileChunks.push({\n          section: index++,\n          chunk: file.slice(cur, cur + size)\n        });\n      } //console.log(fileIndex++);\n\n\n      uploadList(fileChunks, fileIndex);\n    });\n  };\n\n  const uploadList = (fileChunks, _index) => {\n    fileChunks.map((item, index) => {\n      const record = {\n        fileName: fileInfoList[_index].name,\n        section: item.section,\n        chunk: item.chunk\n      };\n      postUploadArtwork(record).then(result => {\n        console.log(result);\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \"test-uploadfiles.js\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: checkParams,\n      children: \"checkParams\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: setFileChunks,\n      children: \"chunks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}; // const uploadFiles = () => {\n//     \n//     //postUploadArtwork\n//   }\n\n_c = UploadFiles;\n\nvar _c;\n\n$RefreshReg$(_c, \"UploadFiles\");","map":{"version":3,"names":["React","useState","useEffect","postUploadArtwork","postTemp","UploadFiles","fileBufferList","fileInfoList","finalHash","title","desc","checkParams","setFileChunks","size","fileChunks","fileIndex","map","file","index","cur","length","push","section","chunk","slice","uploadList","_index","item","record","fileName","name","then","result","console","log"],"sources":["/home/giparang/threadweb/fortune/client/src/components/uploadFiles.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { postUploadArtwork, postTemp } from \"../api\";\n\nexport const UploadFiles = ({\n    fileBufferList,\n    fileInfoList,\n    finalHash,\n    title, desc,\n  }) => {\n\n  const checkParams = () => {\n      postTemp();\n  }\n  const setFileChunks = () => {\n    const size = 1024 * 50; //50KB 50KB Section size\n    let fileChunks = [];\n    //let index = 0; //Section num\n    let fileIndex = 0;\n\n    fileBufferList.map((file, index) => {\n      for(let cur = 0; cur < file.length; cur += size) {\n        fileChunks.push({\n          section: index++,\n          chunk: file.slice(cur, cur + size),\n        });\n      }\n      //console.log(fileIndex++);\n      uploadList(fileChunks, fileIndex);\n    })\n  }\n  const uploadList = (fileChunks, _index) => {\n    fileChunks.map((item, index) => {\n      const record = {\n        fileName: fileInfoList[_index].name,\n        section: item.section,\n        chunk: item.chunk,\n      }\n      postUploadArtwork(record).then(result => {\n        console.log(result);\n      })\n    })\n  }\n  return(\n    <>\n      <h5>test-uploadfiles.js</h5>\n      <button onClick={checkParams}>checkParams</button>\n      <button onClick={setFileChunks}>chunks</button>\n    </>\n  )\n}\n\n// const uploadFiles = () => {\n//     \n//     //postUploadArtwork\n//   }"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,iBAAT,EAA4BC,QAA5B,QAA4C,QAA5C;;;AAEA,OAAO,MAAMC,WAAW,GAAG,QAKnB;EAAA,IALoB;IACxBC,cADwB;IAExBC,YAFwB;IAGxBC,SAHwB;IAIxBC,KAJwB;IAIjBC;EAJiB,CAKpB;;EAEN,MAAMC,WAAW,GAAG,MAAM;IACtBP,QAAQ;EACX,CAFD;;EAGA,MAAMQ,aAAa,GAAG,MAAM;IAC1B,MAAMC,IAAI,GAAG,OAAO,EAApB,CAD0B,CACF;;IACxB,IAAIC,UAAU,GAAG,EAAjB,CAF0B,CAG1B;;IACA,IAAIC,SAAS,GAAG,CAAhB;IAEAT,cAAc,CAACU,GAAf,CAAmB,CAACC,IAAD,EAAOC,KAAP,KAAiB;MAClC,KAAI,IAAIC,GAAG,GAAG,CAAd,EAAiBA,GAAG,GAAGF,IAAI,CAACG,MAA5B,EAAoCD,GAAG,IAAIN,IAA3C,EAAiD;QAC/CC,UAAU,CAACO,IAAX,CAAgB;UACdC,OAAO,EAAEJ,KAAK,EADA;UAEdK,KAAK,EAAEN,IAAI,CAACO,KAAL,CAAWL,GAAX,EAAgBA,GAAG,GAAGN,IAAtB;QAFO,CAAhB;MAID,CANiC,CAOlC;;;MACAY,UAAU,CAACX,UAAD,EAAaC,SAAb,CAAV;IACD,CATD;EAUD,CAhBD;;EAiBA,MAAMU,UAAU,GAAG,CAACX,UAAD,EAAaY,MAAb,KAAwB;IACzCZ,UAAU,CAACE,GAAX,CAAe,CAACW,IAAD,EAAOT,KAAP,KAAiB;MAC9B,MAAMU,MAAM,GAAG;QACbC,QAAQ,EAAEtB,YAAY,CAACmB,MAAD,CAAZ,CAAqBI,IADlB;QAEbR,OAAO,EAAEK,IAAI,CAACL,OAFD;QAGbC,KAAK,EAAEI,IAAI,CAACJ;MAHC,CAAf;MAKApB,iBAAiB,CAACyB,MAAD,CAAjB,CAA0BG,IAA1B,CAA+BC,MAAM,IAAI;QACvCC,OAAO,CAACC,GAAR,CAAYF,MAAZ;MACD,CAFD;IAGD,CATD;EAUD,CAXD;;EAYA,oBACE;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAQ,OAAO,EAAErB,WAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAFF,eAGE;MAAQ,OAAO,EAAEC,aAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAHF;EAAA,gBADF;AAOD,CA9CM,C,CAgDP;AACA;AACA;AACA;;KAnDaP,W"},"metadata":{},"sourceType":"module"}