{"ast":null,"code":"var _jsxFileName = \"/home/giparang/threadweb/fortune/client/src/components/setMyNft.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport { getItemsIdList, getOwnedItems, getUserId } from '../api';\nimport { getSymbol, getTokenUri, getTokenStatus } from '../utilityUnits/connMintService';\nimport { ListItemsCpnt } from './itemCpnt';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const SetMyNFT = _ref => {\n  _s();\n\n  let {\n    chainId\n  } = _ref;\n  const [toknList, setToknList] = useState([]);\n  const [itemList, setItemList] = useState([]);\n  const [toknStatus, setStatus] = useState([]);\n  useEffect(() => {\n    toknListViewer();\n  }, []);\n\n  const toknListViewer = async () => {\n    let itemInfoArr = [{\n      title: null,\n      hash: null\n    }];\n    let toknList = [];\n    const userId = await getUserId(chainId);\n    const item = await getOwnedItems(userId);\n    let itemLen = item.length;\n\n    do {\n      --itemLen;\n      let title = result[itemLen].title;\n      let hash = result[itemLen].hash;\n      itemInfoArr[itemLen] = {\n        title: title,\n        hash: hash\n      };\n      toknList.push(await getToknList(userId, hash));\n    } while (itemLen > 0);\n\n    setToknList(toknList);\n    setItemList(itemInfoArr);\n  };\n\n  const getToknList = async (_userId, _itemHash) => {\n    return new Promise(resolve => {\n      let toknIdArr = [];\n      getItemsIdList(_userId, _itemHash).then(result => {\n        result.map(tokenId => {\n          toknIdArr.push(tokenId.toknid);\n        });\n        resolve(toknIdArr);\n      });\n    });\n  };\n\n  const temp = () => {\n    console.log(toknList);\n  };\n\n  const getToknStatus = async _toknId => {\n    const toknStatus = await getTokenStatus(_toknId);\n    let count = 0; //console.log(typeof toknStatus[0]);\n\n    do {\n      toknStatus[0] /= 100;\n      ++count;\n    } while (count < 9);\n\n    if (toknStatus[0] != 0) return `${toknStatus[0]} MATIC`;else return 'not for sale';\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"owend NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: temp,\n      children: \"temp\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), itemList.map((searchItems, index) => /*#__PURE__*/_jsxDEV(ListItemsCpnt, {\n      title: searchItems.title,\n      toknList: toknList[index]\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true);\n}; // const getToknIdList = async(_chainId) => {\n//   const f = function (a, b) { return a - b }\n//   const toknIdArrStr = await getOwnedToken(_chainId);\n//   const ownedArr = toknIdArrStr.slice().sort(f);\n//   //.map(str => parseInt(str, 10))\n//   return ownedArr;\n// }\n\n_s(SetMyNFT, \"nZGm9qYOfJmTcFyUW0PyVXdQZOU=\");\n\n_c = SetMyNFT;\n\nconst getToknUri = async _toknId => {\n  return await getTokenUri(_toknId);\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"SetMyNFT\");","map":{"version":3,"names":["React","useState","useEffect","getItemsIdList","getOwnedItems","getUserId","getSymbol","getTokenUri","getTokenStatus","ListItemsCpnt","SetMyNFT","chainId","toknList","setToknList","itemList","setItemList","toknStatus","setStatus","toknListViewer","itemInfoArr","title","hash","userId","item","itemLen","length","result","push","getToknList","_userId","_itemHash","Promise","resolve","toknIdArr","then","map","tokenId","toknid","temp","console","log","getToknStatus","_toknId","count","searchItems","index","getToknUri"],"sources":["/home/giparang/threadweb/fortune/client/src/components/setMyNft.js"],"sourcesContent":["import React from 'react';\nimport { useState, useEffect } from 'react';\nimport { getItemsIdList, getOwnedItems, getUserId } from '../api';\nimport { \n    getSymbol, \n    getTokenUri, \n    getTokenStatus,\n} from '../utilityUnits/connMintService';\nimport { ListItemsCpnt } from './itemCpnt';\n\nexport const SetMyNFT = ({chainId}) => {\n  \n  const [toknList, setToknList] = useState([]);\n  const [itemList, setItemList] = useState([]);\n  const [toknStatus, setStatus] = useState([]);\n\n  useEffect(()=>{\n    toknListViewer();\n  },[])\n\n\n  const toknListViewer = async() => {\n    let itemInfoArr = [{title: null, hash: null}];\n    let toknList = [];\n\n    const userId = await getUserId(chainId);\n    const item = await getOwnedItems(userId);\n    let itemLen = item.length;\n    do{\n      --itemLen\n      let title = result[itemLen].title;\n      let hash = result[itemLen].hash;\n      itemInfoArr[itemLen] = {title: title, hash: hash};\n      toknList.push(await getToknList(userId, hash));\n    }while(itemLen > 0)\n    setToknList(toknList);\n    setItemList(itemInfoArr);\n  }\n  const getToknList = async(_userId, _itemHash) => {\n    return new Promise(resolve => {\n      let toknIdArr = [];\n      getItemsIdList(_userId, _itemHash).then(result => {\n        result.map(tokenId => {\n          toknIdArr.push(tokenId.toknid);\n        })\n        resolve(toknIdArr);\n      })\n    })\n  }\n  const temp = () => {\n    console.log(toknList);\n  }\n  \n  const getToknStatus = async(_toknId) => {\n    const toknStatus = await getTokenStatus(_toknId);\n    let count = 0;\n    //console.log(typeof toknStatus[0]);\n    do{\n      toknStatus[0] /= 100;\n      ++count;\n    }while(count < 9)\n    \n    if(toknStatus[0] != 0)\n      return `${toknStatus[0]} MATIC`;\n    else\n      return 'not for sale';\n  }\n\n  return(\n    <>\n      <h2>owend NFT</h2>\n      <button onClick={temp}>temp</button>\n      {itemList.map((searchItems, index) => (\n        <ListItemsCpnt\n          key={index}\n          title={searchItems.title}\n          toknList={toknList[index]}\n        />\n      ))}\n    </>\n  )\n}\n// const getToknIdList = async(_chainId) => {\n//   const f = function (a, b) { return a - b }\n//   const toknIdArrStr = await getOwnedToken(_chainId);\n//   const ownedArr = toknIdArrStr.slice().sort(f);\n//   //.map(str => parseInt(str, 10))\n//   return ownedArr;\n// }\nconst getToknUri = async(_toknId) => {\n  return await getTokenUri(_toknId);\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}