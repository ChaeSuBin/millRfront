{"ast":null,"code":"import TradeMarketABI from '../contracts/MarketPlace.json';\nimport Web3 from \"web3/dist/web3.min.js\";\nconst web3 = new Web3('wss://ws-mumbai.matic.today');\nconst TradeServiceADDR = '0x1B55207E4eF2f7ac53049E383200cfD330B50D40';\n\nconst tradeService = () => {\n  const contract_Instance = new web3.eth.Contract(TradeMarketABI, TradeServiceADDR);\n  return contract_Instance;\n};\n\nexport const getTradeBalance = async SEND_ADDR => {\n  console.log('lkl');\n  return new Promise(resolve => {\n    tradeService().methods.getMyDeposit().call({\n      from: SEND_ADDR\n    }).then(result => {\n      resolve(result);\n    });\n  });\n};\nexport const buyNFT = async (SEND_ADDR, PRIVATE_KEY, toknId, toknPrice) => {\n  const chainId = await web3.eth.getChainId();\n  const nonce = await web3.eth.getTransactionCount(SEND_ADDR, 'latest');\n  const method = tradeService().methods.buyTokn(toknId);\n  const gasPrice = await web3.eth.getGasPrice();\n  const code = await method.encodeABI();\n  return new Promise(resolve => {\n    method.estimateGas({\n      from: SEND_ADDR,\n      value: toknPrice\n    }).then(estGas => {\n      const tx = {\n        nonce: nonce,\n        chainId: chainId,\n        from: SEND_ADDR,\n        to: TradeServiceADDR,\n        value: toknPrice,\n        //web3.utils.toHex(web3.utils.toWei(toknPrice, 'ether')),\n        data: code,\n        gasPrice: gasPrice,\n        gas: estGas\n      };\n      signTrx(tx, PRIVATE_KEY).then(result => {\n        console.log(result);\n        resolve(result);\n      });\n    }).catch(err => {\n      console.log(err);\n      resolve(err);\n    });\n  });\n};\nexport const withdrawSaleToknPrice = async (SEND_ADDR, PRIVATE_KEY, amount) => {\n  const chainId = await web3.eth.getChainId();\n  const nonce = await web3.eth.getTransactionCount(SEND_ADDR, 'latest');\n  const method = await tradeService().methods.withDrawal(amount);\n  const gasPrice = await web3.eth.getGasPrice();\n  const code = await method.encodeABI();\n  return new Promise(resolve => {\n    method.estimateGas({\n      from: SEND_ADDR\n    }).then(estGas => {\n      const tx = {\n        nonce: nonce,\n        chainId: chainId,\n        from: SEND_ADDR,\n        to: TradeServiceADDR,\n        value: '0',\n        data: code,\n        gasPrice: gasPrice,\n        gas: estGas\n      };\n      signTrx(tx, PRIVATE_KEY).then(result => {\n        console.log(result);\n        resolve(result);\n      });\n    }).catch(err => {\n      console.log(err);\n      resolve(err);\n    });\n  });\n};\n\nconst signTrx = (tx, PRIVATE_KEY) => {\n  return new Promise(resolve => {\n    web3.eth.accounts.signTransaction(tx, PRIVATE_KEY).then(signedTx => {\n      web3.eth.sendSignedTransaction(signedTx.rawTransaction, function (error, hash) {\n        if (!error) resolve(true);else resolve('Check again your Private_Key inputed');\n      });\n    }).catch(err => {\n      console.log(err.message);\n      resolve(err.message);\n    });\n  });\n};","map":{"version":3,"names":["TradeMarketABI","Web3","web3","TradeServiceADDR","tradeService","contract_Instance","eth","Contract","getTradeBalance","SEND_ADDR","console","log","Promise","resolve","methods","getMyDeposit","call","from","then","result","buyNFT","PRIVATE_KEY","toknId","toknPrice","chainId","getChainId","nonce","getTransactionCount","method","buyTokn","gasPrice","getGasPrice","code","encodeABI","estimateGas","value","estGas","tx","to","data","gas","signTrx","catch","err","withdrawSaleToknPrice","amount","withDrawal","accounts","signTransaction","signedTx","sendSignedTransaction","rawTransaction","error","hash","message"],"sources":["/home/giparang/threadweb/fortune/client/src/utilityUnits/connTradeService.js"],"sourcesContent":["import TradeMarketABI from '../contracts/MarketPlace.json';\nimport Web3 from \"web3/dist/web3.min.js\";\nconst web3 = new Web3('wss://ws-mumbai.matic.today');\nconst TradeServiceADDR = '0x1B55207E4eF2f7ac53049E383200cfD330B50D40';\n\nconst tradeService = () => {\n  const contract_Instance = new web3.eth.Contract(\n    TradeMarketABI, TradeServiceADDR\n  )\n  return contract_Instance;\n}\n\nexport const getTradeBalance = async(SEND_ADDR) => {\n  console.log('lkl')\n  return new Promise(resolve => {\n    tradeService().methods.getMyDeposit().call({from: SEND_ADDR}).then(\n      result => {\n        resolve(result);\n      }\n    )\n  })\n}\n\nexport const buyNFT = async(SEND_ADDR, PRIVATE_KEY, toknId, toknPrice) => {\n  const chainId = await web3.eth.getChainId();\n  const nonce = await web3.eth.getTransactionCount(SEND_ADDR, 'latest');\n  const method = tradeService().methods.buyTokn(toknId);\n  const gasPrice = await web3.eth.getGasPrice();\n  const code = await method.encodeABI();\n  return new Promise(resolve => {\n    method.estimateGas({from: SEND_ADDR, value: toknPrice}).then(estGas => {\n      const tx = {\n        nonce: nonce,\n        chainId: chainId,\n        from: SEND_ADDR,\n        to: TradeServiceADDR,\n        value: toknPrice, //web3.utils.toHex(web3.utils.toWei(toknPrice, 'ether')),\n        data: code,\n        gasPrice: gasPrice,\n        gas: estGas\n      };\n      signTrx(tx, PRIVATE_KEY).then(result => {\n        console.log(result);\n        resolve(result);\n      })\n    }).catch(err => {\n      console.log(err);\n      resolve(err);\n    })\n  })\n}\n\nexport const withdrawSaleToknPrice = async(SEND_ADDR, PRIVATE_KEY, amount) => {\n  const chainId = await web3.eth.getChainId();\n  const nonce = await web3.eth.getTransactionCount(SEND_ADDR, 'latest');\n  \n  const method = await tradeService().methods.withDrawal(amount);\n  const gasPrice = await web3.eth.getGasPrice();\n  const code = await method.encodeABI();\n  return new Promise(resolve => {\n    method.estimateGas({from: SEND_ADDR}).then(estGas => {\n      const tx = {\n        nonce: nonce,\n        chainId: chainId,\n        from: SEND_ADDR,\n        to: TradeServiceADDR,\n        value: '0',\n        data: code,\n        gasPrice: gasPrice,\n        gas: estGas\n      }\n      signTrx(tx, PRIVATE_KEY).then(result => {\n        console.log(result);\n        resolve(result);\n      })\n    }).catch(err => {\n      console.log(err);\n      resolve(err);\n    })\n  })\n}\nconst signTrx = (tx, PRIVATE_KEY) => {\n  return new Promise(resolve => {\n    web3.eth.accounts.signTransaction(tx, PRIVATE_KEY).then(signedTx => {\n      web3.eth.sendSignedTransaction(signedTx.rawTransaction, function(error, hash) {\n        if (!error)\n          resolve(true);\n        else\n          resolve('Check again your Private_Key inputed');\n      });\n    }).catch(err => {\n      console.log(err.message);\n      resolve(err.message);\n    })\n  })\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}