{"ast":null,"code":"var _jsxFileName = \"/home/giparang/threadweb/fortune/client/src/components/uploadFiles.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { postUploadArtwork, postUploadItemIdx, getMerge } from \"../api\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UploadFiles = _ref => {\n  _s();\n\n  let {\n    fileBufferList,\n    fileInfoList,\n    finalHash,\n    title,\n    desc\n  } = _ref;\n  const [uploadState, setState] = useState();\n\n  const uploadItem = async () => {\n    if (title !== '' && desc !== '') {\n      const result = await setFileChunks();\n\n      if (result) {\n        console.log(result);\n        mergeChunks();\n      } //uploadItemIdx();\n\n    } else {\n      alert('Please enter the title and description of the item to be uploaded');\n    }\n  };\n\n  const uploadItemIdx = () => {\n    const record = {\n      title: title,\n      desc: desc,\n      hash: finalHash\n    };\n    postUploadItemIdx(record).then(response => {\n      console.log(response);\n    });\n  };\n\n  const setFileChunks = () => {\n    const size = 1024 * 50; //50KB 50KB Section size\n\n    return new Promise(resolve => {\n      fileBufferList.map((file, index) => {\n        let fileChunks = [];\n        let fileIndex = 0;\n\n        for (let cur = 0; cur < file.length; cur += size) {\n          fileChunks.push({\n            section: fileIndex++,\n            chunk: file.slice(cur, cur + size)\n          });\n        }\n\n        uploadList(fileChunks, index++);\n      });\n      resolve(true);\n    });\n  };\n\n  const uploadList = (fileChunks, _index) => {\n    fileChunks.map((item, index) => {\n      const record = {\n        fileName: fileInfoList[_index].name,\n        section: item.section,\n        chunk: item.chunk\n      };\n      console.log(record);\n      postUploadArtwork(record).then(result => {\n        console.log(result);\n      });\n    });\n  };\n\n  const mergeChunks = () => {\n    fileInfoList.map((item, idx) => {\n      getMerge(item.name, finalHash).then(response => {\n        console.log(response);\n        if (response) setState('upload complete');\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: finalHash == undefined ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"uploadfiles.js\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: uploadItem,\n        children: \"upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), uploadState]\n    }, void 0, true)\n  }, void 0, false);\n};\n\n_s(UploadFiles, \"vIYZuDAMcgD4OGSWDwkV1Z9tvDs=\");\n\n_c = UploadFiles;\n\nvar _c;\n\n$RefreshReg$(_c, \"UploadFiles\");","map":{"version":3,"names":["React","useState","postUploadArtwork","postUploadItemIdx","getMerge","UploadFiles","fileBufferList","fileInfoList","finalHash","title","desc","uploadState","setState","uploadItem","result","setFileChunks","console","log","mergeChunks","alert","uploadItemIdx","record","hash","then","response","size","Promise","resolve","map","file","index","fileChunks","fileIndex","cur","length","push","section","chunk","slice","uploadList","_index","item","fileName","name","idx","undefined"],"sources":["/home/giparang/threadweb/fortune/client/src/components/uploadFiles.js"],"sourcesContent":["import React, { useState }from \"react\";\nimport { postUploadArtwork, postUploadItemIdx, getMerge } from \"../api\";\n\nexport const UploadFiles = ({\n    fileBufferList,\n    fileInfoList,\n    finalHash,\n    title, desc\n  }) => {\n\n  const [uploadState, setState] = useState();\n\n  const uploadItem = async() => {\n    if(title !== '' && desc !== ''){\n      const result = await setFileChunks();\n      if(result){\n        console.log(result);\n        mergeChunks();\n      }\n      //uploadItemIdx();\n    }\n    else{\n      alert('Please enter the title and description of the item to be uploaded')\n    }\n  }\n  const uploadItemIdx = () => {\n    const record = {\n      title: title,\n      desc: desc,\n      hash: finalHash\n    }\n    postUploadItemIdx(record).then(response => {\n      console.log(response);\n    })\n  }\n  const setFileChunks = () => {\n    const size = 1024 * 50; //50KB 50KB Section size\n    return new Promise(resolve => {\n      fileBufferList.map((file, index) => {\n        let fileChunks = [];\n        let fileIndex = 0;\n        for(let cur = 0; cur < file.length; cur += size) {\n          fileChunks.push({\n            section: fileIndex++,\n            chunk: file.slice(cur, cur + size),\n          });\n        }\n        uploadList(fileChunks, index++);\n      })\n      resolve(true);\n    })\n  }\n  const uploadList = (fileChunks, _index) => {\n    fileChunks.map((item, index) => {\n      const record = {\n        fileName: fileInfoList[_index].name,\n        section: item.section,\n        chunk: item.chunk,\n      }\n      console.log(record);\n      postUploadArtwork(record).then(result => {\n        console.log(result);\n      })\n    })\n  }\n  const mergeChunks = () => {\n    fileInfoList.map((item, idx) => {\n      getMerge(item.name, finalHash).then(response => {\n        console.log(response);\n        if(response)\n          setState('upload complete');\n      })\n    })\n  }\n  return(\n    <>\n      {finalHash == undefined ? <>\n      </> : \n      <>\n        <h4>uploadfiles.js</h4>\n        <button onClick={uploadItem}>upload</button>\n        {uploadState}\n      </>}\n    </>\n  )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}