{"ast":null,"code":"export const onFileInputChange = (e, _setBuffer, _setFileInfo, setCheckA) => {\n  const fileByteArray = [];\n  const fileInfo = [];\n  let fileNum = 0;\n\n  while (e.target.files.length > fileNum) {\n    const reader = new FileReader();\n    const fileBufferArray = [];\n    fileInfo.push({\n      name: e.target.files[fileNum].name,\n      type: e.target.files[fileNum].type,\n      size: e.target.files[fileNum].size\n    }); //console.log(e.target.files[fileNum]);\n\n    reader.readAsArrayBuffer(e.target.files[fileNum]);\n\n    reader.onloadend = _evt => {\n      if (_evt.target.readyState === FileReader.DONE) {\n        const arrayBuffer = _evt.target.result,\n              array = new Uint8Array(arrayBuffer);\n\n        for (const a of array) {\n          fileBufferArray.push(a);\n        }\n\n        fileByteArray.push(fileBufferArray);\n        console.log(fileByteArray.length);\n      }\n    };\n\n    ++fileNum;\n  }\n\n  if (e.target.files.length === fileByteArray.length) {\n    setCheckA(true);\n\n    _setBuffer(fileByteArray);\n\n    _setFileInfo(fileInfo);\n  }\n};","map":{"version":3,"names":["onFileInputChange","e","_setBuffer","_setFileInfo","setCheckA","fileByteArray","fileInfo","fileNum","target","files","length","reader","FileReader","fileBufferArray","push","name","type","size","readAsArrayBuffer","onloadend","_evt","readyState","DONE","arrayBuffer","result","array","Uint8Array","a","console","log"],"sources":["/home/giparang/threadweb/fortune/client/src/utilityUnits/fileToBuffer.js"],"sourcesContent":["\nexport const onFileInputChange = (e, _setBuffer, _setFileInfo, setCheckA) => {\n  const fileByteArray = [];\n  const fileInfo = [];\n  let fileNum = 0;\n  \n  while(e.target.files.length > fileNum){\n    const reader = new FileReader();\n    const fileBufferArray = [];\n        \n    fileInfo.push({\n      name: e.target.files[fileNum].name,\n      type: e.target.files[fileNum].type,\n      size: e.target.files[fileNum].size\n    })\n    //console.log(e.target.files[fileNum]);\n    reader.readAsArrayBuffer(e.target.files[fileNum]);\n    reader.onloadend = (_evt) => {\n      if (_evt.target.readyState === FileReader.DONE) {\n        const arrayBuffer = _evt.target.result,\n        array = new Uint8Array(arrayBuffer);\n        for (const a of array) {\n          fileBufferArray.push(a);\n        }\n        fileByteArray.push(fileBufferArray);\n        console.log(fileByteArray.length);\n      }\n    }\n    ++fileNum;\n  }\n  if(e.target.files.length === fileByteArray.length){\n    setCheckA(true);\n  _setBuffer(fileByteArray);\n  _setFileInfo(fileInfo);\n  }\n  \n}"],"mappings":"AACA,OAAO,MAAMA,iBAAiB,GAAG,CAACC,CAAD,EAAIC,UAAJ,EAAgBC,YAAhB,EAA8BC,SAA9B,KAA4C;EAC3E,MAAMC,aAAa,GAAG,EAAtB;EACA,MAAMC,QAAQ,GAAG,EAAjB;EACA,IAAIC,OAAO,GAAG,CAAd;;EAEA,OAAMN,CAAC,CAACO,MAAF,CAASC,KAAT,CAAeC,MAAf,GAAwBH,OAA9B,EAAsC;IACpC,MAAMI,MAAM,GAAG,IAAIC,UAAJ,EAAf;IACA,MAAMC,eAAe,GAAG,EAAxB;IAEAP,QAAQ,CAACQ,IAAT,CAAc;MACZC,IAAI,EAAEd,CAAC,CAACO,MAAF,CAASC,KAAT,CAAeF,OAAf,EAAwBQ,IADlB;MAEZC,IAAI,EAAEf,CAAC,CAACO,MAAF,CAASC,KAAT,CAAeF,OAAf,EAAwBS,IAFlB;MAGZC,IAAI,EAAEhB,CAAC,CAACO,MAAF,CAASC,KAAT,CAAeF,OAAf,EAAwBU;IAHlB,CAAd,EAJoC,CASpC;;IACAN,MAAM,CAACO,iBAAP,CAAyBjB,CAAC,CAACO,MAAF,CAASC,KAAT,CAAeF,OAAf,CAAzB;;IACAI,MAAM,CAACQ,SAAP,GAAoBC,IAAD,IAAU;MAC3B,IAAIA,IAAI,CAACZ,MAAL,CAAYa,UAAZ,KAA2BT,UAAU,CAACU,IAA1C,EAAgD;QAC9C,MAAMC,WAAW,GAAGH,IAAI,CAACZ,MAAL,CAAYgB,MAAhC;QAAA,MACAC,KAAK,GAAG,IAAIC,UAAJ,CAAeH,WAAf,CADR;;QAEA,KAAK,MAAMI,CAAX,IAAgBF,KAAhB,EAAuB;UACrBZ,eAAe,CAACC,IAAhB,CAAqBa,CAArB;QACD;;QACDtB,aAAa,CAACS,IAAd,CAAmBD,eAAnB;QACAe,OAAO,CAACC,GAAR,CAAYxB,aAAa,CAACK,MAA1B;MACD;IACF,CAVD;;IAWA,EAAEH,OAAF;EACD;;EACD,IAAGN,CAAC,CAACO,MAAF,CAASC,KAAT,CAAeC,MAAf,KAA0BL,aAAa,CAACK,MAA3C,EAAkD;IAChDN,SAAS,CAAC,IAAD,CAAT;;IACFF,UAAU,CAACG,aAAD,CAAV;;IACAF,YAAY,CAACG,QAAD,CAAZ;EACC;AAEF,CAnCM"},"metadata":{},"sourceType":"module"}