{"ast":null,"code":"import { buyedToknChange, getUserId, putLogin } from '../../api';\nimport { buyNFT } from '../../utilityUnits/connTradeService.js';\nimport { SHA256 } from '../../utilityUnits/SHA256';\nlet intervalId = null;\nlet count = 0;\nexport const buyToknTransfer = async (_price, _itemId, set_w_Flag, FROM_ADDR, PRIVATE_KEY) => {\n  const record = {\n    playerId: sessionStorage.getItem('userid'),\n    playerPass: SHA256(PRIVATE_KEY)\n  };\n  if (await putLogin(record)) {\n    const value = parseInt(_price * 100000) + '0000000000000';\n    buyNFT(FROM_ADDR, PRIVATE_KEY, _itemId, value).then(result => {\n      if (result === true) updateToknIdx(FROM_ADDR);else {\n        alert('처리중 에러가 발생하였습니다 \\n 다시 시도하여 주십시오');\n        set_w_Flag(false);\n      }\n    });\n  } else {\n    alert(`⚠️ Private Key 를 확인 후 다시 시도하십시오`);\n    set_w_Flag(false);\n  }\n};\nconst updateToknIdx = async _buyerAddr => {\n  const userId = await getUserId(_buyerAddr);\n  const record = {\n    userId: userId,\n    fromAddr: _buyerAddr\n  };\n  buyedToknChange(record).then(result => {\n    if (result) {\n      if (!alert('🎉Successfully purchased')) window.location.reload();\n    }\n  });\n};\nconst stopTimer = () => {\n  clearInterval(intervalId);\n  intervalId = null;\n};","map":{"version":3,"names":["buyedToknChange","getUserId","putLogin","buyNFT","SHA256","intervalId","count","buyToknTransfer","_price","_itemId","set_w_Flag","FROM_ADDR","PRIVATE_KEY","record","playerId","sessionStorage","getItem","playerPass","value","parseInt","then","result","updateToknIdx","alert","_buyerAddr","userId","fromAddr","window","location","reload","stopTimer","clearInterval"],"sources":["/home/giparang/threadweb/fortune/client/src/components/detailPages/toknTransfer.js"],"sourcesContent":["import { buyedToknChange, getUserId, putLogin } from '../../api';\nimport { buyNFT } from '../../utilityUnits/connTradeService.js'\nimport { SHA256 } from '../../utilityUnits/SHA256';\n\nlet intervalId = null;\nlet count = 0;\n\nexport const buyToknTransfer = async(_price, _itemId, set_w_Flag, FROM_ADDR, PRIVATE_KEY) => {\n  const record = {\n    playerId: sessionStorage.getItem('userid'),\n    playerPass: SHA256(PRIVATE_KEY)\n  }\n  if(await putLogin(record)){\n    const value = parseInt(_price*100000) + '0000000000000';\n    buyNFT(FROM_ADDR, PRIVATE_KEY, _itemId, value).then(result => {\n      if(result === true)\n        updateToknIdx(FROM_ADDR);\n      else{\n        alert('처리중 에러가 발생하였습니다 \\n 다시 시도하여 주십시오');\n        set_w_Flag(false)\n      }\n    })\n  }\n  else{\n    alert(`⚠️ Private Key 를 확인 후 다시 시도하십시오`);\n    set_w_Flag(false);\n  }\n}\n\nconst updateToknIdx = async(_buyerAddr) => {\n\tconst userId = await getUserId(_buyerAddr);\n\tconst record = {\n\t\tuserId: userId,\n    fromAddr: _buyerAddr\n\t}\n\tbuyedToknChange(record).then(result => {\n\t\tif(result){\n      if(!alert('🎉Successfully purchased'))\n        window.location.reload();\n\t\t}\n\t})\n}\nconst stopTimer = () => {\n  clearInterval(intervalId);\n  intervalId=null;\n}"],"mappings":"AAAA,SAASA,eAAe,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,WAAW;AAChE,SAASC,MAAM,QAAQ,wCAAwC;AAC/D,SAASC,MAAM,QAAQ,2BAA2B;AAElD,IAAIC,UAAU,GAAG,IAAI;AACrB,IAAIC,KAAK,GAAG,CAAC;AAEb,OAAO,MAAMC,eAAe,GAAG,OAAMC,MAAM,EAAEC,OAAO,EAAEC,UAAU,EAAEC,SAAS,EAAEC,WAAW,KAAK;EAC3F,MAAMC,MAAM,GAAG;IACbC,QAAQ,EAAEC,cAAc,CAACC,OAAO,CAAC,QAAQ,CAAC;IAC1CC,UAAU,EAAEb,MAAM,CAACQ,WAAW;EAChC,CAAC;EACD,IAAG,MAAMV,QAAQ,CAACW,MAAM,CAAC,EAAC;IACxB,MAAMK,KAAK,GAAGC,QAAQ,CAACX,MAAM,GAAC,MAAM,CAAC,GAAG,eAAe;IACvDL,MAAM,CAACQ,SAAS,EAAEC,WAAW,EAAEH,OAAO,EAAES,KAAK,CAAC,CAACE,IAAI,CAACC,MAAM,IAAI;MAC5D,IAAGA,MAAM,KAAK,IAAI,EAChBC,aAAa,CAACX,SAAS,CAAC,CAAC,KACvB;QACFY,KAAK,CAAC,iCAAiC,CAAC;QACxCb,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC,CAAC;EACJ,CAAC,MACG;IACFa,KAAK,CAAE,iCAAgC,CAAC;IACxCb,UAAU,CAAC,KAAK,CAAC;EACnB;AACF,CAAC;AAED,MAAMY,aAAa,GAAG,MAAME,UAAU,IAAK;EAC1C,MAAMC,MAAM,GAAG,MAAMxB,SAAS,CAACuB,UAAU,CAAC;EAC1C,MAAMX,MAAM,GAAG;IACdY,MAAM,EAAEA,MAAM;IACZC,QAAQ,EAAEF;EACb,CAAC;EACDxB,eAAe,CAACa,MAAM,CAAC,CAACO,IAAI,CAACC,MAAM,IAAI;IACtC,IAAGA,MAAM,EAAC;MACN,IAAG,CAACE,KAAK,CAAC,0BAA0B,CAAC,EACnCI,MAAM,CAACC,QAAQ,CAACC,MAAM,EAAE;IAC9B;EACD,CAAC,CAAC;AACH,CAAC;AACD,MAAMC,SAAS,GAAG,MAAM;EACtBC,aAAa,CAAC1B,UAAU,CAAC;EACzBA,UAAU,GAAC,IAAI;AACjB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}