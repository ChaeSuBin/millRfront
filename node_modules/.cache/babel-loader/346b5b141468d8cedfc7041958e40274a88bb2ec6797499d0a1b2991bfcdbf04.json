{"ast":null,"code":"var _jsxFileName = \"/home/giparang/threadweb/fortune/client/src/components/uploadIDX/setFileHash.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { onFileInputChange } from \"../../utilityUnits/fileToBuffer\";\nimport { fileToHash, setFinalHash } from '../../utilityUnits/fileToHash';\nimport { FilesList } from \"../../components/dispFileList\";\nimport { UploadFiles } from \"./uploadFiles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const SetFileHash = _ref => {\n  _s();\n  let {\n    pWire\n  } = _ref;\n  let te = -1;\n  let hashArr = [];\n  const [fileBuffer, setFileBuffer] = useState([]);\n  const [fileInfo, setFileInfo] = useState([]);\n  const [fileHashs, setFileHashs] = useState([]);\n  const [endHash, setEndHash] = useState();\n  const [passA, setCheckA] = useState(false);\n  useEffect(() => {\n    pWire(endHash);\n  }, [endHash]);\n  const extractHash = async () => {\n    setCheckA(false);\n    sortFileSize().then(result => {\n      if (result) {\n        getFileHashArr();\n      }\n    });\n  };\n  const getFileHashArr = () => {\n    hashArr = fileToHash(fileBuffer, setFileHashs);\n    const endHash = getFinalHash(hashArr);\n    UploadFiles(fileBuffer, fileInfo, endHash);\n    setEndHash(endHash);\n  };\n  const sortFileSize = async () => {\n    let asc = function (a, b) {\n      return a.length < b.length ? -1 : 1; //オブジェクトの昇順ソート\n    };\n\n    let ascIndex = function (a, b) {\n      return a.size < b.size ? -1 : 1;\n    };\n    if (fileBuffer.length !== 0) {\n      fileBuffer.sort(asc);\n      fileInfo.sort(ascIndex);\n      return true;\n    } else {\n      return false;\n    }\n  };\n  const getFinalHash = _hashArr => {\n    let fileNum = 0;\n    let hashsStr = '';\n    //let fileTypeArr = [];\n    do {\n      hashsStr += _hashArr[fileNum];\n      //fileTypeArr.push((fileInfo[fileNum].type).split('/').pop());\n      ++fileNum;\n    } while (_hashArr.length > fileNum);\n    return setFinalHash(hashsStr);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\uC5C5\\uB85C\\uB4DC\\uD560 \\uD30C\\uC77C \\uC120\\uD0DD\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\uBB38\\uC11C, \\uC774\\uBBF8\\uC9C0, \\uC624\\uB514\\uC624, \\uB3D9\\uC601\\uC0C1 \\uD30C\\uC77C \\uAC00\\uB2A5\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"inputfile\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: evt => onFileInputChange(evt, setFileBuffer, setFileInfo, setCheckA),\n        multiple: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 36\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 27\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), fileInfo.map(uploadItems => /*#__PURE__*/_jsxDEV(FilesList, {\n      row: ++te,\n      title: uploadItems.name,\n      type: uploadItems.type,\n      size: uploadItems.size,\n      hash: fileHashs[te]\n    }, uploadItems.name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this)), passA ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: extractHash,\n        children: \"\\uD30C\\uC77C \\uC5C5\\uB85C\\uB4DC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), \"-\\uBC84\\uD2BC\\uC744 \\uB204\\uB978 \\uD6C4 \\uC7A0\\uC2DC \\uAE30\\uB2E4\\uB824\\uC8FC\\uC138\\uC694.\"]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(SetFileHash, \"0CrUxpbLBA/OZutysWGtbdO6Eps=\");\n_c = SetFileHash;\nvar _c;\n$RefreshReg$(_c, \"SetFileHash\");","map":{"version":3,"names":["React","useState","useEffect","onFileInputChange","fileToHash","setFinalHash","FilesList","UploadFiles","SetFileHash","pWire","te","hashArr","fileBuffer","setFileBuffer","fileInfo","setFileInfo","fileHashs","setFileHashs","endHash","setEndHash","passA","setCheckA","extractHash","sortFileSize","then","result","getFileHashArr","getFinalHash","asc","a","b","length","ascIndex","size","sort","_hashArr","fileNum","hashsStr","evt","map","uploadItems","name","type"],"sources":["/home/giparang/threadweb/fortune/client/src/components/uploadIDX/setFileHash.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { onFileInputChange } from \"../../utilityUnits/fileToBuffer\";\nimport { fileToHash, setFinalHash } from '../../utilityUnits/fileToHash'\nimport { FilesList } from \"../../components/dispFileList\";\nimport { UploadFiles } from \"./uploadFiles\";\n\nexport const SetFileHash = ({pWire}) => {\n\n  let te = -1;\n  let hashArr = [];\n  const [fileBuffer, setFileBuffer] = useState([]);\n  const [fileInfo, setFileInfo] = useState([]);\n  const [fileHashs, setFileHashs] = useState([]);\n  const [endHash, setEndHash] = useState();\n  const [passA, setCheckA] = useState(false);\n\n  useEffect(() => {\n    pWire(endHash);\n  },[endHash])\n  \n  const extractHash = async() => {\n    setCheckA(false);\n    sortFileSize().then(result => {\n      if(result){\n        getFileHashArr();\n      }\n    })\n  }\n  const getFileHashArr = () => {\n    hashArr = fileToHash(fileBuffer, setFileHashs);\n    const endHash = getFinalHash(hashArr);\n    UploadFiles(fileBuffer, fileInfo, endHash);\n    setEndHash(endHash);\n  }\n\n  const sortFileSize = async() => {\n    let asc = function (a, b) {\n      return (a.length < b.length) ? -1 : 1;  //オブジェクトの昇順ソート\n    }\n    let ascIndex = function(a, b) {\n      return (a.size < b.size) ? -1 : 1;\n    }\n    if(fileBuffer.length !== 0){\n      fileBuffer.sort(asc);\n      fileInfo.sort(ascIndex);\n      return true;\n    }\n    else{\n      return false;\n    }  \n  }\n  \n  const getFinalHash = (_hashArr) => {\n    let fileNum = 0;\n    let hashsStr = '';\n    //let fileTypeArr = [];\n    do {\n      hashsStr += _hashArr[fileNum];\n      //fileTypeArr.push((fileInfo[fileNum].type).split('/').pop());\n      ++fileNum;\n    } while (_hashArr.length > fileNum);\n    return setFinalHash(hashsStr);\n  }\n\n  return(\n    <div>\n      <h3>업로드할 파일 선택</h3>\n      <p>문서, 이미지, 오디오, 동영상 파일 가능</p>\n      <label className=\"inputfile\"><input type='file' \n        onChange={(evt)=>\n          onFileInputChange(evt, setFileBuffer, setFileInfo, setCheckA)} \n        multiple/></label><br/>\n      <br/>\n      {fileInfo.map(uploadItems => (\n        <FilesList\n          key={uploadItems.name}\n          row={++te}\n          title = {uploadItems.name}\n          type = {uploadItems.type}\n          size = {uploadItems.size}\n          hash = {fileHashs[te]}\n        />\n      ))}\n      {passA ? \n      <>\n        <button onClick={extractHash}>파일 업로드</button>-버튼을 누른 후 잠시 기다려주세요.\n      </>:<>\n      \n      </>}\n    </div>\n  )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}