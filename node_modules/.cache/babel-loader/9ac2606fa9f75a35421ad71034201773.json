{"ast":null,"code":"import MintServiceABI from '../contracts/MintService.json';\nimport Web3 from \"web3/dist/web3.min.js\";\nconst web3 = new Web3('wss://ws-mumbai.matic.today');\n\nconst mintService = () => {\n  const contract_Instance = new web3.eth.Contract(MintServiceABI, '0x306a271F178aD37083cDA734F3Aca694FF301B0F');\n  return contract_Instance;\n};\n\nexport const getSymbol = async web3 => {\n  return new Promise(resolve => {\n    mintService(web3).methods.symbol().call().then(symbol => {\n      resolve(symbol);\n    }, err => {\n      console.log('err: ', err);\n    });\n  });\n};\nexport const getTokenOwner = async toknId => {\n  return new Promise(resolve => {\n    mintService().methods.ownerOf(toknId).call().then(result => {\n      resolve(result);\n    });\n  });\n};\nexport const getOwnedToken = async ADDR => {\n  return new Promise(resolve => {\n    mintService().methods.getOwnedTokn(ADDR).call().then(result => {\n      resolve(result);\n    });\n  });\n};\nexport const getTokenUri = async toknId => {\n  return new Promise(resolve => {\n    mintService().methods.tokenURI(toknId).call().then(result => {\n      resolve(result);\n    });\n  });\n};\nexport const getTokenStatus = async toknId => {\n  return new Promise(resolve => {\n    mintService().methods.tradeNum(toknId).call().then(result => {\n      resolve(result);\n    });\n  });\n};\nexport const getAmountAll = async () => {\n  return new Promise(resolve => {\n    mintService().methods.getAllToknNum().call().then(result => {\n      resolve(result);\n    });\n  });\n};\nexport const EstGasopenTokenBatch = async (SEND_ADDR, fromId, toId, price) => {\n  const method = await mintService(web3).methods.openToknBatch(price, fromId, toId);\n  const estGas = await method.estimateGas({\n    from: SEND_ADDR\n  });\n  return estGas;\n};\n_c = EstGasopenTokenBatch;\nexport const openTokenBatch = async (toknId, toToknId, price, SEND_ADDR, PRIVATE_KEY) => {\n  const chainId = await web3.eth.getChainId();\n  const nonce = await web3.eth.getTransactionCount(SEND_ADDR, 'latest');\n  const method = mintService(web3).methods.openToknBatch(price, toknId, toToknId);\n  const gasPrice = await web3.eth.getGasPrice();\n  const estGas = await method.estimateGas({\n    from: SEND_ADDR\n  });\n  const code = await method.encodeABI();\n  const tx = {\n    nonce: nonce,\n    chainId: chainId,\n    from: SEND_ADDR,\n    to: '0x306a271F178aD37083cDA734F3Aca694FF301B0F',\n    value: '0',\n    data: code,\n    gasPrice: gasPrice,\n    gas: estGas\n  };\n  signTrx(tx, PRIVATE_KEY);\n};\n\nconst signTrx = (tx, PRIVATE_KEY) => {\n  web3.eth.accounts.signTransaction(tx, PRIVATE_KEY).then(signedTx => {\n    web3.eth.sendSignedTransaction(signedTx.rawTransaction, function (error, hash) {\n      if (!error) if (!alert(`üéâ The hash of your transaction is:  ${hash}\\n Check Polygon Scan to view the status of your transaction!`)) console.log('complete');else console.log(\"‚ùóSomething went wrong while submitting your transaction:\", error);\n    });\n  });\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"EstGasopenTokenBatch\");","map":{"version":3,"names":["MintServiceABI","Web3","web3","mintService","contract_Instance","eth","Contract","getSymbol","Promise","resolve","methods","symbol","call","then","err","console","log","getTokenOwner","toknId","ownerOf","result","getOwnedToken","ADDR","getOwnedTokn","getTokenUri","tokenURI","getTokenStatus","tradeNum","getAmountAll","getAllToknNum","EstGasopenTokenBatch","SEND_ADDR","fromId","toId","price","method","openToknBatch","estGas","estimateGas","from","openTokenBatch","toToknId","PRIVATE_KEY","chainId","getChainId","nonce","getTransactionCount","gasPrice","getGasPrice","code","encodeABI","tx","to","value","data","gas","signTrx","accounts","signTransaction","signedTx","sendSignedTransaction","rawTransaction","error","hash","alert"],"sources":["/home/giparang/threadweb/fortune/client/src/utilityUnits/connMintService.js"],"sourcesContent":["import MintServiceABI from '../contracts/MintService.json';\nimport Web3 from \"web3/dist/web3.min.js\";\nconst web3 = new Web3('wss://ws-mumbai.matic.today');\n\nconst mintService = () => {\n    const contract_Instance = new web3.eth.Contract(\n      MintServiceABI, '0x306a271F178aD37083cDA734F3Aca694FF301B0F'\n    )\n    return contract_Instance;\n}\n\nexport const getSymbol = async(web3) => {\n    return new Promise(resolve => {\n        mintService(web3).methods.symbol().call().then(\n        symbol => {\n            resolve(symbol);\n        },err => { \n            console.log('err: ', err); \n        })\n    })\n}\nexport const getTokenOwner = async(toknId) => {\n    return new Promise(resolve => {\n        mintService().methods.ownerOf(toknId).call().then(\n            result => {\n                resolve(result);\n            }\n        )\n    })\n}\nexport const getOwnedToken = async(ADDR) => {\n    return new Promise(resolve => {\n        mintService().methods.getOwnedTokn(ADDR).call().then(\n            result => {\n                resolve(result);\n            }\n        )\n    })\n}\nexport const getTokenUri = async(toknId) => {\n    return new Promise(resolve => {\n        mintService().methods.tokenURI(toknId).call().then(\n            result => {\n                resolve(result);\n            }\n        )\n    })\n}\nexport const getTokenStatus = async(toknId) => {\n    return new Promise(resolve => {\n        mintService().methods.tradeNum(toknId).call().then(\n            result => {\n                resolve(result);\n            }\n        )\n    })\n}\nexport const getAmountAll = async() => {\n    return new Promise(resolve => {\n        mintService().methods.getAllToknNum().call().then(\n            result => {\n                resolve(result);\n            }\n        )\n    })\n}\nexport const EstGasopenTokenBatch = async(SEND_ADDR, fromId, toId, price) => {\n    const method = await mintService(web3).methods.openToknBatch(price, fromId, toId);\n    const estGas = await method.estimateGas({from: SEND_ADDR});\n    return estGas;\n}\nexport const openTokenBatch = async(toknId, toToknId, price, SEND_ADDR, PRIVATE_KEY) => {\n    const chainId = await web3.eth.getChainId();\n    const nonce = await web3.eth.getTransactionCount(SEND_ADDR, 'latest');\n\n    const method = mintService(web3).methods.openToknBatch(price, toknId, toToknId);\n    const gasPrice = await web3.eth.getGasPrice();\n    const estGas = await method.estimateGas({from: SEND_ADDR});\n    const code = await method.encodeABI();\n    \n    const tx = {\n        nonce: nonce,\n        chainId: chainId,\n        from: SEND_ADDR,\n        to: '0x306a271F178aD37083cDA734F3Aca694FF301B0F',\n        value: '0',\n        data: code,\n        gasPrice: gasPrice,\n        gas: estGas\n    }\n    signTrx(tx, PRIVATE_KEY);\n}\nconst signTrx = (tx, PRIVATE_KEY) => {\n    web3.eth.accounts.signTransaction(tx, PRIVATE_KEY).then(signedTx => {\n        web3.eth.sendSignedTransaction(signedTx.rawTransaction, function(error, hash) {\n            if (!error)\n              if(!alert(`üéâ The hash of your transaction is:  ${hash}\\n Check Polygon Scan to view the status of your transaction!`))\n                console.log('complete');\n            else\n              console.log(\"‚ùóSomething went wrong while submitting your transaction:\", error);\n        });\n    })\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}