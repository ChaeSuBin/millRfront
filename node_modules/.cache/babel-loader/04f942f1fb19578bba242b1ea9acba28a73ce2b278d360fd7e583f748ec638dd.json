{"ast":null,"code":"import { postUploadArtwork, getMerge } from \"../../api\";\nexport const UploadFiles = (fileBufferList, fileInfoList, finalHash) => {\n  let uploadState = false;\n  const size = 1024 * 50; //50KB 50KB Section size\n  fileBufferList.map(async (file, index) => {\n    let fileChunks = [];\n    let fileIndex = 0;\n    for (let cur = 0; cur < file.length; cur += size) {\n      fileChunks.push({\n        section: fileIndex++,\n        chunk: file.slice(cur, cur + size)\n      });\n    }\n    uploadList(fileInfoList, fileChunks, index++);\n  });\n  setTimeout(() => {\n    mergeChunks(fileInfoList, finalHash);\n  }, 2000);\n};\n_c = UploadFiles;\nconst uploadList = (fileInfoList, fileChunks, _index) => {\n  fileChunks.map((item, index) => {\n    const record = {\n      fileName: fileInfoList[_index].name,\n      section: item.section,\n      chunk: item.chunk\n    };\n    console.log(record);\n    postUploadArtwork(record).then(result => {\n      console.log(result);\n    });\n  });\n};\nconst mergeChunks = async (fileInfoList, finalHash) => {\n  fileInfoList.map((item, idx) => {\n    getMerge(item.name, finalHash).then(response => {\n      console.log(response);\n    });\n  });\n};\nvar _c;\n$RefreshReg$(_c, \"UploadFiles\");","map":{"version":3,"names":["postUploadArtwork","getMerge","UploadFiles","fileBufferList","fileInfoList","finalHash","uploadState","size","map","file","index","fileChunks","fileIndex","cur","length","push","section","chunk","slice","uploadList","setTimeout","mergeChunks","_index","item","record","fileName","name","console","log","then","result","idx","response"],"sources":["/home/giparang/threadweb/fortune/client/src/components/uploadIDX/uploadFiles.js"],"sourcesContent":["import { postUploadArtwork, getMerge } from \"../../api\";\n\nexport const UploadFiles = ( fileBufferList, fileInfoList, finalHash ) => {\n  let uploadState = false;\n  \n    const size = 1024 * 50; //50KB 50KB Section size\n    fileBufferList.map(async(file, index) => {\n      let fileChunks = [];\n      let fileIndex = 0;\n      for(let cur = 0; cur < file.length; cur += size) {\n        fileChunks.push({\n          section: fileIndex++,\n          chunk: file.slice(cur, cur + size),\n        });\n      }\n      uploadList(fileInfoList, fileChunks, index++);\n    })\n    setTimeout(()=>{\n      mergeChunks(fileInfoList, finalHash);\n\t  },2000);\n}\nconst uploadList = (fileInfoList, fileChunks, _index) => {\n  fileChunks.map((item, index) => {\n    const record = {\n      fileName: fileInfoList[_index].name,\n      section: item.section,\n      chunk: item.chunk,\n    }\n    console.log(record);\n    postUploadArtwork(record).then(result => {\n      console.log(result);\n    })\n  })\n}\nconst mergeChunks = async(fileInfoList, finalHash) => {\n  fileInfoList.map((item, idx) => {\n    getMerge(item.name, finalHash).then(response => {\n      console.log(response);\n    })\n  })\n}"],"mappings":"AAAA,SAASA,iBAAiB,EAAEC,QAAQ,QAAQ,WAAW;AAEvD,OAAO,MAAMC,WAAW,GAAG,CAAEC,cAAc,EAAEC,YAAY,EAAEC,SAAS,KAAM;EACxE,IAAIC,WAAW,GAAG,KAAK;EAErB,MAAMC,IAAI,GAAG,IAAI,GAAG,EAAE,CAAC,CAAC;EACxBJ,cAAc,CAACK,GAAG,CAAC,OAAMC,IAAI,EAAEC,KAAK,KAAK;IACvC,IAAIC,UAAU,GAAG,EAAE;IACnB,IAAIC,SAAS,GAAG,CAAC;IACjB,KAAI,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGJ,IAAI,CAACK,MAAM,EAAED,GAAG,IAAIN,IAAI,EAAE;MAC/CI,UAAU,CAACI,IAAI,CAAC;QACdC,OAAO,EAAEJ,SAAS,EAAE;QACpBK,KAAK,EAAER,IAAI,CAACS,KAAK,CAACL,GAAG,EAAEA,GAAG,GAAGN,IAAI;MACnC,CAAC,CAAC;IACJ;IACAY,UAAU,CAACf,YAAY,EAAEO,UAAU,EAAED,KAAK,EAAE,CAAC;EAC/C,CAAC,CAAC;EACFU,UAAU,CAAC,MAAI;IACbC,WAAW,CAACjB,YAAY,EAAEC,SAAS,CAAC;EACvC,CAAC,EAAC,IAAI,CAAC;AACV,CAAC;AAAA,KAlBYH,WAAW;AAmBxB,MAAMiB,UAAU,GAAG,CAACf,YAAY,EAAEO,UAAU,EAAEW,MAAM,KAAK;EACvDX,UAAU,CAACH,GAAG,CAAC,CAACe,IAAI,EAAEb,KAAK,KAAK;IAC9B,MAAMc,MAAM,GAAG;MACbC,QAAQ,EAAErB,YAAY,CAACkB,MAAM,CAAC,CAACI,IAAI;MACnCV,OAAO,EAAEO,IAAI,CAACP,OAAO;MACrBC,KAAK,EAAEM,IAAI,CAACN;IACd,CAAC;IACDU,OAAO,CAACC,GAAG,CAACJ,MAAM,CAAC;IACnBxB,iBAAiB,CAACwB,MAAM,CAAC,CAACK,IAAI,CAACC,MAAM,IAAI;MACvCH,OAAO,CAACC,GAAG,CAACE,MAAM,CAAC;IACrB,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC;AACD,MAAMT,WAAW,GAAG,OAAMjB,YAAY,EAAEC,SAAS,KAAK;EACpDD,YAAY,CAACI,GAAG,CAAC,CAACe,IAAI,EAAEQ,GAAG,KAAK;IAC9B9B,QAAQ,CAACsB,IAAI,CAACG,IAAI,EAAErB,SAAS,CAAC,CAACwB,IAAI,CAACG,QAAQ,IAAI;MAC9CL,OAAO,CAACC,GAAG,CAACI,QAAQ,CAAC;IACvB,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}