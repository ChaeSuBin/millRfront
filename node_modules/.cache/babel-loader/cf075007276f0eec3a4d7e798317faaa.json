{"ast":null,"code":"var _jsxFileName = \"/home/giparang/threadweb/fortune/client/src/components/setMyNft.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport { getSymbol, getOwnedToken, getTokenUri, getTokenStatus } from '../utilityUnits/connMintService';\nimport { ListItemsCpnt } from './itemCpnt';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const SetMyNFT = _ref => {\n  _s();\n\n  let {\n    web3,\n    chainId\n  } = _ref;\n  const [toknList, setToknList] = useState([]);\n  const [toknUri, setToknUri] = useState([]);\n  const [toknStatus, setStatus] = useState([]);\n  const [toknPrice, setPrice] = useState();\n  const [startId, setSID] = useState();\n  const [endId, setEID] = useState();\n  useEffect(() => {\n    toknListViewer();\n  }, []);\n\n  const getNftSymbol = async () => {\n    console.log(await getSymbol(web3));\n  };\n\n  const toknListViewer = async () => {\n    let toknUriArr = [];\n    let toknStatusArr = [];\n    const ownedArr = await getToknIdList(web3, chainId);\n    setToknList(ownedArr);\n\n    for (let fori = 0; fori < ownedArr.length; ++fori) {\n      toknUriArr.push(await getToknUri(web3, ownedArr[fori]));\n      toknStatusArr.push(await getToknStatus(ownedArr[fori]));\n    }\n\n    setToknUri(toknUriArr);\n    setStatus(toknStatusArr);\n  };\n\n  const getToknStatus = async _toknId => {\n    const toknStatus = await getTokenStatus(web3, _toknId); //console.log(toknStatus[0]);\n\n    if (toknStatus[0] != 0) return `${toknStatus[0]} MATIC`;else return 'not for sale';\n  };\n\n  const startToknSale = () => {\n    console.log(startId, endId);\n    console.log(toknPrice * 100000 + '0000000000000');\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startToknSale,\n        children: \"sale Token\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"tokenId\",\n        onChange: evt => setSID(evt.target.value),\n        size: \"5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), \"~\", /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"tokenId\",\n        onChange: evt => setEID(evt.target.value),\n        size: \"5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 10\n      }, this), \"price: \", /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"price\",\n        onChange: evt => setPrice(evt.target.value),\n        size: \"10\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 16\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"owend NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), toknList.map((searchItems, index) => /*#__PURE__*/_jsxDEV(ListItemsCpnt, {\n      toknId: searchItems,\n      toknUri: toknUri[index],\n      status: toknStatus[index]\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true);\n};\n\n_s(SetMyNFT, \"cmonZFbXnvEyIZcQrfBLSEC7+ng=\");\n\n_c = SetMyNFT;\n\nconst getToknIdList = async (web3, _chainId) => {\n  const f = function (a, b) {\n    return a - b;\n  };\n\n  const toknIdArrStr = await getOwnedToken(web3, _chainId);\n  const ownedArr = toknIdArrStr.slice().sort(f); //.map(str => parseInt(str, 10))\n\n  return ownedArr;\n};\n\nconst getToknUri = async (web3, _toknId) => {\n  return await getTokenUri(web3, _toknId);\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"SetMyNFT\");","map":{"version":3,"names":["React","useState","useEffect","getSymbol","getOwnedToken","getTokenUri","getTokenStatus","ListItemsCpnt","SetMyNFT","web3","chainId","toknList","setToknList","toknUri","setToknUri","toknStatus","setStatus","toknPrice","setPrice","startId","setSID","endId","setEID","toknListViewer","getNftSymbol","console","log","toknUriArr","toknStatusArr","ownedArr","getToknIdList","fori","length","push","getToknUri","getToknStatus","_toknId","startToknSale","evt","target","value","map","searchItems","index","_chainId","f","a","b","toknIdArrStr","slice","sort"],"sources":["/home/giparang/threadweb/fortune/client/src/components/setMyNft.js"],"sourcesContent":["import React from 'react';\nimport { useState, useEffect } from 'react';\nimport { \n    getSymbol, \n    getOwnedToken, \n    getTokenUri, \n    getTokenStatus \n} from '../utilityUnits/connMintService';\nimport { ListItemsCpnt } from './itemCpnt';\n\nexport const SetMyNFT = ({web3, chainId}) => {\n  const [toknList, setToknList] = useState([]);\n  const [toknUri, setToknUri] = useState([]);\n  const [toknStatus, setStatus] = useState([]);\n  const [toknPrice, setPrice] = useState();\n  const [startId, setSID] = useState();\n  const [endId, setEID] = useState();\n\n  useEffect(()=>{\n    toknListViewer();\n  },[])\n  \n  const getNftSymbol = async() => {\n    console.log(await getSymbol(web3));\n  }\n  const toknListViewer = async() => {\n    let toknUriArr = [];\n    let toknStatusArr = [];\n\n    const ownedArr = await getToknIdList(web3, chainId);\n    setToknList(ownedArr);\n    \n    for(let fori = 0; fori < ownedArr.length; ++fori){\n      toknUriArr.push(await getToknUri(web3, ownedArr[fori]));\n      toknStatusArr.push(await getToknStatus(ownedArr[fori]))\n    }\n    setToknUri(toknUriArr);\n    setStatus(toknStatusArr);\n  }\n  \n  const getToknStatus = async(_toknId) => {\n    const toknStatus = await getTokenStatus(web3, _toknId);\n    //console.log(toknStatus[0]);\n    if(toknStatus[0] != 0)\n      return `${toknStatus[0]} MATIC`;\n    else\n      return 'not for sale';\n  }\n  const startToknSale = () => {\n    console.log(startId, endId);\n    console.log(toknPrice*100000+'0000000000000');\n  }\n\n  return(\n    <>\n      <h5><button onClick={startToknSale}>sale Token</button> \n        <input placeholder='tokenId' onChange={(evt)=>setSID(evt.target.value)}size='5'/>\n        ~<input placeholder='tokenId' onChange={(evt)=>setEID(evt.target.value)}size='5'/>\n        price: <input placeholder='price' onChange={(evt)=>setPrice(evt.target.value)} size='10'/>  \n      </h5>\n      \n      <h2>owend NFT</h2>\n      {toknList.map((searchItems, index) => (\n        <ListItemsCpnt\n          key={index}\n          toknId={searchItems}\n          toknUri={toknUri[index]}\n          status={toknStatus[index]}\n        />\n      ))}\n    </>\n  )\n}\n\nconst getToknIdList = async(web3, _chainId) => {\n  const f = function (a, b) { return a - b }\n  const toknIdArrStr = await getOwnedToken(web3, _chainId);\n  const ownedArr = toknIdArrStr.slice().sort(f);\n  //.map(str => parseInt(str, 10))\n  return ownedArr;\n}\n\nconst getToknUri = async(web3, _toknId) => {\n  return await getTokenUri(web3, _toknId);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}