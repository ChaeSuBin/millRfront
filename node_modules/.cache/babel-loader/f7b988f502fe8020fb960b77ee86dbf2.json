{"ast":null,"code":"var _jsxFileName = \"/home/giparang/threadweb/fortune/client/src/pages/connectWeb3.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport getWeb3 from '../getWeb3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ConnectWeb3 = () => {\n  _s();\n\n  const [ethBal, setEthBal] = useState(0);\n  const [contract_wallet, setWallet] = useState(null);\n  const [metaMaskFlag, setMetaMaskFlag] = useState(false);\n  const [account, setAccount] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [web3, setWeb3] = useState(null);\n  useEffect(() => {\n    connector();\n    const tmpFlag = window.ethereum && window.ethereum.isMetaMask;\n    setMetaMaskFlag(tmpFlag); // getAllPoints().then(point => {\n    //   console.log(point);\n    //   setPoint(point.mintedAllPoint);\n    //   setCoin(point.mintedAllCoin);\n    // })\n    // getPlayerInfo(uid).then(user => {\n    //   setUserCoin(user.coin);\n    //   setUserPoint(user.token);\n    // })\n  }, []);\n\n  const connector = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n      const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n      const networkId = await web3.eth.net.getId();\n      const version = web3.version;\n      console.log(version);\n      setWeb3(web3);\n    } catch (error) {\n      alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n      console.error(error);\n    }\n  };\n\n  const getUserBal = () => {\n    web3.eth.getBalance(account).then(balanc => {\n      console.log(balanc);\n    });\n  };\n\n  const getTrxValue = () => {\n    web3.eth.getTransaction('0xd91d66a1c5927ebae746c4d97e8a616fcadb59eb8122f15e160fbab487321dcc').then(result => {\n      console.log(result);\n    }); //0x2b23b695591c5df04f3dd43b1cd2ba31a234ed2913de179cf4a4055acfe133a8 blockhash\n  };\n\n  const tempTrx = () => {\n    web3.eth.sendTransaction({\n      from: account,\n      to: '0xDB2c0335930a3F6f58B600935AC1B55b12c3E957',\n      value: 12\n    }).then(txHash => {\n      web3.eth.getTransaction(txHash.transactionHash).then(result => {\n        console.log(result.value);\n      });\n    });\n  };\n\n  const connectWallet = () => {\n    window.ethereum.request({\n      method: \"eth_requestAccounts\"\n    }).then(result => {\n      setAccount(result[0]);\n    }).catch(error => {\n      setErrorMessage(error.message);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"a\", {\n      onClick: connectWallet,\n      children: \"Connect Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }, this), account, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getUserBal,\n      children: \"UserBal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ConnectWeb3, \"ZFmtZ4zyO/YMFfRR62AtbTXbeMc=\");\n\n_c = ConnectWeb3;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConnectWeb3\");","map":{"version":3,"names":["React","useState","useEffect","getWeb3","ConnectWeb3","ethBal","setEthBal","contract_wallet","setWallet","metaMaskFlag","setMetaMaskFlag","account","setAccount","errorMessage","setErrorMessage","web3","setWeb3","connector","tmpFlag","window","ethereum","isMetaMask","accounts","eth","getAccounts","networkId","net","getId","version","console","log","error","alert","getUserBal","getBalance","then","balanc","getTrxValue","getTransaction","result","tempTrx","sendTransaction","from","to","value","txHash","transactionHash","connectWallet","request","method","catch","message"],"sources":["/home/giparang/threadweb/fortune/client/src/pages/connectWeb3.js"],"sourcesContent":["import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport getWeb3 from '../getWeb3';\n\nexport const ConnectWeb3 = () => {\n  const [ethBal, setEthBal] = useState(0);\n  const [contract_wallet ,setWallet] = useState(null);\n  const [metaMaskFlag, setMetaMaskFlag] = useState(false);\n  const [account, setAccount] = useState(null);\n\tconst [errorMessage, setErrorMessage] = useState(null);\n  const [web3, setWeb3] = useState(null);\n\n  useEffect(() => {\n    connector();\n\t  const tmpFlag = window.ethereum && window.ethereum.isMetaMask;\n\t  setMetaMaskFlag(tmpFlag);\n    // getAllPoints().then(point => {\n    //   console.log(point);\n    //   setPoint(point.mintedAllPoint);\n    //   setCoin(point.mintedAllCoin);\n    // })\n    // getPlayerInfo(uid).then(user => {\n    //   setUserCoin(user.coin);\n    //   setUserPoint(user.token);\n    // })\n  },[]);\n\n  const connector = async() => {\n    try{\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n\n      const version = web3.version;\n      console.log(version);\n      setWeb3(web3);\n    }\n    catch(error){\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  }\n  const getUserBal = () => {\n    web3.eth.getBalance(account).then(balanc => {\n      console.log(balanc);\n    })\n  }\n  const getTrxValue = () => {\n    web3.eth.getTransaction('0xd91d66a1c5927ebae746c4d97e8a616fcadb59eb8122f15e160fbab487321dcc').then(result => {\n      console.log(result);\n    })//0x2b23b695591c5df04f3dd43b1cd2ba31a234ed2913de179cf4a4055acfe133a8 blockhash\n    \n  }\n  const tempTrx = () => {\n    web3.eth.sendTransaction({\n      from: account,\n      to: '0xDB2c0335930a3F6f58B600935AC1B55b12c3E957',\n      value: 12\n    }).then(txHash =>{\n      web3.eth.getTransaction(txHash.transactionHash).then(result => {\n        console.log(result.value);\n      })\n    })\n  }\n  const connectWallet = () => {\n    window.ethereum.request({ method: \"eth_requestAccounts\" }).then((result) => {\n\t\tsetAccount(result[0]);\n\t  }).catch((error) => {\n\t  setErrorMessage(error.message);\n\t  });\n  }\n  return (\n    <>\n    <a onClick={connectWallet}>Connect Wallet</a>\n    {account}\n    <button onClick={getUserBal}>UserBal</button>\n    </>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}