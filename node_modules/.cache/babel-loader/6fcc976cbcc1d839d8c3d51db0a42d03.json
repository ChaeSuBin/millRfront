{"ast":null,"code":"import TradeMarketABI from '../contracts/MarketPlace.json';\nimport Web3 from \"web3/dist/web3.min.js\";\nconst web3 = new Web3('wss://ws-mumbai.matic.today');\nconst TradeServiceADDR = '0x1B55207E4eF2f7ac53049E383200cfD330B50D40';\n\nconst tradeService = () => {\n  const contract_Instance = new web3.eth.Contract(TradeMarketABI, TradeServiceADDR);\n  return contract_Instance;\n};\n\nexport const getTradeBalance = async SEND_ADDR => {\n  return new Promise(resolve => {\n    tradeService().methods.getMyDeposit().call({\n      from: SEND_ADDR\n    }).then(result => {\n      resolve(result);\n    });\n  });\n};\nexport const buyNFT = async (SEND_ADDR, PRIVATE_KEY, toknId, toknPrice) => {\n  const chainId = await web3.eth.getChainId();\n  const nonce = await web3.eth.getTransactionCount(SEND_ADDR, 'latest');\n  const method = tradeService().methods.buyTokn(toknId);\n  const gasPrice = await web3.eth.getGasPrice();\n  const code = await method.encodeABI();\n  console.log('tradeserviceERRChecker');\n  const estGas = await method.estimateGas({\n    from: SEND_ADDR,\n    value: toknPrice\n  });\n  console.log('tradeserviceERRChecker');\n  const tx = {\n    nonce: nonce,\n    chainId: chainId,\n    from: SEND_ADDR,\n    to: TradeServiceADDR,\n    value: toknPrice,\n    //web3.utils.toHex(web3.utils.toWei(toknPrice, 'ether')),\n    data: code,\n    gasPrice: gasPrice,\n    gas: estGas\n  };\n  const result = await signTrx(tx, PRIVATE_KEY);\n  return result;\n};\nexport const withdrawSaleToknPrice = async (SEND_ADDR, PRIVATE_KEY, amount) => {\n  const chainId = await web3.eth.getChainId();\n  const nonce = await web3.eth.getTransactionCount(SEND_ADDR, 'latest');\n  const method = await tradeService().methods.withDrawal(amount);\n  const gasPrice = await web3.eth.getGasPrice();\n  const code = await method.encodeABI();\n  return new Promise(resolve => {\n    method.estimateGas({\n      from: SEND_ADDR\n    }).then(estGas => {\n      const tx = {\n        nonce: nonce,\n        chainId: chainId,\n        from: SEND_ADDR,\n        to: TradeServiceADDR,\n        value: '0',\n        data: code,\n        gasPrice: gasPrice,\n        gas: estGas\n      };\n      signTrx(tx, PRIVATE_KEY).then(result => {\n        console.log(result);\n        resolve(result);\n      });\n    }).catch(err => {\n      console.log(err);\n      resolve(err);\n    });\n  });\n};\n\nconst signTrx = (tx, PRIVATE_KEY) => {\n  return new Promise(resolve => {\n    web3.eth.accounts.signTransaction(tx, PRIVATE_KEY).then(signedTx => {\n      web3.eth.sendSignedTransaction(signedTx.rawTransaction, function (error, hash) {\n        if (!error) resolve(true);else resolve('Check again your Private_Key inputed');\n      });\n    }).catch(err => {\n      console.log(err.message);\n      resolve(err.message);\n    });\n  });\n};","map":{"version":3,"names":["TradeMarketABI","Web3","web3","TradeServiceADDR","tradeService","contract_Instance","eth","Contract","getTradeBalance","SEND_ADDR","Promise","resolve","methods","getMyDeposit","call","from","then","result","buyNFT","PRIVATE_KEY","toknId","toknPrice","chainId","getChainId","nonce","getTransactionCount","method","buyTokn","gasPrice","getGasPrice","code","encodeABI","console","log","estGas","estimateGas","value","tx","to","data","gas","signTrx","withdrawSaleToknPrice","amount","withDrawal","catch","err","accounts","signTransaction","signedTx","sendSignedTransaction","rawTransaction","error","hash","message"],"sources":["/home/giparang/threadweb/fortune/client/src/utilityUnits/connTradeService.js"],"sourcesContent":["import TradeMarketABI from '../contracts/MarketPlace.json';\nimport Web3 from \"web3/dist/web3.min.js\";\nconst web3 = new Web3('wss://ws-mumbai.matic.today');\nconst TradeServiceADDR = '0x1B55207E4eF2f7ac53049E383200cfD330B50D40';\n\nconst tradeService = () => {\n  const contract_Instance = new web3.eth.Contract(\n    TradeMarketABI, TradeServiceADDR\n  )\n  return contract_Instance;\n}\n\nexport const getTradeBalance = async(SEND_ADDR) => {\n  return new Promise(resolve => {\n    tradeService().methods.getMyDeposit().call({from: SEND_ADDR}).then(\n      result => {\n        resolve(result);\n      }\n    )\n  })\n}\n\nexport const buyNFT = async(SEND_ADDR, PRIVATE_KEY, toknId, toknPrice) => {\n  const chainId = await web3.eth.getChainId();\n  const nonce = await web3.eth.getTransactionCount(SEND_ADDR, 'latest');\n  const method = tradeService().methods.buyTokn(toknId);\n  const gasPrice = await web3.eth.getGasPrice();\n  const code = await method.encodeABI();\n  console.log('tradeserviceERRChecker');\n  const estGas = await method.estimateGas({from: SEND_ADDR, value: toknPrice});\n  console.log('tradeserviceERRChecker');\n  \n  const tx = {\n    nonce: nonce,\n    chainId: chainId,\n    from: SEND_ADDR,\n    to: TradeServiceADDR,\n    value: toknPrice, //web3.utils.toHex(web3.utils.toWei(toknPrice, 'ether')),\n    data: code,\n    gasPrice: gasPrice,\n    gas: estGas\n  };\n  const result = await signTrx(tx, PRIVATE_KEY);\n  return result;\n}\n\nexport const withdrawSaleToknPrice = async(SEND_ADDR, PRIVATE_KEY, amount) => {\n  const chainId = await web3.eth.getChainId();\n  const nonce = await web3.eth.getTransactionCount(SEND_ADDR, 'latest');\n  \n  const method = await tradeService().methods.withDrawal(amount);\n  const gasPrice = await web3.eth.getGasPrice();\n  const code = await method.encodeABI();\n  return new Promise(resolve => {\n    method.estimateGas({from: SEND_ADDR}).then(estGas => {\n      const tx = {\n        nonce: nonce,\n        chainId: chainId,\n        from: SEND_ADDR,\n        to: TradeServiceADDR,\n        value: '0',\n        data: code,\n        gasPrice: gasPrice,\n        gas: estGas\n      }\n      signTrx(tx, PRIVATE_KEY).then(result => {\n        console.log(result);\n        resolve(result);\n      })\n    }).catch(err => {\n      console.log(err);\n      resolve(err);\n    })\n  })\n}\nconst signTrx = (tx, PRIVATE_KEY) => {\n  return new Promise(resolve => {\n    web3.eth.accounts.signTransaction(tx, PRIVATE_KEY).then(signedTx => {\n      web3.eth.sendSignedTransaction(signedTx.rawTransaction, function(error, hash) {\n        if (!error)\n          resolve(true);\n        else\n          resolve('Check again your Private_Key inputed');\n      });\n    }).catch(err => {\n      console.log(err.message);\n      resolve(err.message);\n    })\n  })\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}