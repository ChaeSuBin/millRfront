{"ast":null,"code":"import Web3 from \"web3/dist/web3.min.js\";\n\nconst getWeb3 = () => new Promise((resolve, reject) => {\n  // Wait for loading completion to avoid race conditions with web3 injection timing.\n  window.addEventListener(\"load\", async () => {\n    // Modern dapp browsers...\n    if (window.ethereum) {\n      const web3 = window.web3;\n      console.log(\"Injected web3 detected.\");\n      resolve(web3);\n    } // Legacy dapp browsers...\n    else if (window.web3) {\n      // Use Mist/MetaMask's provider.\n      const web3 = window.web3;\n      console.log(\"Injected web3 detected.\");\n      resolve(web3);\n    } // Fallback to localhost; use dev console port by default...\n    else {\n      const provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:8545\");\n      const web3 = new Web3(provider);\n      console.log(\"No web3 instance injected, using Local web3.\");\n      resolve(web3);\n    }\n  });\n});\n\nexport default getWeb3;","map":{"version":3,"names":["Web3","getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","web3","console","log","provider","providers","HttpProvider"],"sources":["/home/giparang/threadweb/fortune/client/src/getWeb3.js"],"sourcesContent":["import Web3 from \"web3/dist/web3.min.js\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,uBAAjB;;AAEA,MAAMC,OAAO,GAAG,MACd,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;EAC/B;EACAC,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;IAC1C;IACA,IAAID,MAAM,CAACE,QAAX,EAAqB;MACnB,MAAMC,IAAI,GAAGH,MAAM,CAACG,IAApB;MACAC,OAAO,CAACC,GAAR,CAAY,yBAAZ;MACAP,OAAO,CAACK,IAAD,CAAP;IACD,CAJD,CAKA;IALA,KAMK,IAAIH,MAAM,CAACG,IAAX,EAAiB;MACpB;MACA,MAAMA,IAAI,GAAGH,MAAM,CAACG,IAApB;MACAC,OAAO,CAACC,GAAR,CAAY,yBAAZ;MACAP,OAAO,CAACK,IAAD,CAAP;IACD,CALI,CAML;IANK,KAOA;MACH,MAAMG,QAAQ,GAAG,IAAIX,IAAI,CAACY,SAAL,CAAeC,YAAnB,CACf,uBADe,CAAjB;MAGA,MAAML,IAAI,GAAG,IAAIR,IAAJ,CAASW,QAAT,CAAb;MACAF,OAAO,CAACC,GAAR,CAAY,8CAAZ;MACAP,OAAO,CAACK,IAAD,CAAP;IACD;EACF,CAvBD;AAwBD,CA1BD,CADF;;AA6BA,eAAeP,OAAf"},"metadata":{},"sourceType":"module"}