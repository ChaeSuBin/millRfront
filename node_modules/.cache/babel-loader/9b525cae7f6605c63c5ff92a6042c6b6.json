{"ast":null,"code":"import TradeMarketABI from '../contracts/MarketPlace.json';\nimport Web3 from \"web3/dist/web3.min.js\";\nconst web3 = new Web3('wss://ws-mumbai.matic.today');\nconst TradeServiceADDR = '0xd13643364b2D2d64e4621602ceC58069e6725564';\n\nconst tradeService = () => {\n  const contract_Instance = new web3.eth.Contract(TradeMarketABI, TradeServiceADDR);\n  return contract_Instance;\n};\n\nexport const getBalance = async SEND_ADDR => {\n  return new Promise(resolve => {\n    tradeService().methods.getMyDeposit().call({\n      from: SEND_ADDR\n    }).then(result => {\n      resolve(result);\n    });\n  });\n};\nexport const buyNFT = async (toknId, toknPrice, SEND_ADDR, PRIVATE_KEY) => {\n  console.log(toknPrice);\n  console.log(toknId);\n  const chainId = await web3.eth.getChainId();\n  const nonce = await web3.eth.getTransactionCount(SEND_ADDR, 'latest');\n  const method = tradeService().methods.buyTokn(toknId);\n  const gasPrice = await web3.eth.getGasPrice();\n  const estGas = await method.estimateGas({\n    from: SEND_ADDR\n  });\n  const code = await method.encodeABI();\n  const tx = {\n    nonce: nonce,\n    chainId: chainId,\n    from: SEND_ADDR,\n    to: TradeServiceADDR,\n    value: 0.25,\n    //web3.utils.toHex(web3.utils.toWei(toknPrice, 'ether')),\n    data: code,\n    gasPrice: gasPrice,\n    gas: estGas\n  };\n  const result = await signTrx(tx, PRIVATE_KEY);\n  return result;\n};\n\nconst signTrx = (tx, PRIVATE_KEY) => {\n  return new Promise(resolve => {\n    web3.eth.accounts.signTransaction(tx, PRIVATE_KEY).then(signedTx => {\n      web3.eth.sendSignedTransaction(signedTx.rawTransaction, function (error, hash) {\n        if (!error) resolve(true);else resolve('Check again your Private_Key inputed');\n      });\n    }).catch(err => {\n      console.log(err.message);\n      resolve(err.message);\n    });\n  });\n};","map":{"version":3,"names":["TradeMarketABI","Web3","web3","TradeServiceADDR","tradeService","contract_Instance","eth","Contract","getBalance","SEND_ADDR","Promise","resolve","methods","getMyDeposit","call","from","then","result","buyNFT","toknId","toknPrice","PRIVATE_KEY","console","log","chainId","getChainId","nonce","getTransactionCount","method","buyTokn","gasPrice","getGasPrice","estGas","estimateGas","code","encodeABI","tx","to","value","data","gas","signTrx","accounts","signTransaction","signedTx","sendSignedTransaction","rawTransaction","error","hash","catch","err","message"],"sources":["/home/giparang/threadweb/fortune/client/src/utilityUnits/connTradeService.js"],"sourcesContent":["import TradeMarketABI from '../contracts/MarketPlace.json';\nimport Web3 from \"web3/dist/web3.min.js\";\nconst web3 = new Web3('wss://ws-mumbai.matic.today');\nconst TradeServiceADDR = '0xd13643364b2D2d64e4621602ceC58069e6725564';\n\nconst tradeService = () => {\n  const contract_Instance = new web3.eth.Contract(\n    TradeMarketABI, TradeServiceADDR\n  )\n  return contract_Instance;\n}\n\nexport const getBalance = async(SEND_ADDR) => {\n  return new Promise(resolve => {\n    tradeService().methods.getMyDeposit().call({from: SEND_ADDR}).then(\n      result => {\n        resolve(result);\n      }\n    )\n  })\n}\n\nexport const buyNFT = async(toknId, toknPrice, SEND_ADDR, PRIVATE_KEY) => {\n  console.log(toknPrice);\n  console.log(toknId);\n  const chainId = await web3.eth.getChainId();\n  const nonce = await web3.eth.getTransactionCount(SEND_ADDR, 'latest');\n  const method = tradeService().methods.buyTokn(toknId);\n  const gasPrice = await web3.eth.getGasPrice();\n  const estGas = await method.estimateGas({from: SEND_ADDR});\n  const code = await method.encodeABI();\n  \n  const tx = {\n    nonce: nonce,\n    chainId: chainId,\n    from: SEND_ADDR,\n    to: TradeServiceADDR,\n    value: 0.25, //web3.utils.toHex(web3.utils.toWei(toknPrice, 'ether')),\n    data: code,\n    gasPrice: gasPrice,\n    gas: estGas\n  };\n  const result = await signTrx(tx, PRIVATE_KEY);\n  return result;\n}\nconst signTrx = (tx, PRIVATE_KEY) => {\n  return new Promise(resolve => {\n    web3.eth.accounts.signTransaction(tx, PRIVATE_KEY).then(signedTx => {\n      web3.eth.sendSignedTransaction(signedTx.rawTransaction, function(error, hash) {\n        if (!error)\n          resolve(true);\n        else\n          resolve('Check again your Private_Key inputed');\n      });\n    }).catch(err => {\n      console.log(err.message);\n      resolve(err.message);\n    })\n  })\n}"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,+BAA3B;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,MAAMC,IAAI,GAAG,IAAID,IAAJ,CAAS,6BAAT,CAAb;AACA,MAAME,gBAAgB,GAAG,4CAAzB;;AAEA,MAAMC,YAAY,GAAG,MAAM;EACzB,MAAMC,iBAAiB,GAAG,IAAIH,IAAI,CAACI,GAAL,CAASC,QAAb,CACxBP,cADwB,EACRG,gBADQ,CAA1B;EAGA,OAAOE,iBAAP;AACD,CALD;;AAOA,OAAO,MAAMG,UAAU,GAAG,MAAMC,SAAN,IAAoB;EAC5C,OAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAI;IAC5BP,YAAY,GAAGQ,OAAf,CAAuBC,YAAvB,GAAsCC,IAAtC,CAA2C;MAACC,IAAI,EAAEN;IAAP,CAA3C,EAA8DO,IAA9D,CACEC,MAAM,IAAI;MACRN,OAAO,CAACM,MAAD,CAAP;IACD,CAHH;EAKD,CANM,CAAP;AAOD,CARM;AAUP,OAAO,MAAMC,MAAM,GAAG,OAAMC,MAAN,EAAcC,SAAd,EAAyBX,SAAzB,EAAoCY,WAApC,KAAoD;EACxEC,OAAO,CAACC,GAAR,CAAYH,SAAZ;EACAE,OAAO,CAACC,GAAR,CAAYJ,MAAZ;EACA,MAAMK,OAAO,GAAG,MAAMtB,IAAI,CAACI,GAAL,CAASmB,UAAT,EAAtB;EACA,MAAMC,KAAK,GAAG,MAAMxB,IAAI,CAACI,GAAL,CAASqB,mBAAT,CAA6BlB,SAA7B,EAAwC,QAAxC,CAApB;EACA,MAAMmB,MAAM,GAAGxB,YAAY,GAAGQ,OAAf,CAAuBiB,OAAvB,CAA+BV,MAA/B,CAAf;EACA,MAAMW,QAAQ,GAAG,MAAM5B,IAAI,CAACI,GAAL,CAASyB,WAAT,EAAvB;EACA,MAAMC,MAAM,GAAG,MAAMJ,MAAM,CAACK,WAAP,CAAmB;IAAClB,IAAI,EAAEN;EAAP,CAAnB,CAArB;EACA,MAAMyB,IAAI,GAAG,MAAMN,MAAM,CAACO,SAAP,EAAnB;EAEA,MAAMC,EAAE,GAAG;IACTV,KAAK,EAAEA,KADE;IAETF,OAAO,EAAEA,OAFA;IAGTT,IAAI,EAAEN,SAHG;IAIT4B,EAAE,EAAElC,gBAJK;IAKTmC,KAAK,EAAE,IALE;IAKI;IACbC,IAAI,EAAEL,IANG;IAOTJ,QAAQ,EAAEA,QAPD;IAQTU,GAAG,EAAER;EARI,CAAX;EAUA,MAAMf,MAAM,GAAG,MAAMwB,OAAO,CAACL,EAAD,EAAKf,WAAL,CAA5B;EACA,OAAOJ,MAAP;AACD,CAtBM;;AAuBP,MAAMwB,OAAO,GAAG,CAACL,EAAD,EAAKf,WAAL,KAAqB;EACnC,OAAO,IAAIX,OAAJ,CAAYC,OAAO,IAAI;IAC5BT,IAAI,CAACI,GAAL,CAASoC,QAAT,CAAkBC,eAAlB,CAAkCP,EAAlC,EAAsCf,WAAtC,EAAmDL,IAAnD,CAAwD4B,QAAQ,IAAI;MAClE1C,IAAI,CAACI,GAAL,CAASuC,qBAAT,CAA+BD,QAAQ,CAACE,cAAxC,EAAwD,UAASC,KAAT,EAAgBC,IAAhB,EAAsB;QAC5E,IAAI,CAACD,KAAL,EACEpC,OAAO,CAAC,IAAD,CAAP,CADF,KAGEA,OAAO,CAAC,sCAAD,CAAP;MACH,CALD;IAMD,CAPD,EAOGsC,KAPH,CAOSC,GAAG,IAAI;MACd5B,OAAO,CAACC,GAAR,CAAY2B,GAAG,CAACC,OAAhB;MACAxC,OAAO,CAACuC,GAAG,CAACC,OAAL,CAAP;IACD,CAVD;EAWD,CAZM,CAAP;AAaD,CAdD"},"metadata":{},"sourceType":"module"}