{"ast":null,"code":"import MintServiceABI from '../contracts/MintService.json';\n\nconst mintService = web3 => {\n  const contract_Instance = new web3.eth.Contract(MintServiceABI, '0x306a271F178aD37083cDA734F3Aca694FF301B0F');\n  return contract_Instance;\n};\n\nexport const getSymbol = async web3 => {\n  return new Promise(resolve => {\n    mintService(web3).methods.symbol().call().then(symbol => {\n      resolve(symbol);\n    }, err => {\n      console.log('err: ', err);\n    });\n  });\n};\nexport const getOwnedToken = async (web3, ADDR) => {\n  return new Promise(resolve => {\n    mintService(web3).methods.getOwnedTokn(ADDR).call().then(result => {\n      resolve(result);\n    });\n  });\n};\nexport const getTokenUri = async (web3, toknId) => {\n  return new Promise(resolve => {\n    mintService(web3).methods.tokenURI(toknId).call().then(result => {\n      resolve(result);\n    });\n  });\n};\nexport const getTokenStatus = async (web3, toknId) => {\n  return new Promise(resolve => {\n    mintService(web3).methods.tradeNum(toknId).call().then(result => {\n      resolve(result);\n    });\n  });\n};\nexport const openTokenBatch = async (web3, toknId, toToknId, price, SEND_ADDR, PRIVATE_KEY) => {\n  const chainId = await web3.eth.getChainId();\n  const nonce = await web3.eth.getTransactionCount(SEND_ADDR, 'latest');\n  const gasPrice = await web3.eth.getGasPrice();\n  mintService(web3).method.openToknBatch(price, toknId, toToknId).then(method => {\n    const gas = method.estimateGas({\n      from: SEND_ADDR\n    });\n    const tx = {\n      nonce: nonce,\n      chainId: chainId,\n      from: SEND_ADDR,\n      to: '0x306a271F178aD37083cDA734F3Aca694FF301B0F',\n      value: '0',\n      gasPrice: gasPrice,\n      gas: gas\n    };\n    web3.eth.accounts.signTransaction(tx, PRIVATE_KEY).then(signedTx => {\n      web3.eth.sendSignedTransaction(signedTx.rawTransaction, function (error, hash) {\n        if (!error) if (!alert(`üéâ The hash of your transaction is:  ${hash}\\n Check Polygon Scan to view the status of your transaction!`)) navigate(\"/myinfo\");else console.log(\"‚ùóSomething went wrong while submitting your transaction:\", error);\n      });\n    });\n  });\n};","map":{"version":3,"names":["MintServiceABI","mintService","web3","contract_Instance","eth","Contract","getSymbol","Promise","resolve","methods","symbol","call","then","err","console","log","getOwnedToken","ADDR","getOwnedTokn","result","getTokenUri","toknId","tokenURI","getTokenStatus","tradeNum","openTokenBatch","toToknId","price","SEND_ADDR","PRIVATE_KEY","chainId","getChainId","nonce","getTransactionCount","gasPrice","getGasPrice","method","openToknBatch","gas","estimateGas","from","tx","to","value","accounts","signTransaction","signedTx","sendSignedTransaction","rawTransaction","error","hash","alert","navigate"],"sources":["/home/giparang/threadweb/fortune/client/src/utilityUnits/connMintService.js"],"sourcesContent":["import MintServiceABI from '../contracts/MintService.json';\n\nconst mintService = (web3) => {\n    const contract_Instance = new web3.eth.Contract(\n      MintServiceABI, '0x306a271F178aD37083cDA734F3Aca694FF301B0F'\n    )\n    return contract_Instance;\n}\n\nexport const getSymbol = async(web3) => {\n    return new Promise(resolve => {\n        mintService(web3).methods.symbol().call().then(\n        symbol => {\n            resolve(symbol);\n        },err => { \n            console.log('err: ', err); \n        })\n    })\n}\n\nexport const getOwnedToken = async(web3, ADDR) => {\n    return new Promise(resolve => {\n        mintService(web3).methods.getOwnedTokn(ADDR).call().then(\n            result => {\n                resolve(result);\n            }\n        )\n    })\n}\nexport const getTokenUri = async(web3, toknId) => {\n    return new Promise(resolve => {\n        mintService(web3).methods.tokenURI(toknId).call().then(\n            result => {\n                resolve(result);\n            }\n        )\n    })\n}\nexport const getTokenStatus = async(web3, toknId) => {\n    return new Promise(resolve => {\n        mintService(web3).methods.tradeNum(toknId).call().then(\n            result => {\n                resolve(result);\n            }\n        )\n    })\n}\nexport const openTokenBatch = async(web3, toknId, toToknId, price, SEND_ADDR, PRIVATE_KEY) => {\n    const chainId = await web3.eth.getChainId();\n    const nonce = await web3.eth.getTransactionCount(SEND_ADDR, 'latest');\n    const gasPrice = await web3.eth.getGasPrice();\n    mintService(web3).method.openToknBatch(price, toknId, toToknId).then(\n        method => {\n            const gas = method.estimateGas({from: SEND_ADDR});\n            const tx = {\n                nonce: nonce,\n                chainId: chainId,\n                from: SEND_ADDR,\n                to: '0x306a271F178aD37083cDA734F3Aca694FF301B0F',\n                value: '0',\n                gasPrice: gasPrice,\n                gas: gas\n            }\n            web3.eth.accounts.signTransaction(tx, PRIVATE_KEY).then(signedTx => {\n                web3.eth.sendSignedTransaction(signedTx.rawTransaction, function(error, hash) {\n                    if (!error)\n                      if(!alert(`üéâ The hash of your transaction is:  ${hash}\\n Check Polygon Scan to view the status of your transaction!`))\n                        navigate(\"/myinfo\");\n                    else\n                      console.log(\"‚ùóSomething went wrong while submitting your transaction:\", error);\n                });\n            })\n            \n        }\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}