{"ast":null,"code":"import _regeneratorRuntime from\"/home/giparang/threadweb/fortune/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/home/giparang/threadweb/fortune/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import{postUploadArtwork,getMerge}from\"../../api\";export var UploadFiles=function UploadFiles(fileBufferList,fileInfoList,finalHash){var uploadState=false;var size=1024*50;//50KB 50KB Section size\nfileBufferList.map(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(file,index){var fileChunks,fileIndex,cur;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:fileChunks=[];fileIndex=0;for(cur=0;cur<file.length;cur+=size){fileChunks.push({section:fileIndex++,chunk:file.slice(cur,cur+size)});}uploadList(fileInfoList,fileChunks,index++);case 4:case\"end\":return _context.stop();}}},_callee);}));return function(_x,_x2){return _ref.apply(this,arguments);};}());setTimeout(function(){mergeChunks(fileInfoList,finalHash);},2000);};var uploadList=function uploadList(fileInfoList,fileChunks,_index){fileChunks.map(function(item,index){var record={fileName:fileInfoList[_index].name,section:item.section,chunk:item.chunk};console.log(record);postUploadArtwork(record).then(function(result){console.log(result);});});};var mergeChunks=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(fileInfoList,finalHash){return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:fileInfoList.map(function(item,idx){getMerge(item.name,finalHash).then(function(response){console.log(response);});});case 1:case\"end\":return _context2.stop();}}},_callee2);}));return function mergeChunks(_x3,_x4){return _ref2.apply(this,arguments);};}();","map":{"version":3,"names":["postUploadArtwork","getMerge","UploadFiles","fileBufferList","fileInfoList","finalHash","uploadState","size","map","file","index","fileChunks","fileIndex","cur","length","push","section","chunk","slice","uploadList","setTimeout","mergeChunks","_index","item","record","fileName","name","console","log","then","result","idx","response"],"sources":["/home/giparang/threadweb/fortune/client/src/components/uploadIDX/uploadFiles.js"],"sourcesContent":["import { postUploadArtwork, getMerge } from \"../../api\";\n\nexport const UploadFiles = ( fileBufferList, fileInfoList, finalHash ) => {\n  let uploadState = false;\n  \n    const size = 1024 * 50; //50KB 50KB Section size\n    fileBufferList.map(async(file, index) => {\n      let fileChunks = [];\n      let fileIndex = 0;\n      for(let cur = 0; cur < file.length; cur += size) {\n        fileChunks.push({\n          section: fileIndex++,\n          chunk: file.slice(cur, cur + size),\n        });\n      }\n      uploadList(fileInfoList, fileChunks, index++);\n    })\n    setTimeout(()=>{\n      mergeChunks(fileInfoList, finalHash);\n\t  },2000);\n}\nconst uploadList = (fileInfoList, fileChunks, _index) => {\n  fileChunks.map((item, index) => {\n    const record = {\n      fileName: fileInfoList[_index].name,\n      section: item.section,\n      chunk: item.chunk,\n    }\n    console.log(record);\n    postUploadArtwork(record).then(result => {\n      console.log(result);\n    })\n  })\n}\nconst mergeChunks = async(fileInfoList, finalHash) => {\n  fileInfoList.map((item, idx) => {\n    getMerge(item.name, finalHash).then(response => {\n      console.log(response);\n    })\n  })\n}"],"mappings":"0QAAA,OAASA,iBAAiB,CAAEC,QAAQ,KAAQ,WAAW,CAEvD,MAAO,IAAMC,YAAW,CAAG,QAAdA,YAAW,CAAKC,cAAc,CAAEC,YAAY,CAAEC,SAAS,CAAM,CACxE,GAAIC,YAAW,CAAG,KAAK,CAErB,GAAMC,KAAI,CAAG,IAAI,CAAG,EAAE,CAAE;AACxBJ,cAAc,CAACK,GAAG,4FAAC,iBAAMC,IAAI,CAAEC,KAAK,iJAC9BC,UAAU,CAAG,EAAE,CACfC,SAAS,CAAG,CAAC,CACjB,IAAQC,GAAG,CAAG,CAAC,CAAEA,GAAG,CAAGJ,IAAI,CAACK,MAAM,CAAED,GAAG,EAAIN,IAAI,CAAE,CAC/CI,UAAU,CAACI,IAAI,CAAC,CACdC,OAAO,CAAEJ,SAAS,EAAE,CACpBK,KAAK,CAAER,IAAI,CAACS,KAAK,CAACL,GAAG,CAAEA,GAAG,CAAGN,IAAI,CACnC,CAAC,CAAC,CACJ,CACAY,UAAU,CAACf,YAAY,CAAEO,UAAU,CAAED,KAAK,EAAE,CAAC,CAAC,sDAC/C,mEAAC,CACFU,UAAU,CAAC,UAAI,CACbC,WAAW,CAACjB,YAAY,CAAEC,SAAS,CAAC,CACvC,CAAC,CAAC,IAAI,CAAC,CACV,CAAC,CACD,GAAMc,WAAU,CAAG,QAAbA,WAAU,CAAIf,YAAY,CAAEO,UAAU,CAAEW,MAAM,CAAK,CACvDX,UAAU,CAACH,GAAG,CAAC,SAACe,IAAI,CAAEb,KAAK,CAAK,CAC9B,GAAMc,OAAM,CAAG,CACbC,QAAQ,CAAErB,YAAY,CAACkB,MAAM,CAAC,CAACI,IAAI,CACnCV,OAAO,CAAEO,IAAI,CAACP,OAAO,CACrBC,KAAK,CAAEM,IAAI,CAACN,KACd,CAAC,CACDU,OAAO,CAACC,GAAG,CAACJ,MAAM,CAAC,CACnBxB,iBAAiB,CAACwB,MAAM,CAAC,CAACK,IAAI,CAAC,SAAAC,MAAM,CAAI,CACvCH,OAAO,CAACC,GAAG,CAACE,MAAM,CAAC,CACrB,CAAC,CAAC,CACJ,CAAC,CAAC,CACJ,CAAC,CACD,GAAMT,YAAW,6FAAG,kBAAMjB,YAAY,CAAEC,SAAS,wHAC/CD,YAAY,CAACI,GAAG,CAAC,SAACe,IAAI,CAAEQ,GAAG,CAAK,CAC9B9B,QAAQ,CAACsB,IAAI,CAACG,IAAI,CAAErB,SAAS,CAAC,CAACwB,IAAI,CAAC,SAAAG,QAAQ,CAAI,CAC9CL,OAAO,CAACC,GAAG,CAACI,QAAQ,CAAC,CACvB,CAAC,CAAC,CACJ,CAAC,CAAC,yDACH,kBANKX,YAAW,kDAMhB"},"metadata":{},"sourceType":"module","externalDependencies":[]}