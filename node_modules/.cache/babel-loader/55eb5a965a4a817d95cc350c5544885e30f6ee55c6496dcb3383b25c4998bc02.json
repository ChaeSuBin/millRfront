{"ast":null,"code":"import { buyedToknChange, getUserId } from '../../api';\nimport { buyNFT } from '../../utilityUnits/connTradeService.js';\nlet intervalId = null;\nlet count = 0;\nexport const buyToknTransfer = async (_price, _itemId, set_w_Flag, FROM_ADDR, PRIVATE_KEY) => {\n  const value = parseInt(_price * 100000) + '0000000000000';\n  console.log(_itemId);\n  buyNFT(FROM_ADDR, PRIVATE_KEY, _itemId, value).then(result => {\n    if (result === true) {\n      intervalId = setInterval(() => {\n        if (count > 9) {\n          stopTimer();\n          set_w_Flag(false);\n          alert('입력하신 Private Key가 다른 주소의 키 같습니다\\n 키를 확인 후 다시 시도하여 주십시오.');\n        } else ++count;\n      }, 1000);\n    } else {\n      set_w_Flag(false);\n      alert(`⚠️Err: ${result}`);\n    }\n  });\n};\nexport const updateToknIdx = async (_buyerAddr, _toknId) => {\n  console.log(_buyerAddr, _toknId);\n  const userId = await getUserId(_buyerAddr);\n  const record = {\n    toknId: _toknId,\n    userId: userId\n  };\n  buyedToknChange(record).then(result => {\n    if (result) {\n      stopTimer();\n      if (!alert('🎉Successfully purchased')) window.location.reload();\n    }\n  });\n};\nconst stopTimer = () => {\n  clearInterval(intervalId);\n  intervalId = null;\n};","map":{"version":3,"names":["buyedToknChange","getUserId","buyNFT","intervalId","count","buyToknTransfer","_price","_itemId","set_w_Flag","FROM_ADDR","PRIVATE_KEY","value","parseInt","console","log","then","result","setInterval","stopTimer","alert","updateToknIdx","_buyerAddr","_toknId","userId","record","toknId","window","location","reload","clearInterval"],"sources":["/home/giparang/threadweb/fortune/client/src/components/detailPages/toknTransfer.js"],"sourcesContent":["import { buyedToknChange, getUserId } from '../../api';\nimport { buyNFT } from '../../utilityUnits/connTradeService.js'\n\nlet intervalId = null;\nlet count = 0;\n\nexport const buyToknTransfer = async(_price, _itemId, set_w_Flag, FROM_ADDR, PRIVATE_KEY) => {\n  const value = parseInt(_price*100000) + '0000000000000';\n\tconsole.log(_itemId);\n  buyNFT(FROM_ADDR, PRIVATE_KEY, _itemId, value).then(result => {\n    if(result === true){\n      intervalId = setInterval(() => {\n        if(count > 9){\n          stopTimer();\n\t\t\t\t\tset_w_Flag(false);\n          alert('입력하신 Private Key가 다른 주소의 키 같습니다\\n 키를 확인 후 다시 시도하여 주십시오.');\n        }\n        else\n          ++count;\n      }, 1000);\n    }\n\t\telse{\n\t\t\tset_w_Flag(false);\n\t\t\talert(`⚠️Err: ${result}`);\n\t\t}\n  })\n}\nexport const updateToknIdx = async(_buyerAddr, _toknId) => {\n\tconsole.log(_buyerAddr, _toknId);\n\tconst userId = await getUserId(_buyerAddr);\n\tconst record = {\n\t\ttoknId: _toknId,\n\t\tuserId: userId\n\t}\n\tbuyedToknChange(record).then(result => {\n\t\tif(result){\n\t\t\tstopTimer();\n      if(!alert('🎉Successfully purchased'))\n        window.location.reload();\n\t\t}\n\t})\n}\nconst stopTimer = () => {\n  clearInterval(intervalId);\n  intervalId=null;\n}"],"mappings":"AAAA,SAASA,eAAe,EAAEC,SAAS,QAAQ,WAAW;AACtD,SAASC,MAAM,QAAQ,wCAAwC;AAE/D,IAAIC,UAAU,GAAG,IAAI;AACrB,IAAIC,KAAK,GAAG,CAAC;AAEb,OAAO,MAAMC,eAAe,GAAG,OAAMC,MAAM,EAAEC,OAAO,EAAEC,UAAU,EAAEC,SAAS,EAAEC,WAAW,KAAK;EAC3F,MAAMC,KAAK,GAAGC,QAAQ,CAACN,MAAM,GAAC,MAAM,CAAC,GAAG,eAAe;EACxDO,OAAO,CAACC,GAAG,CAACP,OAAO,CAAC;EACnBL,MAAM,CAACO,SAAS,EAAEC,WAAW,EAAEH,OAAO,EAAEI,KAAK,CAAC,CAACI,IAAI,CAACC,MAAM,IAAI;IAC5D,IAAGA,MAAM,KAAK,IAAI,EAAC;MACjBb,UAAU,GAAGc,WAAW,CAAC,MAAM;QAC7B,IAAGb,KAAK,GAAG,CAAC,EAAC;UACXc,SAAS,EAAE;UAChBV,UAAU,CAAC,KAAK,CAAC;UACZW,KAAK,CAAC,yDAAyD,CAAC;QAClE,CAAC,MAEC,EAAEf,KAAK;MACX,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,MACC;MACHI,UAAU,CAAC,KAAK,CAAC;MACjBW,KAAK,CAAE,UAASH,MAAO,EAAC,CAAC;IAC1B;EACA,CAAC,CAAC;AACJ,CAAC;AACD,OAAO,MAAMI,aAAa,GAAG,OAAMC,UAAU,EAAEC,OAAO,KAAK;EAC1DT,OAAO,CAACC,GAAG,CAACO,UAAU,EAAEC,OAAO,CAAC;EAChC,MAAMC,MAAM,GAAG,MAAMtB,SAAS,CAACoB,UAAU,CAAC;EAC1C,MAAMG,MAAM,GAAG;IACdC,MAAM,EAAEH,OAAO;IACfC,MAAM,EAAEA;EACT,CAAC;EACDvB,eAAe,CAACwB,MAAM,CAAC,CAACT,IAAI,CAACC,MAAM,IAAI;IACtC,IAAGA,MAAM,EAAC;MACTE,SAAS,EAAE;MACR,IAAG,CAACC,KAAK,CAAC,0BAA0B,CAAC,EACnCO,MAAM,CAACC,QAAQ,CAACC,MAAM,EAAE;IAC9B;EACD,CAAC,CAAC;AACH,CAAC;AACD,MAAMV,SAAS,GAAG,MAAM;EACtBW,aAAa,CAAC1B,UAAU,CAAC;EACzBA,UAAU,GAAC,IAAI;AACjB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}