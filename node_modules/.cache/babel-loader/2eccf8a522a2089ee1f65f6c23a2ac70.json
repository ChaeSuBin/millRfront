{"ast":null,"code":"import { buyedToknChange, getUserId } from '../../api';\nimport { buyNFT } from '../../utilityUnits/connTradeService.js';\nlet intervalId = null;\nlet count = 0;\nexport const buyToknTransfer = async (_price, _itemId, set_w_Flag, FROM_ADDR, PRIVATE_KEY) => {\n  const value = parseInt(_price * 100000) + '0000000000000';\n  console.log(value, _itemId, FROM_ADDR, PRIVATE_KEY); // buyNFT(FROM_ADDR, PRIVATE_KEY, _itemId, value).then(result => {\n  //   if(result === true){\n  //     intervalId = setInterval(() => {\n  //       if(count > 9){\n  //         stopTimer();\n  //         alert('입력하신 Private Key가 다른 주소의 키 같습니다\\n 키를 확인 후 다시 시도하여 주십시오.');\n  //       }\n  //       else\n  //         ++count;\n  //     }, 1000);\n  //   }\n  // \telse{\n  // \t\tset_w_Flag(false);\n  // \t\talert(`⚠️Err: ${result}`);\n  // \t}\n  // })\n};\nexport const updateToknIdx = async (_buyerAddr, _toknId) => {\n  console.log(_buyerAddr, _toknId);\n  const userId = await getUserId(_buyerAddr);\n  const record = {\n    buyerId: userId,\n    tokenId: _toknId\n  };\n  buyedToknChange(record).then(result => {\n    if (result) {\n      stopTimer();\n      if (!alert('🎉Successfully purchased')) window.location.reload();\n    }\n  });\n};\n\nconst stopTimer = () => {\n  clearInterval(intervalId);\n  intervalId = null;\n};","map":{"version":3,"names":["buyedToknChange","getUserId","buyNFT","intervalId","count","buyToknTransfer","_price","_itemId","set_w_Flag","FROM_ADDR","PRIVATE_KEY","value","parseInt","console","log","updateToknIdx","_buyerAddr","_toknId","userId","record","buyerId","tokenId","then","result","stopTimer","alert","window","location","reload","clearInterval"],"sources":["/home/giparang/threadweb/fortune/client/src/components/detailPages/toknTransfer.js"],"sourcesContent":["import { buyedToknChange, getUserId } from '../../api';\nimport { buyNFT } from '../../utilityUnits/connTradeService.js'\n\nlet intervalId = null;\nlet count = 0;\n\nexport const buyToknTransfer = async(_price, _itemId, set_w_Flag, FROM_ADDR, PRIVATE_KEY) => {\n  const value = parseInt(_price*100000) + '0000000000000';\n\tconsole.log(value, _itemId, FROM_ADDR, PRIVATE_KEY);\n  // buyNFT(FROM_ADDR, PRIVATE_KEY, _itemId, value).then(result => {\n  //   if(result === true){\n  //     intervalId = setInterval(() => {\n  //       if(count > 9){\n  //         stopTimer();\n  //         alert('입력하신 Private Key가 다른 주소의 키 같습니다\\n 키를 확인 후 다시 시도하여 주십시오.');\n  //       }\n  //       else\n  //         ++count;\n  //     }, 1000);\n  //   }\n\t// \telse{\n\t// \t\tset_w_Flag(false);\n\t// \t\talert(`⚠️Err: ${result}`);\n\t// \t}\n  // })\n}\nexport const updateToknIdx = async(_buyerAddr, _toknId) => {\n\tconsole.log(_buyerAddr, _toknId);\n\tconst userId = await getUserId(_buyerAddr);\n\tconst record = {\n\t\tbuyerId: userId,\n\t\ttokenId: _toknId\n\t}\n\tbuyedToknChange(record).then(result => {\n\t\tif(result){\n\t\t\tstopTimer();\n      if(!alert('🎉Successfully purchased'))\n        window.location.reload();\n\t\t}\n\t})\n}\nconst stopTimer = () => {\n  clearInterval(intervalId);\n  intervalId=null;\n}"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,SAA1B,QAA2C,WAA3C;AACA,SAASC,MAAT,QAAuB,wCAAvB;AAEA,IAAIC,UAAU,GAAG,IAAjB;AACA,IAAIC,KAAK,GAAG,CAAZ;AAEA,OAAO,MAAMC,eAAe,GAAG,OAAMC,MAAN,EAAcC,OAAd,EAAuBC,UAAvB,EAAmCC,SAAnC,EAA8CC,WAA9C,KAA8D;EAC3F,MAAMC,KAAK,GAAGC,QAAQ,CAACN,MAAM,GAAC,MAAR,CAAR,GAA0B,eAAxC;EACDO,OAAO,CAACC,GAAR,CAAYH,KAAZ,EAAmBJ,OAAnB,EAA4BE,SAA5B,EAAuCC,WAAvC,EAF4F,CAG3F;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACD;EACA;EACA;EACA;EACC;AACD,CAnBM;AAoBP,OAAO,MAAMK,aAAa,GAAG,OAAMC,UAAN,EAAkBC,OAAlB,KAA8B;EAC1DJ,OAAO,CAACC,GAAR,CAAYE,UAAZ,EAAwBC,OAAxB;EACA,MAAMC,MAAM,GAAG,MAAMjB,SAAS,CAACe,UAAD,CAA9B;EACA,MAAMG,MAAM,GAAG;IACdC,OAAO,EAAEF,MADK;IAEdG,OAAO,EAAEJ;EAFK,CAAf;EAIAjB,eAAe,CAACmB,MAAD,CAAf,CAAwBG,IAAxB,CAA6BC,MAAM,IAAI;IACtC,IAAGA,MAAH,EAAU;MACTC,SAAS;MACN,IAAG,CAACC,KAAK,CAAC,0BAAD,CAAT,EACEC,MAAM,CAACC,QAAP,CAAgBC,MAAhB;IACL;EACD,CAND;AAOA,CAdM;;AAeP,MAAMJ,SAAS,GAAG,MAAM;EACtBK,aAAa,CAAC1B,UAAD,CAAb;EACAA,UAAU,GAAC,IAAX;AACD,CAHD"},"metadata":{},"sourceType":"module"}