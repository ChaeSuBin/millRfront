{"ast":null,"code":"import { fileToHash } from \"./fileToHash\";\nexport const onFileInputChange = (e, setBuffer, setFileInfo, setFileHash) => {\n  let fileByteArray = [];\n  getFileBuffer(e, setFileInfo).then(result => {\n    console.log(result);\n  }); // setBuffer(fileByteArray);\n  // fileToHash(fileByteArray, setFileHash);\n};\n\nconst getFileBuffer = async (e, setFileInfo) => {\n  const fileByteArray = [];\n  const fileInfo = [];\n  let fileNum = 0;\n\n  while (e.target.files.length > fileNum) {\n    const reader = new FileReader();\n    const fileBufferArray = [];\n    fileInfo.push({\n      name: e.target.files[fileNum].name,\n      type: e.target.files[fileNum].type,\n      size: e.target.files[fileNum].size\n    }); //console.log(e.target.files[fileNum]);\n\n    reader.readAsArrayBuffer(e.target.files[fileNum]);\n\n    reader.onloadend = _evt => {\n      if (_evt.target.readyState === FileReader.DONE) {\n        const arrayBuffer = _evt.target.result,\n              array = new Uint8Array(arrayBuffer);\n\n        for (const a of array) {\n          fileBufferArray.push(a);\n        }\n\n        fileByteArray.push(fileBufferArray);\n      }\n    };\n\n    ++fileNum;\n  }\n\n  console.log(fileByteArray);\n  setFileInfo(fileInfo);\n  return fileByteArray;\n};","map":{"version":3,"names":["fileToHash","onFileInputChange","e","setBuffer","setFileInfo","setFileHash","fileByteArray","getFileBuffer","then","result","console","log","fileInfo","fileNum","target","files","length","reader","FileReader","fileBufferArray","push","name","type","size","readAsArrayBuffer","onloadend","_evt","readyState","DONE","arrayBuffer","array","Uint8Array","a"],"sources":["/home/giparang/threadweb/fortune/client/src/utilityUnits/fileToBuffer.js"],"sourcesContent":["import { fileToHash } from \"./fileToHash\";\n\nexport const onFileInputChange = (e, setBuffer, setFileInfo, setFileHash) => {\n  let fileByteArray = [];\n\n  getFileBuffer(e, setFileInfo).then(result => {\n    console.log(result);\n  })\n  // setBuffer(fileByteArray);\n  \n  // fileToHash(fileByteArray, setFileHash);\n}\n\nconst getFileBuffer = async(e, setFileInfo) => {\n  const fileByteArray = [];\n  const fileInfo = [];\n  let fileNum = 0;\n  \n  while(e.target.files.length > fileNum){\n    const reader = new FileReader();\n    const fileBufferArray = [];\n        \n    fileInfo.push({\n      name: e.target.files[fileNum].name,\n      type: e.target.files[fileNum].type,\n      size: e.target.files[fileNum].size\n    })\n    //console.log(e.target.files[fileNum]);\n    reader.readAsArrayBuffer(e.target.files[fileNum]);\n    reader.onloadend = (_evt) => {\n      if (_evt.target.readyState === FileReader.DONE) {\n        const arrayBuffer = _evt.target.result,\n        array = new Uint8Array(arrayBuffer);\n        for (const a of array) {\n          fileBufferArray.push(a);\n        }\n        fileByteArray.push(fileBufferArray);\n      }\n    }\n    ++fileNum;\n  }\n  console.log(fileByteArray);\n  setFileInfo(fileInfo);\n  return fileByteArray;\n}"],"mappings":"AAAA,SAASA,UAAT,QAA2B,cAA3B;AAEA,OAAO,MAAMC,iBAAiB,GAAG,CAACC,CAAD,EAAIC,SAAJ,EAAeC,WAAf,EAA4BC,WAA5B,KAA4C;EAC3E,IAAIC,aAAa,GAAG,EAApB;EAEAC,aAAa,CAACL,CAAD,EAAIE,WAAJ,CAAb,CAA8BI,IAA9B,CAAmCC,MAAM,IAAI;IAC3CC,OAAO,CAACC,GAAR,CAAYF,MAAZ;EACD,CAFD,EAH2E,CAM3E;EAEA;AACD,CATM;;AAWP,MAAMF,aAAa,GAAG,OAAML,CAAN,EAASE,WAAT,KAAyB;EAC7C,MAAME,aAAa,GAAG,EAAtB;EACA,MAAMM,QAAQ,GAAG,EAAjB;EACA,IAAIC,OAAO,GAAG,CAAd;;EAEA,OAAMX,CAAC,CAACY,MAAF,CAASC,KAAT,CAAeC,MAAf,GAAwBH,OAA9B,EAAsC;IACpC,MAAMI,MAAM,GAAG,IAAIC,UAAJ,EAAf;IACA,MAAMC,eAAe,GAAG,EAAxB;IAEAP,QAAQ,CAACQ,IAAT,CAAc;MACZC,IAAI,EAAEnB,CAAC,CAACY,MAAF,CAASC,KAAT,CAAeF,OAAf,EAAwBQ,IADlB;MAEZC,IAAI,EAAEpB,CAAC,CAACY,MAAF,CAASC,KAAT,CAAeF,OAAf,EAAwBS,IAFlB;MAGZC,IAAI,EAAErB,CAAC,CAACY,MAAF,CAASC,KAAT,CAAeF,OAAf,EAAwBU;IAHlB,CAAd,EAJoC,CASpC;;IACAN,MAAM,CAACO,iBAAP,CAAyBtB,CAAC,CAACY,MAAF,CAASC,KAAT,CAAeF,OAAf,CAAzB;;IACAI,MAAM,CAACQ,SAAP,GAAoBC,IAAD,IAAU;MAC3B,IAAIA,IAAI,CAACZ,MAAL,CAAYa,UAAZ,KAA2BT,UAAU,CAACU,IAA1C,EAAgD;QAC9C,MAAMC,WAAW,GAAGH,IAAI,CAACZ,MAAL,CAAYL,MAAhC;QAAA,MACAqB,KAAK,GAAG,IAAIC,UAAJ,CAAeF,WAAf,CADR;;QAEA,KAAK,MAAMG,CAAX,IAAgBF,KAAhB,EAAuB;UACrBX,eAAe,CAACC,IAAhB,CAAqBY,CAArB;QACD;;QACD1B,aAAa,CAACc,IAAd,CAAmBD,eAAnB;MACD;IACF,CATD;;IAUA,EAAEN,OAAF;EACD;;EACDH,OAAO,CAACC,GAAR,CAAYL,aAAZ;EACAF,WAAW,CAACQ,QAAD,CAAX;EACA,OAAON,aAAP;AACD,CA/BD"},"metadata":{},"sourceType":"module"}