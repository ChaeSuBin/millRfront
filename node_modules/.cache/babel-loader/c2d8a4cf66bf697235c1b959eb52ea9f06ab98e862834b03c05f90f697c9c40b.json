{"ast":null,"code":"import { getTokenUri, mintingToken } from '../../utilityUnits/connMintService';\nimport { getToknId, getUserId, postMintTokn, putLogin } from '../../api';\nimport { SHA256 } from '../../utilityUnits/SHA256';\nexport const buyToknMint = async (_price, _itemId, set_w_Flag, FROM_ADDR, PRIVATE_KEY) => {\n  const record = {\n    playerId: sessionStorage.getItem('userid'),\n    playerPass: SHA256(PRIVATE_KEY)\n  };\n  if (await putLogin(record)) {\n    const value = parseInt(_price * 100000) + '0000000000000';\n    mintingToken(FROM_ADDR, PRIVATE_KEY, _itemId, value).then(result => {\n      if (result === true) serveToknIdx(FROM_ADDR);else {\n        alert('처리중 에러가 발생하였습니다 \\n 다시 시도하여 주십시오');\n        set_w_Flag(false);\n      }\n    });\n  } else {\n    alert('Private Key 를 확인 후 다시 시도하십시오');\n    set_w_Flag(false);\n  }\n};\nexport const serveToknIdx = async FROM_ADDR => {\n  const userId = await getUserId(FROM_ADDR);\n  const toknId = await getToknId(FROM_ADDR);\n  const fileHash = await getFileHash(toknId);\n  const record = {\n    hash: fileHash,\n    toknId: toknId,\n    userId: userId\n  };\n  // if(_remain == 1){\n  //   console.log(_remain);\n  //   putItemClose({itemID: idxId});\n  // }\n  postMintTokn(record).then(resultIdx => {\n    if (resultIdx) {\n      //set_w_Flag(false); setFlag(false);\n      if (!alert('🎉Successfully purchased')) window.location.reload();\n    }\n  });\n};\nconst getFileHash = _toknId => {\n  return new Promise(resolve => {\n    const looper = setInterval(() => {\n      getTokenUri(_toknId).then(toknURI => {\n        if (toknURI) {\n          const splitedUri = toknURI.split('/');\n          clearInterval(looper);\n          resolve(splitedUri[4]);\n        }\n      });\n    }, 1000);\n  });\n};","map":{"version":3,"names":["getTokenUri","mintingToken","getToknId","getUserId","postMintTokn","putLogin","SHA256","buyToknMint","_price","_itemId","set_w_Flag","FROM_ADDR","PRIVATE_KEY","record","playerId","sessionStorage","getItem","playerPass","value","parseInt","then","result","serveToknIdx","alert","userId","toknId","fileHash","getFileHash","hash","resultIdx","window","location","reload","_toknId","Promise","resolve","looper","setInterval","toknURI","splitedUri","split","clearInterval"],"sources":["/home/giparang/threadweb/fortune/client/src/components/detailPages/toknMint.js"],"sourcesContent":["import { getTokenUri, mintingToken } from '../../utilityUnits/connMintService';\nimport { getToknId, getUserId, postMintTokn, putLogin } from '../../api';\nimport { SHA256 } from '../../utilityUnits/SHA256';\n\nexport const buyToknMint = async(_price, _itemId, set_w_Flag, FROM_ADDR, PRIVATE_KEY) => {\n  const record = {\n    playerId: sessionStorage.getItem('userid'),\n    playerPass: SHA256(PRIVATE_KEY)\n  }\n  if(await putLogin(record)){\n    const value = parseInt(_price*100000) + '0000000000000';\n    mintingToken(FROM_ADDR, PRIVATE_KEY, _itemId, value).then(result => {\n      if(result === true)\n        serveToknIdx(FROM_ADDR);\n      else{\n        alert('처리중 에러가 발생하였습니다 \\n 다시 시도하여 주십시오');\n        set_w_Flag(false)\n      }\n    })\n  }\n  else{\n    alert('Private Key 를 확인 후 다시 시도하십시오');\n    set_w_Flag(false);\n  }\n}\n\nexport const serveToknIdx = async(FROM_ADDR) => {\n  const userId = await getUserId(FROM_ADDR);\n  const toknId = await getToknId(FROM_ADDR);\n  const fileHash = await getFileHash(toknId);\n  const record = {\n    hash: fileHash,\n    toknId: toknId,\n    userId: userId\n  }\n  // if(_remain == 1){\n  //   console.log(_remain);\n  //   putItemClose({itemID: idxId});\n  // }\n  postMintTokn(record).then(resultIdx => {\n    if(resultIdx){\n      //set_w_Flag(false); setFlag(false);\n      if(!alert('🎉Successfully purchased'))\n        window.location.reload();\n    }\n  })\n}\n\nconst getFileHash = (_toknId) => {\n  return new Promise(resolve => {\n    const looper = setInterval(() => {\n      getTokenUri(_toknId).then(toknURI => {\n        if(toknURI){\n          const splitedUri = toknURI.split('/');\n          clearInterval(looper);\n          resolve(splitedUri[4]);\n        }\n      })\n    }, 1000);\n  })\n}"],"mappings":"AAAA,SAASA,WAAW,EAAEC,YAAY,QAAQ,oCAAoC;AAC9E,SAASC,SAAS,EAAEC,SAAS,EAAEC,YAAY,EAAEC,QAAQ,QAAQ,WAAW;AACxE,SAASC,MAAM,QAAQ,2BAA2B;AAElD,OAAO,MAAMC,WAAW,GAAG,OAAMC,MAAM,EAAEC,OAAO,EAAEC,UAAU,EAAEC,SAAS,EAAEC,WAAW,KAAK;EACvF,MAAMC,MAAM,GAAG;IACbC,QAAQ,EAAEC,cAAc,CAACC,OAAO,CAAC,QAAQ,CAAC;IAC1CC,UAAU,EAAEX,MAAM,CAACM,WAAW;EAChC,CAAC;EACD,IAAG,MAAMP,QAAQ,CAACQ,MAAM,CAAC,EAAC;IACxB,MAAMK,KAAK,GAAGC,QAAQ,CAACX,MAAM,GAAC,MAAM,CAAC,GAAG,eAAe;IACvDP,YAAY,CAACU,SAAS,EAAEC,WAAW,EAAEH,OAAO,EAAES,KAAK,CAAC,CAACE,IAAI,CAACC,MAAM,IAAI;MAClE,IAAGA,MAAM,KAAK,IAAI,EAChBC,YAAY,CAACX,SAAS,CAAC,CAAC,KACtB;QACFY,KAAK,CAAC,iCAAiC,CAAC;QACxCb,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC,CAAC;EACJ,CAAC,MACG;IACFa,KAAK,CAAC,8BAA8B,CAAC;IACrCb,UAAU,CAAC,KAAK,CAAC;EACnB;AACF,CAAC;AAED,OAAO,MAAMY,YAAY,GAAG,MAAMX,SAAS,IAAK;EAC9C,MAAMa,MAAM,GAAG,MAAMrB,SAAS,CAACQ,SAAS,CAAC;EACzC,MAAMc,MAAM,GAAG,MAAMvB,SAAS,CAACS,SAAS,CAAC;EACzC,MAAMe,QAAQ,GAAG,MAAMC,WAAW,CAACF,MAAM,CAAC;EAC1C,MAAMZ,MAAM,GAAG;IACbe,IAAI,EAAEF,QAAQ;IACdD,MAAM,EAAEA,MAAM;IACdD,MAAM,EAAEA;EACV,CAAC;EACD;EACA;EACA;EACA;EACApB,YAAY,CAACS,MAAM,CAAC,CAACO,IAAI,CAACS,SAAS,IAAI;IACrC,IAAGA,SAAS,EAAC;MACX;MACA,IAAG,CAACN,KAAK,CAAC,0BAA0B,CAAC,EACnCO,MAAM,CAACC,QAAQ,CAACC,MAAM,EAAE;IAC5B;EACF,CAAC,CAAC;AACJ,CAAC;AAED,MAAML,WAAW,GAAIM,OAAO,IAAK;EAC/B,OAAO,IAAIC,OAAO,CAACC,OAAO,IAAI;IAC5B,MAAMC,MAAM,GAAGC,WAAW,CAAC,MAAM;MAC/BrC,WAAW,CAACiC,OAAO,CAAC,CAACb,IAAI,CAACkB,OAAO,IAAI;QACnC,IAAGA,OAAO,EAAC;UACT,MAAMC,UAAU,GAAGD,OAAO,CAACE,KAAK,CAAC,GAAG,CAAC;UACrCC,aAAa,CAACL,MAAM,CAAC;UACrBD,OAAO,CAACI,UAAU,CAAC,CAAC,CAAC,CAAC;QACxB;MACF,CAAC,CAAC;IACJ,CAAC,EAAE,IAAI,CAAC;EACV,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}