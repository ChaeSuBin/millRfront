{"ast":null,"code":"export const onFileInputChange = (e, _setBuffer, _setFileInfo) => {\n  const fileByteArray = [];\n  const fileInfo = []; //let fileSizeArr = [];\n\n  let fileNum = 0;\n\n  let f = function (a, b) {\n    return a.size < b.size ? -1 : 1; //オブジェクトの昇順ソート\n  };\n\n  while (e.target.files.length > fileNum) {\n    //console.log(fileNum);\n    const reader = new FileReader();\n    const fileBufferArray = [];\n    fileInfo.push({\n      name: e.target.files[fileNum].name,\n      type: e.target.files[fileNum].type,\n      size: e.target.files[fileNum].size\n    });\n    fileInfo.sort(f);\n    console.log(e.target.files); //fileSizeArr[fileNum] = e.target.files[fileNum].size;\n    // reader.readAsArrayBuffer(e.target.files[fileNum]);\n    // reader.onloadend = (_evt) => {\n    //   if (_evt.target.readyState === FileReader.DONE) {\n    //     const arrayBuffer = _evt.target.result,\n    //     array = new Uint8Array(arrayBuffer);\n    //     for (const a of array) {\n    //       fileBufferArray.push(a);\n    //     }\n    //     fileByteArray.push(fileBufferArray);\n    //     //console.log(fileByteArray);\n    //   }\n    // }\n\n    ++fileNum;\n  }\n\n  _setBuffer(fileByteArray);\n\n  _setFileInfo(fileInfo.sort(f));\n};","map":{"version":3,"names":["onFileInputChange","e","_setBuffer","_setFileInfo","fileByteArray","fileInfo","fileNum","f","a","b","size","target","files","length","reader","FileReader","fileBufferArray","push","name","type","sort","console","log"],"sources":["/home/giparang/threadweb/fortune/client/src/utilityUnits/fileToBuffer.js"],"sourcesContent":["\nexport const onFileInputChange = (e, _setBuffer, _setFileInfo) => {\n  const fileByteArray = [];\n  const fileInfo = [];\n  //let fileSizeArr = [];\n\n  let fileNum = 0;\n  let f = function (a, b) {\n    return (a.size < b.size) ? -1 : 1;  //オブジェクトの昇順ソート\n  }  \n    \n  while(e.target.files.length > fileNum){\n    //console.log(fileNum);\n    const reader = new FileReader();\n    const fileBufferArray = [];\n        \n    fileInfo.push({\n      name: e.target.files[fileNum].name,\n      type: e.target.files[fileNum].type,\n      size: e.target.files[fileNum].size\n    })\n    fileInfo.sort(f);\n    console.log(e.target.files);\n    //fileSizeArr[fileNum] = e.target.files[fileNum].size;\n\n    // reader.readAsArrayBuffer(e.target.files[fileNum]);\n    // reader.onloadend = (_evt) => {\n    //   if (_evt.target.readyState === FileReader.DONE) {\n    //     const arrayBuffer = _evt.target.result,\n    //     array = new Uint8Array(arrayBuffer);\n    //     for (const a of array) {\n    //       fileBufferArray.push(a);\n    //     }\n    //     fileByteArray.push(fileBufferArray);\n    //     //console.log(fileByteArray);\n    //   }\n    // }\n    ++fileNum;\n  }\n  _setBuffer(fileByteArray);\n  _setFileInfo(fileInfo.sort(f));\n}"],"mappings":"AACA,OAAO,MAAMA,iBAAiB,GAAG,CAACC,CAAD,EAAIC,UAAJ,EAAgBC,YAAhB,KAAiC;EAChE,MAAMC,aAAa,GAAG,EAAtB;EACA,MAAMC,QAAQ,GAAG,EAAjB,CAFgE,CAGhE;;EAEA,IAAIC,OAAO,GAAG,CAAd;;EACA,IAAIC,CAAC,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAAgB;IACtB,OAAQD,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAZ,GAAoB,CAAC,CAArB,GAAyB,CAAhC,CADsB,CACc;EACrC,CAFD;;EAIA,OAAMT,CAAC,CAACU,MAAF,CAASC,KAAT,CAAeC,MAAf,GAAwBP,OAA9B,EAAsC;IACpC;IACA,MAAMQ,MAAM,GAAG,IAAIC,UAAJ,EAAf;IACA,MAAMC,eAAe,GAAG,EAAxB;IAEAX,QAAQ,CAACY,IAAT,CAAc;MACZC,IAAI,EAAEjB,CAAC,CAACU,MAAF,CAASC,KAAT,CAAeN,OAAf,EAAwBY,IADlB;MAEZC,IAAI,EAAElB,CAAC,CAACU,MAAF,CAASC,KAAT,CAAeN,OAAf,EAAwBa,IAFlB;MAGZT,IAAI,EAAET,CAAC,CAACU,MAAF,CAASC,KAAT,CAAeN,OAAf,EAAwBI;IAHlB,CAAd;IAKAL,QAAQ,CAACe,IAAT,CAAcb,CAAd;IACAc,OAAO,CAACC,GAAR,CAAYrB,CAAC,CAACU,MAAF,CAASC,KAArB,EAXoC,CAYpC;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IACA,EAAEN,OAAF;EACD;;EACDJ,UAAU,CAACE,aAAD,CAAV;;EACAD,YAAY,CAACE,QAAQ,CAACe,IAAT,CAAcb,CAAd,CAAD,CAAZ;AACD,CAxCM"},"metadata":{},"sourceType":"module"}