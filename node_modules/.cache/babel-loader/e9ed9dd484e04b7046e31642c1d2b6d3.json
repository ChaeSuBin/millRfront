{"ast":null,"code":"import { getTokenUri, mintingToken } from '../../utilityUnits/connMintService';\nimport { getUserId, postMintTokn } from '../../api';\nlet count = 0;\nlet intervalId = null;\nexport const buyToknMint = async (_price, _itemId, setFlag, set_w_Flag, FROM_ADDR, PRIVATE_KEY) => {\n  console.log(PRIVATE_KEY);\n  const value = parseInt(_price * 100000) + '0000000000000';\n  mintingToken(FROM_ADDR, PRIVATE_KEY, _itemId, value).then(result => {\n    if (result === true) {\n      intervalId = setInterval(() => {\n        if (count > 9) {\n          stopTimer();\n          set_w_Flag(false);\n          setFlag(false);\n          alert('입력하신 Private Key가 다른 주소의 키 같습니다\\n 키를 확인 후 다시 시도하여주십시오.');\n        } else ++count;\n      }, 1000);\n    } else {\n      set_w_Flag(false);\n      alert(`⚠️Err: ${result}`);\n    }\n  });\n};\nexport const tempuri = async () => {\n  console.log(await getTokenUri(2));\n};\nexport const serveToknIdx = async (_toknId, FROM_ADDR) => {\n  const userId = await getUserId(FROM_ADDR);\n  const fileHash = await getTokenUri(_toknId);\n  const record = {\n    hash: fileHash,\n    toknId: _toknId,\n    userId: userId\n  };\n  console.log(record); // if(_remain == 1){\n  //   console.log(_remain);\n  //   putItemClose({itemID: idxId});\n  // }\n\n  postMintTokn(record).then(resultIdx => {\n    if (resultIdx) {\n      //set_w_Flag(false); setFlag(false);\n      stopTimer();\n      alert('🎉Successfully purchased'); //window.location.reload();\n    }\n  });\n};\n\nconst stopTimer = () => {\n  clearInterval(intervalId);\n  intervalId = null;\n};","map":{"version":3,"names":["getTokenUri","mintingToken","getUserId","postMintTokn","count","intervalId","buyToknMint","_price","_itemId","setFlag","set_w_Flag","FROM_ADDR","PRIVATE_KEY","console","log","value","parseInt","then","result","setInterval","stopTimer","alert","tempuri","serveToknIdx","_toknId","userId","fileHash","record","hash","toknId","resultIdx","clearInterval"],"sources":["/home/giparang/threadweb/fortune/client/src/components/detailPages/toknMint.js"],"sourcesContent":["import { getTokenUri, mintingToken } from '../../utilityUnits/connMintService';\nimport { getUserId, postMintTokn } from '../../api';\n\nlet count = 0;\nlet intervalId = null;\n\nexport const buyToknMint = async(_price, _itemId, setFlag, set_w_Flag, FROM_ADDR, PRIVATE_KEY) => {\n  console.log(PRIVATE_KEY);\n  const value = parseInt(_price*100000) + '0000000000000';\n  mintingToken(FROM_ADDR, PRIVATE_KEY, _itemId, value).then(result => {\n    if(result === true){\n      intervalId = setInterval(() => {\n        if(count > 9){\n          stopTimer();\n          set_w_Flag(false); setFlag(false);\n          alert('입력하신 Private Key가 다른 주소의 키 같습니다\\n 키를 확인 후 다시 시도하여주십시오.')\n        }\n        else\n          ++count;\n      }, 1000);\n    }\n    else{\n      set_w_Flag(false);\n      alert(`⚠️Err: ${result}`);\n    }\n  })\n}\nexport const tempuri = async() => {\n  console.log(await getTokenUri(2));\n}\nexport const serveToknIdx = async(_toknId, FROM_ADDR) => {\n  const userId = await getUserId(FROM_ADDR);\n  const fileHash = await getTokenUri(_toknId);\n  const record = {\n    hash: fileHash,\n    toknId: _toknId,\n    userId: userId\n  }\n  console.log(record);\n  // if(_remain == 1){\n  //   console.log(_remain);\n  //   putItemClose({itemID: idxId});\n  // }\n  postMintTokn(record).then(resultIdx => {\n    if(resultIdx){\n      //set_w_Flag(false); setFlag(false);\n      stopTimer();\n      alert('🎉Successfully purchased');\n      //window.location.reload();\n    }\n  })\n}\nconst stopTimer = () => {\n  clearInterval(intervalId);\n  intervalId=null;\n}"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,YAAtB,QAA0C,oCAA1C;AACA,SAASC,SAAT,EAAoBC,YAApB,QAAwC,WAAxC;AAEA,IAAIC,KAAK,GAAG,CAAZ;AACA,IAAIC,UAAU,GAAG,IAAjB;AAEA,OAAO,MAAMC,WAAW,GAAG,OAAMC,MAAN,EAAcC,OAAd,EAAuBC,OAAvB,EAAgCC,UAAhC,EAA4CC,SAA5C,EAAuDC,WAAvD,KAAuE;EAChGC,OAAO,CAACC,GAAR,CAAYF,WAAZ;EACA,MAAMG,KAAK,GAAGC,QAAQ,CAACT,MAAM,GAAC,MAAR,CAAR,GAA0B,eAAxC;EACAN,YAAY,CAACU,SAAD,EAAYC,WAAZ,EAAyBJ,OAAzB,EAAkCO,KAAlC,CAAZ,CAAqDE,IAArD,CAA0DC,MAAM,IAAI;IAClE,IAAGA,MAAM,KAAK,IAAd,EAAmB;MACjBb,UAAU,GAAGc,WAAW,CAAC,MAAM;QAC7B,IAAGf,KAAK,GAAG,CAAX,EAAa;UACXgB,SAAS;UACTV,UAAU,CAAC,KAAD,CAAV;UAAmBD,OAAO,CAAC,KAAD,CAAP;UACnBY,KAAK,CAAC,wDAAD,CAAL;QACD,CAJD,MAME,EAAEjB,KAAF;MACH,CARuB,EAQrB,IARqB,CAAxB;IASD,CAVD,MAWI;MACFM,UAAU,CAAC,KAAD,CAAV;MACAW,KAAK,CAAE,UAASH,MAAO,EAAlB,CAAL;IACD;EACF,CAhBD;AAiBD,CApBM;AAqBP,OAAO,MAAMI,OAAO,GAAG,YAAW;EAChCT,OAAO,CAACC,GAAR,CAAY,MAAMd,WAAW,CAAC,CAAD,CAA7B;AACD,CAFM;AAGP,OAAO,MAAMuB,YAAY,GAAG,OAAMC,OAAN,EAAeb,SAAf,KAA6B;EACvD,MAAMc,MAAM,GAAG,MAAMvB,SAAS,CAACS,SAAD,CAA9B;EACA,MAAMe,QAAQ,GAAG,MAAM1B,WAAW,CAACwB,OAAD,CAAlC;EACA,MAAMG,MAAM,GAAG;IACbC,IAAI,EAAEF,QADO;IAEbG,MAAM,EAAEL,OAFK;IAGbC,MAAM,EAAEA;EAHK,CAAf;EAKAZ,OAAO,CAACC,GAAR,CAAYa,MAAZ,EARuD,CASvD;EACA;EACA;EACA;;EACAxB,YAAY,CAACwB,MAAD,CAAZ,CAAqBV,IAArB,CAA0Ba,SAAS,IAAI;IACrC,IAAGA,SAAH,EAAa;MACX;MACAV,SAAS;MACTC,KAAK,CAAC,0BAAD,CAAL,CAHW,CAIX;IACD;EACF,CAPD;AAQD,CArBM;;AAsBP,MAAMD,SAAS,GAAG,MAAM;EACtBW,aAAa,CAAC1B,UAAD,CAAb;EACAA,UAAU,GAAC,IAAX;AACD,CAHD"},"metadata":{},"sourceType":"module"}