{"ast":null,"code":"export const onFileInputChange = (e, _setBuffer, _setFileInfo) => {\n  asyncLoop(e).then(result => {\n    _setBuffer(result[0]);\n\n    _setFileInfo(result[1]);\n  });\n};\n\nconst asyncLoop = e => {\n  return new Promise(resolve => {\n    const fileByteArray = [];\n    const fileInfo = [];\n    let fileNum = 0;\n\n    while (e.target.files.length > fileNum) {\n      const reader = new FileReader();\n      const fileBufferArray = [];\n      fileInfo.push({\n        name: e.target.files[fileNum].name,\n        type: e.target.files[fileNum].type,\n        size: e.target.files[fileNum].size\n      }); //console.log(e.target.files[fileNum]);\n\n      reader.readAsArrayBuffer(e.target.files[fileNum]);\n\n      reader.onloadend = _evt => {\n        if (_evt.target.readyState === FileReader.DONE) {\n          const arrayBuffer = _evt.target.result,\n                array = new Uint8Array(arrayBuffer);\n\n          for (const a of array) {\n            fileBufferArray.push(a);\n          }\n\n          fileByteArray.push(fileBufferArray);\n        }\n      };\n\n      ++fileNum;\n    }\n\n    resolve([fileByteArray, fileInfo]);\n  });\n};","map":{"version":3,"names":["onFileInputChange","e","_setBuffer","_setFileInfo","asyncLoop","then","result","Promise","resolve","fileByteArray","fileInfo","fileNum","target","files","length","reader","FileReader","fileBufferArray","push","name","type","size","readAsArrayBuffer","onloadend","_evt","readyState","DONE","arrayBuffer","array","Uint8Array","a"],"sources":["/home/giparang/threadweb/fortune/client/src/utilityUnits/fileToBuffer.js"],"sourcesContent":["\nexport const onFileInputChange = (e, _setBuffer, _setFileInfo) => {\n  \n\n  asyncLoop(e).then(result => {\n    _setBuffer(result[0]);\n    _setFileInfo(result[1]);\n  })\n  \n}\nconst asyncLoop = (e) => {\n  return new Promise(resolve => {\n    const fileByteArray = [];\n    const fileInfo = [];\n    let fileNum = 0;\n    while(e.target.files.length > fileNum){\n      const reader = new FileReader();\n      const fileBufferArray = [];\n          \n      fileInfo.push({\n        name: e.target.files[fileNum].name,\n        type: e.target.files[fileNum].type,\n        size: e.target.files[fileNum].size\n      })\n      //console.log(e.target.files[fileNum]);\n      reader.readAsArrayBuffer(e.target.files[fileNum]);\n      reader.onloadend = (_evt) => {\n        if (_evt.target.readyState === FileReader.DONE) {\n          const arrayBuffer = _evt.target.result,\n          array = new Uint8Array(arrayBuffer);\n          for (const a of array) {\n            fileBufferArray.push(a);\n          }\n          fileByteArray.push(fileBufferArray);\n        }\n      }\n      ++fileNum;\n    }\n    resolve([fileByteArray, fileInfo]);\n  })\n}"],"mappings":"AACA,OAAO,MAAMA,iBAAiB,GAAG,CAACC,CAAD,EAAIC,UAAJ,EAAgBC,YAAhB,KAAiC;EAGhEC,SAAS,CAACH,CAAD,CAAT,CAAaI,IAAb,CAAkBC,MAAM,IAAI;IAC1BJ,UAAU,CAACI,MAAM,CAAC,CAAD,CAAP,CAAV;;IACAH,YAAY,CAACG,MAAM,CAAC,CAAD,CAAP,CAAZ;EACD,CAHD;AAKD,CARM;;AASP,MAAMF,SAAS,GAAIH,CAAD,IAAO;EACvB,OAAO,IAAIM,OAAJ,CAAYC,OAAO,IAAI;IAC5B,MAAMC,aAAa,GAAG,EAAtB;IACA,MAAMC,QAAQ,GAAG,EAAjB;IACA,IAAIC,OAAO,GAAG,CAAd;;IACA,OAAMV,CAAC,CAACW,MAAF,CAASC,KAAT,CAAeC,MAAf,GAAwBH,OAA9B,EAAsC;MACpC,MAAMI,MAAM,GAAG,IAAIC,UAAJ,EAAf;MACA,MAAMC,eAAe,GAAG,EAAxB;MAEAP,QAAQ,CAACQ,IAAT,CAAc;QACZC,IAAI,EAAElB,CAAC,CAACW,MAAF,CAASC,KAAT,CAAeF,OAAf,EAAwBQ,IADlB;QAEZC,IAAI,EAAEnB,CAAC,CAACW,MAAF,CAASC,KAAT,CAAeF,OAAf,EAAwBS,IAFlB;QAGZC,IAAI,EAAEpB,CAAC,CAACW,MAAF,CAASC,KAAT,CAAeF,OAAf,EAAwBU;MAHlB,CAAd,EAJoC,CASpC;;MACAN,MAAM,CAACO,iBAAP,CAAyBrB,CAAC,CAACW,MAAF,CAASC,KAAT,CAAeF,OAAf,CAAzB;;MACAI,MAAM,CAACQ,SAAP,GAAoBC,IAAD,IAAU;QAC3B,IAAIA,IAAI,CAACZ,MAAL,CAAYa,UAAZ,KAA2BT,UAAU,CAACU,IAA1C,EAAgD;UAC9C,MAAMC,WAAW,GAAGH,IAAI,CAACZ,MAAL,CAAYN,MAAhC;UAAA,MACAsB,KAAK,GAAG,IAAIC,UAAJ,CAAeF,WAAf,CADR;;UAEA,KAAK,MAAMG,CAAX,IAAgBF,KAAhB,EAAuB;YACrBX,eAAe,CAACC,IAAhB,CAAqBY,CAArB;UACD;;UACDrB,aAAa,CAACS,IAAd,CAAmBD,eAAnB;QACD;MACF,CATD;;MAUA,EAAEN,OAAF;IACD;;IACDH,OAAO,CAAC,CAACC,aAAD,EAAgBC,QAAhB,CAAD,CAAP;EACD,CA5BM,CAAP;AA6BD,CA9BD"},"metadata":{},"sourceType":"module"}