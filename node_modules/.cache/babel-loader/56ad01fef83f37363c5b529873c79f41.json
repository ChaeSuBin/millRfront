{"ast":null,"code":"var _jsxFileName = \"/home/giparang/threadweb/fortune/client/src/components/uploadFiles.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { postUploadArtwork, getMerge } from \"../api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const UploadFiles = _ref => {\n  let {\n    fileBufferList,\n    fileInfoList,\n    finalHash,\n    title,\n    desc\n  } = _ref;\n\n  const checkParams = () => {\n    console.log(finalHash);\n  };\n\n  const setFileChunks = () => {\n    const size = 1024 * 50; //50KB 50KB Section size\n\n    fileBufferList.map((file, index) => {\n      let fileChunks = [];\n      let fileIndex = 0;\n\n      for (let cur = 0; cur < file.length; cur += size) {\n        fileChunks.push({\n          section: fileIndex++,\n          chunk: file.slice(cur, cur + size)\n        });\n      } //uploadList(fileChunks, index++);\n\n    }); //mergeChunks();\n  };\n\n  const uploadList = (fileChunks, _index) => {\n    fileChunks.map((item, index) => {\n      const record = {\n        fileName: fileInfoList[_index].name,\n        section: item.section,\n        chunk: item.chunk\n      };\n      console.log(record); //   postUploadArtwork(record).then(result => {\n      //     console.log(result);\n      //   })\n    });\n  };\n\n  const mergeChunks = () => {\n    fileInfoList.map((item, idx) => {\n      getMerge(item.name).then(response => {\n        console.log(response);\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \"test-uploadfiles.js\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: checkParams,\n      children: \"checkParams\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: setFileChunks,\n      children: \"chunks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}; // const uploadFiles = () => {\n//     \n//     //postUploadArtwork\n//   }\n\n_c = UploadFiles;\n\nvar _c;\n\n$RefreshReg$(_c, \"UploadFiles\");","map":{"version":3,"names":["React","useState","useEffect","postUploadArtwork","getMerge","UploadFiles","fileBufferList","fileInfoList","finalHash","title","desc","checkParams","console","log","setFileChunks","size","map","file","index","fileChunks","fileIndex","cur","length","push","section","chunk","slice","uploadList","_index","item","record","fileName","name","mergeChunks","idx","then","response"],"sources":["/home/giparang/threadweb/fortune/client/src/components/uploadFiles.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { postUploadArtwork, getMerge } from \"../api\";\n\nexport const UploadFiles = ({\n    fileBufferList,\n    fileInfoList,\n    finalHash,\n    title, desc,\n  }) => {\n\n  const checkParams = () => {\n    console.log(finalHash);\n  }\n  const setFileChunks = () => {\n    const size = 1024 * 50; //50KB 50KB Section size\n\n    fileBufferList.map((file, index) => {\n      let fileChunks = [];\n      let fileIndex = 0;\n      for(let cur = 0; cur < file.length; cur += size) {\n        fileChunks.push({\n          section: fileIndex++,\n          chunk: file.slice(cur, cur + size),\n        });\n      }\n      //uploadList(fileChunks, index++);\n    })\n    //mergeChunks();\n  }\n  const uploadList = (fileChunks, _index) => {\n    fileChunks.map((item, index) => {\n      const record = {\n        fileName: fileInfoList[_index].name,\n        section: item.section,\n        chunk: item.chunk,\n      }\n      console.log(record);\n    //   postUploadArtwork(record).then(result => {\n    //     console.log(result);\n    //   })\n    })\n  }\n  const mergeChunks = () => {\n    fileInfoList.map((item, idx) => {\n      getMerge(item.name).then(response => {\n        console.log(response);\n      })\n    })\n  }\n  return(\n    <>\n      <h5>test-uploadfiles.js</h5>\n      <button onClick={checkParams}>checkParams</button>\n      <button onClick={setFileChunks}>chunks</button>\n    </>\n  )\n}\n\n// const uploadFiles = () => {\n//     \n//     //postUploadArtwork\n//   }"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,iBAAT,EAA4BC,QAA5B,QAA4C,QAA5C;;;AAEA,OAAO,MAAMC,WAAW,GAAG,QAKnB;EAAA,IALoB;IACxBC,cADwB;IAExBC,YAFwB;IAGxBC,SAHwB;IAIxBC,KAJwB;IAIjBC;EAJiB,CAKpB;;EAEN,MAAMC,WAAW,GAAG,MAAM;IACxBC,OAAO,CAACC,GAAR,CAAYL,SAAZ;EACD,CAFD;;EAGA,MAAMM,aAAa,GAAG,MAAM;IAC1B,MAAMC,IAAI,GAAG,OAAO,EAApB,CAD0B,CACF;;IAExBT,cAAc,CAACU,GAAf,CAAmB,CAACC,IAAD,EAAOC,KAAP,KAAiB;MAClC,IAAIC,UAAU,GAAG,EAAjB;MACA,IAAIC,SAAS,GAAG,CAAhB;;MACA,KAAI,IAAIC,GAAG,GAAG,CAAd,EAAiBA,GAAG,GAAGJ,IAAI,CAACK,MAA5B,EAAoCD,GAAG,IAAIN,IAA3C,EAAiD;QAC/CI,UAAU,CAACI,IAAX,CAAgB;UACdC,OAAO,EAAEJ,SAAS,EADJ;UAEdK,KAAK,EAAER,IAAI,CAACS,KAAL,CAAWL,GAAX,EAAgBA,GAAG,GAAGN,IAAtB;QAFO,CAAhB;MAID,CARiC,CASlC;;IACD,CAVD,EAH0B,CAc1B;EACD,CAfD;;EAgBA,MAAMY,UAAU,GAAG,CAACR,UAAD,EAAaS,MAAb,KAAwB;IACzCT,UAAU,CAACH,GAAX,CAAe,CAACa,IAAD,EAAOX,KAAP,KAAiB;MAC9B,MAAMY,MAAM,GAAG;QACbC,QAAQ,EAAExB,YAAY,CAACqB,MAAD,CAAZ,CAAqBI,IADlB;QAEbR,OAAO,EAAEK,IAAI,CAACL,OAFD;QAGbC,KAAK,EAAEI,IAAI,CAACJ;MAHC,CAAf;MAKAb,OAAO,CAACC,GAAR,CAAYiB,MAAZ,EAN8B,CAOhC;MACA;MACA;IACC,CAVD;EAWD,CAZD;;EAaA,MAAMG,WAAW,GAAG,MAAM;IACxB1B,YAAY,CAACS,GAAb,CAAiB,CAACa,IAAD,EAAOK,GAAP,KAAe;MAC9B9B,QAAQ,CAACyB,IAAI,CAACG,IAAN,CAAR,CAAoBG,IAApB,CAAyBC,QAAQ,IAAI;QACnCxB,OAAO,CAACC,GAAR,CAAYuB,QAAZ;MACD,CAFD;IAGD,CAJD;EAKD,CAND;;EAOA,oBACE;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAQ,OAAO,EAAEzB,WAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAFF,eAGE;MAAQ,OAAO,EAAEG,aAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAHF;EAAA,gBADF;AAOD,CArDM,C,CAuDP;AACA;AACA;AACA;;KA1DaT,W"},"metadata":{},"sourceType":"module"}