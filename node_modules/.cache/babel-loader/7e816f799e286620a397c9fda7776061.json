{"ast":null,"code":"var _jsxFileName = \"/home/giparang/threadweb/fortune/client/src/pages/wallet.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport getWeb3 from '../getWeb3';\nimport Web3 from \"web3/dist/web3.min.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Wallet = _ref => {\n  _s();\n\n  let {\n    web3,\n    ADDR\n  } = _ref;\n  const DEBUG = 1;\n  const [balance, setBalance] = useState();\n  const [userAcc, setAddress] = useState(null);\n  const [rcvAcc, setRcvAddress] = useState('');\n  const [privKey, setPrivKey] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(null);\n  useEffect(() => {\n    getUserBal();\n  }, []);\n\n  const getUserBal = () => {\n    web3.eth.getBalance(ADDR).then(balanc => {\n      let count = 0;\n\n      do {\n        balanc /= 1000000;\n        ++count;\n      } while (count < 3);\n\n      setBalance(balanc);\n    });\n  };\n\n  const sendCoin = async () => {\n    const nonce = await web3.eth.getTransactionCount(userAcc, 'latest'); // nonce starts counting from 0\n\n    console.log(nonce);\n    const transaction = {\n      'to': rcvAcc,\n      // faucet address to return eth\n      'value': 20000000,\n      'gas': 30000,\n      'nonce': nonce // optional data field to send message or execute smart contract\n\n    };\n    const signedTx = await web3.eth.accounts.signTransaction(transaction, privKey);\n    web3.eth.sendSignedTransaction(signedTx.rawTransaction, function (error, hash) {\n      if (!error) console.log(\"🎉 The hash of your transaction is: \", hash, \"\\n Check Polygon Scan to view the status of your transaction!\");else console.log(\"❗Something went wrong while submitting your transaction:\", error);\n    });\n  };\n\n  const getChainId = () => {\n    //console.log(web3.eth.getChainId);\n    web3.eth.net.getId().then(x => {\n      switch (x) {\n        case 1:\n          console.log('connected etherium mainnet');\n          break;\n\n        case 3:\n          console.log('connected ropsten testnet');\n          break;\n\n        case 4:\n          console.log('connected rinkeby testnet');\n          break;\n\n        case 42:\n          console.log('connected kovan testnet');\n          break;\n\n        case 80001:\n          console.log('connected mumbai testnet');\n          break;\n\n        default:\n          console.log('default type');\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getUserBal,\n      children: \"UserBal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendCoin,\n      children: \"sendCoin\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getChainId,\n      children: \"chain.ver\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: [\"balance: \", balance, \" MATIC\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"send coin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), \" :\", /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: evt => setRcvAddress(evt.target.value),\n        placeholder: \"receiver Address 0x...\",\n        size: \"45\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Wallet, \"npBKoKh0urqgtDoOnss1TwuTrEE=\");\n\n_c = Wallet;\n\nvar _c;\n\n$RefreshReg$(_c, \"Wallet\");","map":{"version":3,"names":["React","useState","useEffect","getWeb3","Web3","Wallet","web3","ADDR","DEBUG","balance","setBalance","userAcc","setAddress","rcvAcc","setRcvAddress","privKey","setPrivKey","errorMessage","setErrorMessage","getUserBal","eth","getBalance","then","balanc","count","sendCoin","nonce","getTransactionCount","console","log","transaction","signedTx","accounts","signTransaction","sendSignedTransaction","rawTransaction","error","hash","getChainId","net","getId","x","evt","target","value"],"sources":["/home/giparang/threadweb/fortune/client/src/pages/wallet.js"],"sourcesContent":["import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport getWeb3 from '../getWeb3';\nimport Web3 from \"web3/dist/web3.min.js\";\n\nexport const Wallet = ({web3, ADDR}) => {\n  const DEBUG = 1;\n  const [balance, setBalance] = useState();\n  const [userAcc ,setAddress] = useState(null);\n  const [rcvAcc ,setRcvAddress] = useState('');\n  const [privKey, setPrivKey] = useState(null);\n\tconst [errorMessage, setErrorMessage] = useState(null);\n\n  useEffect(() => {\n    getUserBal();\n  },[]);\n  \n  const getUserBal = () => {\n    web3.eth.getBalance(ADDR).then(balanc => {\n      let count = 0;\n      do{\n        balanc /= 1000000;\n        ++count;\n      }while(count < 3)\n      setBalance(balanc);\n    })\n  }\n\n  const sendCoin = async() => {\n    const nonce = await web3.eth.getTransactionCount(userAcc, 'latest'); // nonce starts counting from 0\n    console.log(nonce)\n    const transaction = {\n     'to': rcvAcc, // faucet address to return eth\n     'value': 20000000,\n     'gas': 30000,\n     'nonce': nonce,\n     // optional data field to send message or execute smart contract\n    };\n    const signedTx = await web3.eth.accounts.signTransaction(transaction, privKey);\n\n    web3.eth.sendSignedTransaction(signedTx.rawTransaction, function(error, hash) {\n\n      if (!error)\n        console.log(\"🎉 The hash of your transaction is: \", hash, \"\\n Check Polygon Scan to view the status of your transaction!\");\n      else\n        console.log(\"❗Something went wrong while submitting your transaction:\", error);\n    });\n  }\n  \n  const getChainId = () => {\n    //console.log(web3.eth.getChainId);\n    web3.eth.net.getId().then((x) => {\n      switch(x){\n        case 1:\n          console.log('connected etherium mainnet');\n          break;\n        case 3:\n          console.log('connected ropsten testnet');\n          break;\n        case 4:\n          console.log('connected rinkeby testnet');\n          break;\n        case 42:\n          console.log('connected kovan testnet');\n          break;\n        case 80001:\n          console.log('connected mumbai testnet');\n          break;\n        default:\n          console.log('default type');\n      }\n    })\n  }\n  return (\n    <>\n    <h2>wallet</h2>\n    <button onClick={getUserBal}>UserBal</button>\n    <button onClick={sendCoin}>sendCoin</button>\n    <button onClick={getChainId}>chain.ver</button>\n    <br/>\n    <h5>balance: {balance} MATIC</h5>\n    <h5><button>send coin</button> :\n      <input onChange={(evt)=>setRcvAddress(evt.target.value)} placeholder='receiver Address 0x...' size='45'></input></h5>\n    </>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}