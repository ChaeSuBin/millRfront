{"ast":null,"code":"import { postUploadArtwork, getMerge } from \"../../api\";\nexport const UploadFiles = (fileBufferList, fileInfoList, finalHash) => {\n  let uploadState = false;\n  const size = 1024 * 50; //50KB 50KB Section size\n\n  fileBufferList.map(async (file, index) => {\n    let fileChunks = [];\n    let fileIndex = 0;\n\n    for (let cur = 0; cur < file.length; cur += size) {\n      fileChunks.push({\n        section: fileIndex++,\n        chunk: file.slice(cur, cur + size)\n      });\n    }\n\n    uploadList(fileChunks, index++);\n  });\n  setTimeout(() => {\n    mergeChunks();\n  }, 2000);\n\n  const uploadList = (fileChunks, _index) => {\n    fileChunks.map((item, index) => {\n      const record = {\n        fileName: fileInfoList[_index].name,\n        section: item.section,\n        chunk: item.chunk\n      };\n      console.log(record);\n      postUploadArtwork(record).then(result => {\n        console.log(result);\n      });\n    });\n  };\n\n  const mergeChunks = async () => {\n    fileInfoList.map((item, idx) => {\n      getMerge(item.name, finalHash).then(response => {\n        console.log(response);\n        setState(true);\n      });\n    });\n  };\n};\n_c = UploadFiles;\n\nvar _c;\n\n$RefreshReg$(_c, \"UploadFiles\");","map":{"version":3,"names":["postUploadArtwork","getMerge","UploadFiles","fileBufferList","fileInfoList","finalHash","uploadState","size","map","file","index","fileChunks","fileIndex","cur","length","push","section","chunk","slice","uploadList","setTimeout","mergeChunks","_index","item","record","fileName","name","console","log","then","result","idx","response","setState"],"sources":["/home/giparang/threadweb/fortune/client/src/components/uploadIDX/uploadFiles.js"],"sourcesContent":["import { postUploadArtwork, getMerge } from \"../../api\";\n\nexport const UploadFiles = ( fileBufferList, fileInfoList, finalHash ) => {\n  let uploadState = false;\n  \n    const size = 1024 * 50; //50KB 50KB Section size\n    fileBufferList.map(async(file, index) => {\n      let fileChunks = [];\n      let fileIndex = 0;\n      for(let cur = 0; cur < file.length; cur += size) {\n        fileChunks.push({\n          section: fileIndex++,\n          chunk: file.slice(cur, cur + size),\n        });\n      }\n      uploadList(fileChunks, index++);\n    })\n    setTimeout(()=>{\n      mergeChunks();\n\t  },2000);\n  \n  const uploadList = (fileChunks, _index) => {\n    fileChunks.map((item, index) => {\n      const record = {\n        fileName: fileInfoList[_index].name,\n        section: item.section,\n        chunk: item.chunk,\n      }\n      console.log(record);\n      postUploadArtwork(record).then(result => {\n        console.log(result);\n      })\n    })\n  }\n  const mergeChunks = async() => {\n    fileInfoList.map((item, idx) => {\n      getMerge(item.name, finalHash).then(response => {\n        console.log(response);\n        setState(true);\n      })\n    })\n  }\n}"],"mappings":"AAAA,SAASA,iBAAT,EAA4BC,QAA5B,QAA4C,WAA5C;AAEA,OAAO,MAAMC,WAAW,GAAG,CAAEC,cAAF,EAAkBC,YAAlB,EAAgCC,SAAhC,KAA+C;EACxE,IAAIC,WAAW,GAAG,KAAlB;EAEE,MAAMC,IAAI,GAAG,OAAO,EAApB,CAHsE,CAG9C;;EACxBJ,cAAc,CAACK,GAAf,CAAmB,OAAMC,IAAN,EAAYC,KAAZ,KAAsB;IACvC,IAAIC,UAAU,GAAG,EAAjB;IACA,IAAIC,SAAS,GAAG,CAAhB;;IACA,KAAI,IAAIC,GAAG,GAAG,CAAd,EAAiBA,GAAG,GAAGJ,IAAI,CAACK,MAA5B,EAAoCD,GAAG,IAAIN,IAA3C,EAAiD;MAC/CI,UAAU,CAACI,IAAX,CAAgB;QACdC,OAAO,EAAEJ,SAAS,EADJ;QAEdK,KAAK,EAAER,IAAI,CAACS,KAAL,CAAWL,GAAX,EAAgBA,GAAG,GAAGN,IAAtB;MAFO,CAAhB;IAID;;IACDY,UAAU,CAACR,UAAD,EAAaD,KAAK,EAAlB,CAAV;EACD,CAVD;EAWAU,UAAU,CAAC,MAAI;IACbC,WAAW;EACb,CAFU,EAET,IAFS,CAAV;;EAIF,MAAMF,UAAU,GAAG,CAACR,UAAD,EAAaW,MAAb,KAAwB;IACzCX,UAAU,CAACH,GAAX,CAAe,CAACe,IAAD,EAAOb,KAAP,KAAiB;MAC9B,MAAMc,MAAM,GAAG;QACbC,QAAQ,EAAErB,YAAY,CAACkB,MAAD,CAAZ,CAAqBI,IADlB;QAEbV,OAAO,EAAEO,IAAI,CAACP,OAFD;QAGbC,KAAK,EAAEM,IAAI,CAACN;MAHC,CAAf;MAKAU,OAAO,CAACC,GAAR,CAAYJ,MAAZ;MACAxB,iBAAiB,CAACwB,MAAD,CAAjB,CAA0BK,IAA1B,CAA+BC,MAAM,IAAI;QACvCH,OAAO,CAACC,GAAR,CAAYE,MAAZ;MACD,CAFD;IAGD,CAVD;EAWD,CAZD;;EAaA,MAAMT,WAAW,GAAG,YAAW;IAC7BjB,YAAY,CAACI,GAAb,CAAiB,CAACe,IAAD,EAAOQ,GAAP,KAAe;MAC9B9B,QAAQ,CAACsB,IAAI,CAACG,IAAN,EAAYrB,SAAZ,CAAR,CAA+BwB,IAA/B,CAAoCG,QAAQ,IAAI;QAC9CL,OAAO,CAACC,GAAR,CAAYI,QAAZ;QACAC,QAAQ,CAAC,IAAD,CAAR;MACD,CAHD;IAID,CALD;EAMD,CAPD;AAQD,CAxCM;KAAM/B,W"},"metadata":{},"sourceType":"module"}