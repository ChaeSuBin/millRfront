{"ast":null,"code":"let fileBuffer = [];\nlet fileInfo = [];\nexport const onFileInputChange = e => {\n  const fileByteArray = [];\n  let fileNum = 0;\n\n  while (e.target.files.length > fileNum) {\n    //console.log(fileNum);\n    const reader = new FileReader();\n    const fileBufferArray = [];\n    fileInfo[fileNum] = {\n      name: e.target.files[fileNum].name,\n      type: e.target.files[fileNum].type,\n      size: e.target.files[fileNum].size\n    };\n    reader.readAsArrayBuffer(e.target.files[fileNum]);\n\n    reader.onloadend = _evt => {\n      if (_evt.target.readyState === FileReader.DONE) {\n        const arrayBuffer = _evt.target.result,\n              array = new Uint8Array(arrayBuffer);\n\n        for (const a of array) {\n          fileBufferArray.push(a);\n        }\n\n        fileByteArray.push(fileBufferArray); //console.log(fileByteArray);\n      }\n    };\n\n    ++fileNum;\n  }\n\n  fileBuffer = fileByteArray;\n};\nexport const getFiles = (_setBuffer, _setFileInfo) => {\n  _setBuffer(fileBuffer);\n\n  _setFileInfo(fileInfo); // console.log(fileBuffer);\n  // console.log(fileInfo);\n\n};","map":{"version":3,"names":["fileBuffer","fileInfo","onFileInputChange","e","fileByteArray","fileNum","target","files","length","reader","FileReader","fileBufferArray","name","type","size","readAsArrayBuffer","onloadend","_evt","readyState","DONE","arrayBuffer","result","array","Uint8Array","a","push","getFiles","_setBuffer","_setFileInfo"],"sources":["/home/giparang/threadweb/fortune/client/src/utilityUnits/fileToBuffer.js"],"sourcesContent":["\nlet fileBuffer = [];\nlet fileInfo = [];\nexport const onFileInputChange = (e) => {\n  const fileByteArray = [];\n  let fileNum = 0;\n    \n  while(e.target.files.length > fileNum){\n    //console.log(fileNum);\n    const reader = new FileReader();\n    const fileBufferArray = [];\n        \n    fileInfo[fileNum]={\n      name: e.target.files[fileNum].name,\n      type: e.target.files[fileNum].type,\n      size: e.target.files[fileNum].size\n    }\n    reader.readAsArrayBuffer(e.target.files[fileNum]);\n    reader.onloadend = (_evt) => {\n      if (_evt.target.readyState === FileReader.DONE) {\n        const arrayBuffer = _evt.target.result,\n        array = new Uint8Array(arrayBuffer);\n        for (const a of array) {\n          fileBufferArray.push(a);\n        }\n        fileByteArray.push(fileBufferArray);\n        //console.log(fileByteArray);\n      }\n    }\n    ++fileNum;\n  }\n  fileBuffer = fileByteArray;\n}\nexport const getFiles = (_setBuffer, _setFileInfo) => {\n    _setBuffer(fileBuffer);\n    _setFileInfo(fileInfo);\n    // console.log(fileBuffer);\n    // console.log(fileInfo);\n}"],"mappings":"AACA,IAAIA,UAAU,GAAG,EAAjB;AACA,IAAIC,QAAQ,GAAG,EAAf;AACA,OAAO,MAAMC,iBAAiB,GAAIC,CAAD,IAAO;EACtC,MAAMC,aAAa,GAAG,EAAtB;EACA,IAAIC,OAAO,GAAG,CAAd;;EAEA,OAAMF,CAAC,CAACG,MAAF,CAASC,KAAT,CAAeC,MAAf,GAAwBH,OAA9B,EAAsC;IACpC;IACA,MAAMI,MAAM,GAAG,IAAIC,UAAJ,EAAf;IACA,MAAMC,eAAe,GAAG,EAAxB;IAEAV,QAAQ,CAACI,OAAD,CAAR,GAAkB;MAChBO,IAAI,EAAET,CAAC,CAACG,MAAF,CAASC,KAAT,CAAeF,OAAf,EAAwBO,IADd;MAEhBC,IAAI,EAAEV,CAAC,CAACG,MAAF,CAASC,KAAT,CAAeF,OAAf,EAAwBQ,IAFd;MAGhBC,IAAI,EAAEX,CAAC,CAACG,MAAF,CAASC,KAAT,CAAeF,OAAf,EAAwBS;IAHd,CAAlB;IAKAL,MAAM,CAACM,iBAAP,CAAyBZ,CAAC,CAACG,MAAF,CAASC,KAAT,CAAeF,OAAf,CAAzB;;IACAI,MAAM,CAACO,SAAP,GAAoBC,IAAD,IAAU;MAC3B,IAAIA,IAAI,CAACX,MAAL,CAAYY,UAAZ,KAA2BR,UAAU,CAACS,IAA1C,EAAgD;QAC9C,MAAMC,WAAW,GAAGH,IAAI,CAACX,MAAL,CAAYe,MAAhC;QAAA,MACAC,KAAK,GAAG,IAAIC,UAAJ,CAAeH,WAAf,CADR;;QAEA,KAAK,MAAMI,CAAX,IAAgBF,KAAhB,EAAuB;UACrBX,eAAe,CAACc,IAAhB,CAAqBD,CAArB;QACD;;QACDpB,aAAa,CAACqB,IAAd,CAAmBd,eAAnB,EAN8C,CAO9C;MACD;IACF,CAVD;;IAWA,EAAEN,OAAF;EACD;;EACDL,UAAU,GAAGI,aAAb;AACD,CA7BM;AA8BP,OAAO,MAAMsB,QAAQ,GAAG,CAACC,UAAD,EAAaC,YAAb,KAA8B;EAClDD,UAAU,CAAC3B,UAAD,CAAV;;EACA4B,YAAY,CAAC3B,QAAD,CAAZ,CAFkD,CAGlD;EACA;;AACH,CALM"},"metadata":{},"sourceType":"module"}