{"ast":null,"code":"import { getItemStatus, hexToUTF8 } from \"../../utilityUnits/connMintService\";\nexport const getBlockInfo = async _itemId => {\n  let count = 0;\n  const toknStatus = await getItemStatus(_itemId); //console.log(toknStatus, itemIdxId);\n\n  const toknURI = toknStatus.fileHash;\n  const useRange = setPermissionUse(toknURI.split('/'));\n\n  do {\n    toknStatus.royalty /= 1000000;\n    toknStatus.price /= 1000000;\n  } while (++count < 3);\n\n  hexToUTF8(toknStatus.status).then(result => {\n    return {\n      price: toknStatus.price,\n      royalty: toknStatus.royalty,\n      useRange: useRange,\n      door: result,\n      remain: toknStatus.limit\n    };\n  });\n};\n\nconst setPermissionUse = splitedUri => {\n  if (splitedUri[3] === '') {\n    return 'Only for personal use';\n  } else {\n    if (splitedUri[2] !== 'CO') return splitedUri[3] + ' (No commercially use)';else return splitedUri[3] + ' (Commercially Avaliable)';\n  }\n};","map":{"version":3,"names":["getItemStatus","hexToUTF8","getBlockInfo","_itemId","count","toknStatus","toknURI","fileHash","useRange","setPermissionUse","split","royalty","price","status","then","result","door","remain","limit","splitedUri"],"sources":["/home/giparang/threadweb/fortune/client/src/components/detailPages/setBlockIDX.js"],"sourcesContent":["import { getItemStatus, hexToUTF8 } from \"../../utilityUnits/connMintService\";\n\nexport const getBlockInfo = async(_itemId) => {\n    let count = 0;\n    const toknStatus = await getItemStatus(_itemId);\n    //console.log(toknStatus, itemIdxId);\n    const toknURI = toknStatus.fileHash;\n    const useRange = setPermissionUse(toknURI.split('/'));\n\n    do{\n      toknStatus.royalty /= 1000000;\n      toknStatus.price /= 1000000;\n    }while(++count < 3)\n\n    hexToUTF8(toknStatus.status).then(result => {\n        return {\n            price: toknStatus.price,\n            royalty: toknStatus.royalty,\n            useRange: useRange,\n            door: result,\n            remain: toknStatus.limit\n        }\n    })\n}\n\nconst setPermissionUse = (splitedUri) => {\n    if(splitedUri[3] === ''){\n        return('Only for personal use');\n      }\n      else{\n        if(splitedUri[2] !== 'CO')\n          return(splitedUri[3] + ' (No commercially use)');\n        else\n          return(splitedUri[3] + ' (Commercially Avaliable)');\n    }\n}"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,SAAxB,QAAyC,oCAAzC;AAEA,OAAO,MAAMC,YAAY,GAAG,MAAMC,OAAN,IAAkB;EAC1C,IAAIC,KAAK,GAAG,CAAZ;EACA,MAAMC,UAAU,GAAG,MAAML,aAAa,CAACG,OAAD,CAAtC,CAF0C,CAG1C;;EACA,MAAMG,OAAO,GAAGD,UAAU,CAACE,QAA3B;EACA,MAAMC,QAAQ,GAAGC,gBAAgB,CAACH,OAAO,CAACI,KAAR,CAAc,GAAd,CAAD,CAAjC;;EAEA,GAAE;IACAL,UAAU,CAACM,OAAX,IAAsB,OAAtB;IACAN,UAAU,CAACO,KAAX,IAAoB,OAApB;EACD,CAHD,QAGO,EAAER,KAAF,GAAU,CAHjB;;EAKAH,SAAS,CAACI,UAAU,CAACQ,MAAZ,CAAT,CAA6BC,IAA7B,CAAkCC,MAAM,IAAI;IACxC,OAAO;MACHH,KAAK,EAAEP,UAAU,CAACO,KADf;MAEHD,OAAO,EAAEN,UAAU,CAACM,OAFjB;MAGHH,QAAQ,EAAEA,QAHP;MAIHQ,IAAI,EAAED,MAJH;MAKHE,MAAM,EAAEZ,UAAU,CAACa;IALhB,CAAP;EAOH,CARD;AASH,CArBM;;AAuBP,MAAMT,gBAAgB,GAAIU,UAAD,IAAgB;EACrC,IAAGA,UAAU,CAAC,CAAD,CAAV,KAAkB,EAArB,EAAwB;IACpB,OAAO,uBAAP;EACD,CAFH,MAGM;IACF,IAAGA,UAAU,CAAC,CAAD,CAAV,KAAkB,IAArB,EACE,OAAOA,UAAU,CAAC,CAAD,CAAV,GAAgB,wBAAvB,CADF,KAGE,OAAOA,UAAU,CAAC,CAAD,CAAV,GAAgB,2BAAvB;EACL;AACJ,CAVD"},"metadata":{},"sourceType":"module"}