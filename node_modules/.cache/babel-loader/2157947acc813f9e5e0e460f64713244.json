{"ast":null,"code":"var _jsxFileName = \"/home/giparang/threadweb/fortune/client/src/pages/connectWeb3.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport getWeb3 from '../getWeb3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ConnectWeb3 = () => {\n  _s();\n\n  const DEBUG = 1;\n  const [accountInfo, setAccInfo] = useState([]);\n  const [userAcc, setAddress] = useState(null);\n  const [rcvAcc, setRcvAddress] = useState('');\n  const [account, setAccount] = useState(null);\n  const [privKey, setPrivKey] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [web3, setWeb3] = useState(null);\n  useEffect(() => {\n    connector();\n  }, []);\n\n  const connector = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n      const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n      const networkId = await web3.eth.net.getId();\n      const version = web3.version;\n      if (DEBUG) console.log('connected web3 version: ', version);\n      setWeb3(web3);\n    } catch (error) {\n      alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n      console.error(error);\n    }\n  };\n\n  const getUserBal = () => {\n    web3.eth.getBalance(userAcc).then(balanc => {\n      console.log(balanc);\n    });\n  };\n\n  const getTrxValue = () => {\n    web3.eth.getTransaction('0xd91d66a1c5927ebae746c4d97e8a616fcadb59eb8122f15e160fbab487321dcc').then(result => {\n      console.log(result);\n    }); //0x2b23b695591c5df04f3dd43b1cd2ba31a234ed2913de179cf4a4055acfe133a8 blockhash\n  };\n\n  const tempTrx = () => {\n    web3.eth.sendTransaction({\n      from: account,\n      to: '0xDB2c0335930a3F6f58B600935AC1B55b12c3E957',\n      value: 12\n    }).then(txHash => {\n      web3.eth.getTransaction(txHash.transactionHash).then(result => {\n        console.log(result.value);\n      });\n    });\n  };\n\n  const sendCoin = async () => {\n    const nonce = await web3.eth.getTransactionCount(rcvAcc, 'latest'); // nonce starts counting from 0\n\n    const transaction = {\n      'to': rcvAcc,\n      // faucet address to return eth\n      'value': 10000,\n      'gas': 30000,\n      'nonce': nonce // optional data field to send message or execute smart contract\n\n    };\n    const signedTx = await web3.eth.accounts.signTransaction(transaction, privKey);\n    web3.eth.sendSignedTransaction(signedTx.rawTransaction, function (error, hash) {\n      if (!error) {\n        console.log(\"🎉 The hash of your transaction is: \", hash, \"\\n Check Alchemy's Mempool to view the status of your transaction!\");\n      } else {\n        console.log(\"❗Something went wrong while submitting your transaction:\", error);\n      }\n    });\n  };\n\n  const connectWallet = () => {\n    window.ethereum.request({\n      method: \"eth_requestAccounts\"\n    }).then(result => {\n      setAccount(result[0]);\n    }).catch(error => {\n      setErrorMessage(error.message);\n    });\n  };\n\n  const createAccount = () => {\n    const account = web3.eth.accounts.create();\n    let accountKey = [];\n\n    if (DEBUG) {\n      console.log('privateKey : ', account.privateKey);\n      console.log('account : ', account.address);\n    }\n\n    accountKey.push(account.address);\n    accountKey.push(account.privateKey);\n    console.log(accountKey);\n    setAccInfo(accountKey);\n  };\n\n  const tempbtn = () => {\n    console.log(userAcc);\n    console.log(account);\n  };\n\n  const getChainId = () => {\n    //console.log(web3.eth.getChainId);\n    web3.eth.net.getId().then(x => {\n      switch (x) {\n        case 1:\n          console.log('connected etherium mainnet');\n          break;\n\n        case 3:\n          console.log('connected ropsten testnet');\n          break;\n\n        case 4:\n          console.log('connected rinkeby testnet');\n          break;\n\n        case 42:\n          console.log('connected kovan testnet');\n          break;\n\n        case 80001:\n          console.log('connected mumbai testnet');\n          break;\n\n        default:\n          console.log('default type');\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n      onClick: connectWallet,\n      children: \"Connect Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 5\n    }, this), account, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: createAccount,\n      children: \"createAcc\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getUserBal,\n      children: \"UserBal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendCoin,\n      children: \"sendCoin\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getChainId,\n      children: \"chain.ver\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: [\"from :\", /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: evt => setAddress(evt.target.value),\n        size: \"45\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 72\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: [\"to :\", /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: evt => setRcvAddress(evt.target.value),\n        size: \"45\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: [\"pass :\", /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: evt => setPrivKey(evt.target.value),\n        size: \"45\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: tempbtn,\n      children: \"tempbtn\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ConnectWeb3, \"MOlX3vNkJSwAdVzB2U/ftNmWXiE=\");\n\n_c = ConnectWeb3;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConnectWeb3\");","map":{"version":3,"names":["React","useState","useEffect","getWeb3","ConnectWeb3","DEBUG","accountInfo","setAccInfo","userAcc","setAddress","rcvAcc","setRcvAddress","account","setAccount","privKey","setPrivKey","errorMessage","setErrorMessage","web3","setWeb3","connector","accounts","eth","getAccounts","networkId","net","getId","version","console","log","error","alert","getUserBal","getBalance","then","balanc","getTrxValue","getTransaction","result","tempTrx","sendTransaction","from","to","value","txHash","transactionHash","sendCoin","nonce","getTransactionCount","transaction","signedTx","signTransaction","sendSignedTransaction","rawTransaction","hash","connectWallet","window","ethereum","request","method","catch","message","createAccount","create","accountKey","privateKey","address","push","tempbtn","getChainId","x","evt","target"],"sources":["/home/giparang/threadweb/fortune/client/src/pages/connectWeb3.js"],"sourcesContent":["import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport getWeb3 from '../getWeb3';\n\nexport const ConnectWeb3 = () => {\n  const DEBUG = 1;\n  const [accountInfo, setAccInfo] = useState([]);\n  const [userAcc ,setAddress] = useState(null);\n  const [rcvAcc ,setRcvAddress] = useState('');\n  const [account, setAccount] = useState(null);\n  const [privKey, setPrivKey] = useState(null);\n\tconst [errorMessage, setErrorMessage] = useState(null);\n  const [web3, setWeb3] = useState(null);\n\n  useEffect(() => {\n    connector();\n  },[]);\n\n  const connector = async() => {\n    try{\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n\n      const version = web3.version;\n      if(DEBUG) console.log('connected web3 version: ', version);\n      setWeb3(web3);\n    }\n    catch(error){\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  }\n  const getUserBal = () => {\n    web3.eth.getBalance(userAcc).then(balanc => {\n      console.log(balanc);\n    })\n  }\n  const getTrxValue = () => {\n    web3.eth.getTransaction('0xd91d66a1c5927ebae746c4d97e8a616fcadb59eb8122f15e160fbab487321dcc').then(result => {\n      console.log(result);\n    })//0x2b23b695591c5df04f3dd43b1cd2ba31a234ed2913de179cf4a4055acfe133a8 blockhash\n    \n  }\n  const tempTrx = () => {\n    web3.eth.sendTransaction({\n      from: account,\n      to: '0xDB2c0335930a3F6f58B600935AC1B55b12c3E957',\n      value: 12\n    }).then(txHash =>{\n      web3.eth.getTransaction(txHash.transactionHash).then(result => {\n        console.log(result.value);\n      })\n    })\n  }\n\n  const sendCoin = async() => {\n    const nonce = await web3.eth.getTransactionCount(rcvAcc, 'latest'); // nonce starts counting from 0\n\n    const transaction = {\n     'to': rcvAcc, // faucet address to return eth\n     'value': 10000,\n     'gas': 30000,\n     'nonce': nonce,\n     // optional data field to send message or execute smart contract\n    };\n    const signedTx = await web3.eth.accounts.signTransaction(transaction, privKey);\n\n    web3.eth.sendSignedTransaction(signedTx.rawTransaction, function(error, hash) {\n\n      if (!error) {\n  \n        console.log(\"🎉 The hash of your transaction is: \", hash, \"\\n Check Alchemy's Mempool to view the status of your transaction!\");\n  \n      } else {\n  \n        console.log(\"❗Something went wrong while submitting your transaction:\", error);\n      }\n    });\n  }\n  const connectWallet = () => {\n    window.ethereum.request({ method: \"eth_requestAccounts\" }).then((result) => {\n\t\tsetAccount(result[0]);\n\t  }).catch((error) => {\n\t  setErrorMessage(error.message);\n\t  });\n  }\n  const createAccount = () => {\n    const account = web3.eth.accounts.create();\n    let accountKey = [];\n\n    if(DEBUG){\n      console.log('privateKey : ', account.privateKey);\n      console.log('account : ', account.address);\n    }\n    accountKey.push(account.address);\n    accountKey.push(account.privateKey);\n\n    console.log(accountKey);\n    setAccInfo(accountKey);\n  }\n  const tempbtn = () => {\n    console.log(userAcc);\n    console.log(account);\n  }\n  const getChainId = () => {\n    //console.log(web3.eth.getChainId);\n    web3.eth.net.getId().then((x) => {\n      switch(x){\n        case 1:\n          console.log('connected etherium mainnet');\n          break;\n        case 3:\n          console.log('connected ropsten testnet');\n          break;\n        case 4:\n          console.log('connected rinkeby testnet');\n          break;\n        case 42:\n          console.log('connected kovan testnet');\n          break;\n        case 80001:\n          console.log('connected mumbai testnet');\n          break;\n        default:\n          console.log('default type');\n      }\n    })\n  }\n  return (\n    <>\n    <h2>wallet</h2>\n    <a onClick={connectWallet}>Connect Wallet</a>\n    {account}<br/>\n    <button onClick={createAccount}>createAcc</button>\n    <button onClick={getUserBal}>UserBal</button>\n    <button onClick={sendCoin}>sendCoin</button>\n    <button onClick={getChainId}>chain.ver</button>\n    <br/>\n    <h5>from : \n      <input onChange={(evt)=>setAddress(evt.target.value)} size='45'/><br/></h5>\n    <h5>to :\n      <input onChange={(evt)=>setRcvAddress(evt.target.value)} size='45'></input></h5>\n    <h5>pass :\n      <input onChange={(evt)=>setPrivKey(evt.target.value)} size='45'></input></h5>\n    <button onClick={tempbtn}>tempbtn</button>\n    </>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}