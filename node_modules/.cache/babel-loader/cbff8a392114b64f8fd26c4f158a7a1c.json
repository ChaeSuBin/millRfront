{"ast":null,"code":"var _jsxFileName = \"/home/giparang/threadweb/fortune/client/src/components/uploadFiles.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { postUploadArtwork, postUploadItemIdx, getMerge } from \"../api\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UploadFiles = _ref => {\n  _s();\n\n  let {\n    fileBufferList,\n    fileInfoList,\n    finalHash\n  } = _ref;\n  const [uploadState, setState] = useState(false);\n\n  const setFileChunks = () => {\n    const size = 1024 * 50; //50KB 50KB Section size\n\n    fileBufferList.map(async (file, index) => {\n      let fileChunks = [];\n      let fileIndex = 0;\n\n      for (let cur = 0; cur < file.length; cur += size) {\n        fileChunks.push({\n          section: fileIndex++,\n          chunk: file.slice(cur, cur + size)\n        });\n      }\n\n      uploadList(fileChunks, index++);\n    });\n    setTimeout(() => {\n      mergeChunks();\n    }, 2000);\n  };\n\n  const uploadList = (fileChunks, _index) => {\n    fileChunks.map((item, index) => {\n      const record = {\n        fileName: fileInfoList[_index].name,\n        section: item.section,\n        chunk: item.chunk\n      };\n      console.log(record);\n      postUploadArtwork(record).then(result => {\n        console.log(result);\n      });\n    });\n  };\n\n  const mergeChunks = async () => {\n    fileInfoList.map((item, idx) => {\n      getMerge(item.name, finalHash).then(response => {\n        console.log(response);\n        setState(true);\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: finalHash == undefined ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"uploadfiles.js\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), uploadState ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"upload complete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 24\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: setFileChunks,\n        children: \"upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 47\n      }, this)]\n    }, void 0, true)\n  }, void 0, false);\n};\n\n_s(UploadFiles, \"F6Bjij5oRf6dDktMh7ApE9uCeSM=\");\n\n_c = UploadFiles;\n\nvar _c;\n\n$RefreshReg$(_c, \"UploadFiles\");","map":{"version":3,"names":["React","useState","postUploadArtwork","postUploadItemIdx","getMerge","UploadFiles","fileBufferList","fileInfoList","finalHash","uploadState","setState","setFileChunks","size","map","file","index","fileChunks","fileIndex","cur","length","push","section","chunk","slice","uploadList","setTimeout","mergeChunks","_index","item","record","fileName","name","console","log","then","result","idx","response","undefined"],"sources":["/home/giparang/threadweb/fortune/client/src/components/uploadFiles.js"],"sourcesContent":["import React, { useState }from \"react\";\nimport { postUploadArtwork, postUploadItemIdx, getMerge } from \"../api\";\n\nexport const UploadFiles = ({\n    fileBufferList,\n    fileInfoList,\n    finalHash\n  }) => {\n\n  const [uploadState, setState] = useState(false);\n  \n  const setFileChunks = () => {\n    const size = 1024 * 50; //50KB 50KB Section size\n    fileBufferList.map(async(file, index) => {\n      let fileChunks = [];\n      let fileIndex = 0;\n      for(let cur = 0; cur < file.length; cur += size) {\n        fileChunks.push({\n          section: fileIndex++,\n          chunk: file.slice(cur, cur + size),\n        });\n      }\n      uploadList(fileChunks, index++);\n    })\n    setTimeout(()=>{\n      mergeChunks();\n\t  },2000);\n  }\n  const uploadList = (fileChunks, _index) => {\n    fileChunks.map((item, index) => {\n      const record = {\n        fileName: fileInfoList[_index].name,\n        section: item.section,\n        chunk: item.chunk,\n      }\n      console.log(record);\n      postUploadArtwork(record).then(result => {\n        console.log(result);\n      })\n    })\n  }\n  const mergeChunks = async() => {\n    fileInfoList.map((item, idx) => {\n      getMerge(item.name, finalHash).then(response => {\n        console.log(response);\n        setState(true);\n      })\n    })\n  }\n  return(\n    <>\n      {finalHash == undefined ? <>\n      </> : \n      <>\n        <h4>uploadfiles.js</h4>\n        \n        {uploadState ? <p>upload complete</p>:<button onClick={setFileChunks}>upload</button>}\n      </>}\n    </>\n  )\n}"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAA+B,OAA/B;AACA,SAASC,iBAAT,EAA4BC,iBAA5B,EAA+CC,QAA/C,QAA+D,QAA/D;;;AAEA,OAAO,MAAMC,WAAW,GAAG,QAInB;EAAA;;EAAA,IAJoB;IACxBC,cADwB;IAExBC,YAFwB;IAGxBC;EAHwB,CAIpB;EAEN,MAAM,CAACC,WAAD,EAAcC,QAAd,IAA0BT,QAAQ,CAAC,KAAD,CAAxC;;EAEA,MAAMU,aAAa,GAAG,MAAM;IAC1B,MAAMC,IAAI,GAAG,OAAO,EAApB,CAD0B,CACF;;IACxBN,cAAc,CAACO,GAAf,CAAmB,OAAMC,IAAN,EAAYC,KAAZ,KAAsB;MACvC,IAAIC,UAAU,GAAG,EAAjB;MACA,IAAIC,SAAS,GAAG,CAAhB;;MACA,KAAI,IAAIC,GAAG,GAAG,CAAd,EAAiBA,GAAG,GAAGJ,IAAI,CAACK,MAA5B,EAAoCD,GAAG,IAAIN,IAA3C,EAAiD;QAC/CI,UAAU,CAACI,IAAX,CAAgB;UACdC,OAAO,EAAEJ,SAAS,EADJ;UAEdK,KAAK,EAAER,IAAI,CAACS,KAAL,CAAWL,GAAX,EAAgBA,GAAG,GAAGN,IAAtB;QAFO,CAAhB;MAID;;MACDY,UAAU,CAACR,UAAD,EAAaD,KAAK,EAAlB,CAAV;IACD,CAVD;IAWAU,UAAU,CAAC,MAAI;MACbC,WAAW;IACb,CAFU,EAET,IAFS,CAAV;EAGD,CAhBD;;EAiBA,MAAMF,UAAU,GAAG,CAACR,UAAD,EAAaW,MAAb,KAAwB;IACzCX,UAAU,CAACH,GAAX,CAAe,CAACe,IAAD,EAAOb,KAAP,KAAiB;MAC9B,MAAMc,MAAM,GAAG;QACbC,QAAQ,EAAEvB,YAAY,CAACoB,MAAD,CAAZ,CAAqBI,IADlB;QAEbV,OAAO,EAAEO,IAAI,CAACP,OAFD;QAGbC,KAAK,EAAEM,IAAI,CAACN;MAHC,CAAf;MAKAU,OAAO,CAACC,GAAR,CAAYJ,MAAZ;MACA3B,iBAAiB,CAAC2B,MAAD,CAAjB,CAA0BK,IAA1B,CAA+BC,MAAM,IAAI;QACvCH,OAAO,CAACC,GAAR,CAAYE,MAAZ;MACD,CAFD;IAGD,CAVD;EAWD,CAZD;;EAaA,MAAMT,WAAW,GAAG,YAAW;IAC7BnB,YAAY,CAACM,GAAb,CAAiB,CAACe,IAAD,EAAOQ,GAAP,KAAe;MAC9BhC,QAAQ,CAACwB,IAAI,CAACG,IAAN,EAAYvB,SAAZ,CAAR,CAA+B0B,IAA/B,CAAoCG,QAAQ,IAAI;QAC9CL,OAAO,CAACC,GAAR,CAAYI,QAAZ;QACA3B,QAAQ,CAAC,IAAD,CAAR;MACD,CAHD;IAID,CALD;EAMD,CAPD;;EAQA,oBACE;IAAA,UACGF,SAAS,IAAI8B,SAAb,gBAAyB,qCAAzB,gBAED;MAAA,wBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,EAGG7B,WAAW,gBAAG;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAH,gBAA0B;QAAQ,OAAO,EAAEE,aAAjB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAHxC;IAAA;EAHF,iBADF;AAWD,CAzDM;;GAAMN,W;;KAAAA,W"},"metadata":{},"sourceType":"module"}