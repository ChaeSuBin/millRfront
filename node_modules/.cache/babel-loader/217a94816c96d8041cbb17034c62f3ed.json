{"ast":null,"code":"var _jsxFileName = \"/home/giparang/threadweb/fortune/client/src/pages/wallet.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport getWeb3 from '../getWeb3';\nimport Web3 from \"web3/dist/web3.min.js\";\nimport { Interaction } from \"../components/interactionTe\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ConnectWeb3 = () => {\n  _s();\n\n  const DEBUG = 1;\n  const [accountInfo, setAccInfo] = useState([]);\n  const [userAcc, setAddress] = useState(null);\n  const [rcvAcc, setRcvAddress] = useState('');\n  const [account, setAccount] = useState(null);\n  const [privKey, setPrivKey] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [web3, setWeb3] = useState(null);\n  useEffect(() => {\n    //connector();\n    tempconnect();\n  }, []);\n\n  const tempconnect = async () => {\n    const web3 = new Web3('wss://ws-mumbai.matic.today');\n    if (DEBUG) console.log('connected web3 version: ', web3.version);\n    setWeb3(web3);\n  };\n\n  const getUserBal = () => {\n    web3.eth.getBalance(userAcc).then(balanc => {\n      console.log(balanc);\n    });\n  };\n\n  const sendCoin = async () => {\n    const nonce = await web3.eth.getTransactionCount(userAcc, 'latest'); // nonce starts counting from 0\n\n    console.log(nonce);\n    const transaction = {\n      'to': rcvAcc,\n      // faucet address to return eth\n      'value': 20000000,\n      'gas': 30000,\n      'nonce': nonce // optional data field to send message or execute smart contract\n\n    };\n    const signedTx = await web3.eth.accounts.signTransaction(transaction, privKey);\n    web3.eth.sendSignedTransaction(signedTx.rawTransaction, function (error, hash) {\n      if (!error) console.log(\"🎉 The hash of your transaction is: \", hash, \"\\n Check Polygon Scan to view the status of your transaction!\");else console.log(\"❗Something went wrong while submitting your transaction:\", error);\n    });\n  };\n\n  const getChainId = () => {\n    //console.log(web3.eth.getChainId);\n    web3.eth.net.getId().then(x => {\n      switch (x) {\n        case 1:\n          console.log('connected etherium mainnet');\n          break;\n\n        case 3:\n          console.log('connected ropsten testnet');\n          break;\n\n        case 4:\n          console.log('connected rinkeby testnet');\n          break;\n\n        case 42:\n          console.log('connected kovan testnet');\n          break;\n\n        case 80001:\n          console.log('connected mumbai testnet');\n          break;\n\n        default:\n          console.log('default type');\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getUserBal,\n      children: \"UserBal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendCoin,\n      children: \"sendCoin\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getChainId,\n      children: \"chain.ver\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: [\"from :\", /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: evt => setAddress(evt.target.value),\n        size: \"45\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 72\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: [\"to :\", /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: evt => setRcvAddress(evt.target.value),\n        size: \"45\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: [\"pass :\", /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: evt => setPrivKey(evt.target.value),\n        size: \"45\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ConnectWeb3, \"MOlX3vNkJSwAdVzB2U/ftNmWXiE=\");\n\n_c = ConnectWeb3;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConnectWeb3\");","map":{"version":3,"names":["React","useState","useEffect","getWeb3","Web3","Interaction","ConnectWeb3","DEBUG","accountInfo","setAccInfo","userAcc","setAddress","rcvAcc","setRcvAddress","account","setAccount","privKey","setPrivKey","errorMessage","setErrorMessage","web3","setWeb3","tempconnect","console","log","version","getUserBal","eth","getBalance","then","balanc","sendCoin","nonce","getTransactionCount","transaction","signedTx","accounts","signTransaction","sendSignedTransaction","rawTransaction","error","hash","getChainId","net","getId","x","evt","target","value"],"sources":["/home/giparang/threadweb/fortune/client/src/pages/wallet.js"],"sourcesContent":["import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport getWeb3 from '../getWeb3';\nimport Web3 from \"web3/dist/web3.min.js\";\nimport { Interaction } from \"../components/interactionTe\";\n\nexport const ConnectWeb3 = () => {\n  const DEBUG = 1;\n  const [accountInfo, setAccInfo] = useState([]);\n  const [userAcc ,setAddress] = useState(null);\n  const [rcvAcc ,setRcvAddress] = useState('');\n  const [account, setAccount] = useState(null);\n  const [privKey, setPrivKey] = useState(null);\n\tconst [errorMessage, setErrorMessage] = useState(null);\n  const [web3, setWeb3] = useState(null);\n\n  useEffect(() => {\n    //connector();\n    tempconnect();\n  },[]);\n\n  const tempconnect = async() => {\n    const web3 = new Web3('wss://ws-mumbai.matic.today');\n    if(DEBUG) console.log('connected web3 version: ', web3.version);\n    setWeb3(web3);\n  }\n  const getUserBal = () => {\n    web3.eth.getBalance(userAcc).then(balanc => {\n      console.log(balanc);\n    })\n  }\n\n  const sendCoin = async() => {\n    const nonce = await web3.eth.getTransactionCount(userAcc, 'latest'); // nonce starts counting from 0\n    console.log(nonce)\n    const transaction = {\n     'to': rcvAcc, // faucet address to return eth\n     'value': 20000000,\n     'gas': 30000,\n     'nonce': nonce,\n     // optional data field to send message or execute smart contract\n    };\n    const signedTx = await web3.eth.accounts.signTransaction(transaction, privKey);\n\n    web3.eth.sendSignedTransaction(signedTx.rawTransaction, function(error, hash) {\n\n      if (!error)\n        console.log(\"🎉 The hash of your transaction is: \", hash, \"\\n Check Polygon Scan to view the status of your transaction!\");\n      else\n        console.log(\"❗Something went wrong while submitting your transaction:\", error);\n    });\n  }\n  \n  const getChainId = () => {\n    //console.log(web3.eth.getChainId);\n    web3.eth.net.getId().then((x) => {\n      switch(x){\n        case 1:\n          console.log('connected etherium mainnet');\n          break;\n        case 3:\n          console.log('connected ropsten testnet');\n          break;\n        case 4:\n          console.log('connected rinkeby testnet');\n          break;\n        case 42:\n          console.log('connected kovan testnet');\n          break;\n        case 80001:\n          console.log('connected mumbai testnet');\n          break;\n        default:\n          console.log('default type');\n      }\n    })\n  }\n  return (\n    <>\n    <h2>wallet</h2>\n    <button onClick={getUserBal}>UserBal</button>\n    <button onClick={sendCoin}>sendCoin</button>\n    <button onClick={getChainId}>chain.ver</button>\n    <br/>\n    <h5>from : \n      <input onChange={(evt)=>setAddress(evt.target.value)} size='45'/><br/></h5>\n    <h5>to :\n      <input onChange={(evt)=>setRcvAddress(evt.target.value)} size='45'></input></h5>\n    <h5>pass :\n      <input onChange={(evt)=>setPrivKey(evt.target.value)} size='45'></input></h5>\n    </>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}