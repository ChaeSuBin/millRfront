{"ast":null,"code":"import { getTokenUri, mintingToken } from '../../utilityUnits/connMintService';\nimport { getUserId, postMintTokn } from '../../api';\nlet count = 0;\nlet intervalId = null;\nexport const buyToknMint = async (_price, _itemId, setFlag, set_w_Flag, FROM_ADDR, PRIVATE_KEY) => {\n  console.log(PRIVATE_KEY);\n  const value = parseInt(_price * 100000) + '0000000000000';\n  mintingToken(FROM_ADDR, PRIVATE_KEY, _itemId, value).then(result => {\n    if (result === true) {\n      intervalId = setInterval(() => {\n        if (count > 9) {\n          stopTimer();\n          set_w_Flag(false);\n          setFlag(false);\n          alert('입력하신 Private Key가 다른 주소의 키 같습니다\\n 키를 확인 후 다시 시도하여주십시오.');\n        } else ++count;\n      }, 1000);\n    } else {\n      set_w_Flag(false);\n      alert(`⚠️Err: ${result}`);\n    }\n  });\n};\nexport const serveToknIdx = async (_toknId, FROM_ADDR) => {\n  const userId = await getUserId(FROM_ADDR);\n  const fileHash = await getFileHash(_toknId);\n  const record = {\n    hash: fileHash,\n    toknId: _toknId,\n    userId: userId\n  };\n  console.log(record);\n  // if(_remain == 1){\n  //   console.log(_remain);\n  //   putItemClose({itemID: idxId});\n  // }\n  postMintTokn(record).then(resultIdx => {\n    if (resultIdx) {\n      //set_w_Flag(false); setFlag(false);\n      stopTimer();\n      if (!alert('🎉Successfully purchased')) window.location.reload();\n    }\n  });\n};\nconst getFileHash = async _toknId => {\n  const toknURI = await getTokenUri(_toknId);\n  const splitedUri = toknURI.split('/');\n  return splitedUri[4];\n};\nconst stopTimer = () => {\n  clearInterval(intervalId);\n  intervalId = null;\n};","map":{"version":3,"names":["getTokenUri","mintingToken","getUserId","postMintTokn","count","intervalId","buyToknMint","_price","_itemId","setFlag","set_w_Flag","FROM_ADDR","PRIVATE_KEY","console","log","value","parseInt","then","result","setInterval","stopTimer","alert","serveToknIdx","_toknId","userId","fileHash","getFileHash","record","hash","toknId","resultIdx","window","location","reload","toknURI","splitedUri","split","clearInterval"],"sources":["/home/giparang/threadweb/fortune/client/src/components/detailPages/toknMint.js"],"sourcesContent":["import { getTokenUri, mintingToken } from '../../utilityUnits/connMintService';\nimport { getUserId, postMintTokn } from '../../api';\n\nlet count = 0;\nlet intervalId = null;\n\nexport const buyToknMint = async(_price, _itemId, setFlag, set_w_Flag, FROM_ADDR, PRIVATE_KEY) => {\n  console.log(PRIVATE_KEY);\n  const value = parseInt(_price*100000) + '0000000000000';\n  mintingToken(FROM_ADDR, PRIVATE_KEY, _itemId, value).then(result => {\n    if(result === true){\n      intervalId = setInterval(() => {\n        if(count > 9){\n          stopTimer();\n          set_w_Flag(false); setFlag(false);\n          alert('입력하신 Private Key가 다른 주소의 키 같습니다\\n 키를 확인 후 다시 시도하여주십시오.')\n        }\n        else\n          ++count;\n      }, 1000);\n    }\n    else{\n      set_w_Flag(false);\n      alert(`⚠️Err: ${result}`);\n    }\n  })\n}\nexport const serveToknIdx = async(_toknId, FROM_ADDR) => {\n  const userId = await getUserId(FROM_ADDR);\n  const fileHash = await getFileHash(_toknId);\n  const record = {\n    hash: fileHash,\n    toknId: _toknId,\n    userId: userId\n  }\n  console.log(record);\n  // if(_remain == 1){\n  //   console.log(_remain);\n  //   putItemClose({itemID: idxId});\n  // }\n  postMintTokn(record).then(resultIdx => {\n    if(resultIdx){\n      //set_w_Flag(false); setFlag(false);\n      stopTimer();\n      if(!alert('🎉Successfully purchased'))\n        window.location.reload();\n    }\n  })\n}\n\nconst getFileHash = async(_toknId) => {\n  const toknURI = await getTokenUri(_toknId);\n  const splitedUri = toknURI.split('/');\n  return splitedUri[4];\n}\nconst stopTimer = () => {\n  clearInterval(intervalId);\n  intervalId=null;\n}"],"mappings":"AAAA,SAASA,WAAW,EAAEC,YAAY,QAAQ,oCAAoC;AAC9E,SAASC,SAAS,EAAEC,YAAY,QAAQ,WAAW;AAEnD,IAAIC,KAAK,GAAG,CAAC;AACb,IAAIC,UAAU,GAAG,IAAI;AAErB,OAAO,MAAMC,WAAW,GAAG,OAAMC,MAAM,EAAEC,OAAO,EAAEC,OAAO,EAAEC,UAAU,EAAEC,SAAS,EAAEC,WAAW,KAAK;EAChGC,OAAO,CAACC,GAAG,CAACF,WAAW,CAAC;EACxB,MAAMG,KAAK,GAAGC,QAAQ,CAACT,MAAM,GAAC,MAAM,CAAC,GAAG,eAAe;EACvDN,YAAY,CAACU,SAAS,EAAEC,WAAW,EAAEJ,OAAO,EAAEO,KAAK,CAAC,CAACE,IAAI,CAACC,MAAM,IAAI;IAClE,IAAGA,MAAM,KAAK,IAAI,EAAC;MACjBb,UAAU,GAAGc,WAAW,CAAC,MAAM;QAC7B,IAAGf,KAAK,GAAG,CAAC,EAAC;UACXgB,SAAS,EAAE;UACXV,UAAU,CAAC,KAAK,CAAC;UAAED,OAAO,CAAC,KAAK,CAAC;UACjCY,KAAK,CAAC,wDAAwD,CAAC;QACjE,CAAC,MAEC,EAAEjB,KAAK;MACX,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,MACG;MACFM,UAAU,CAAC,KAAK,CAAC;MACjBW,KAAK,CAAE,UAASH,MAAO,EAAC,CAAC;IAC3B;EACF,CAAC,CAAC;AACJ,CAAC;AACD,OAAO,MAAMI,YAAY,GAAG,OAAMC,OAAO,EAAEZ,SAAS,KAAK;EACvD,MAAMa,MAAM,GAAG,MAAMtB,SAAS,CAACS,SAAS,CAAC;EACzC,MAAMc,QAAQ,GAAG,MAAMC,WAAW,CAACH,OAAO,CAAC;EAC3C,MAAMI,MAAM,GAAG;IACbC,IAAI,EAAEH,QAAQ;IACdI,MAAM,EAAEN,OAAO;IACfC,MAAM,EAAEA;EACV,CAAC;EACDX,OAAO,CAACC,GAAG,CAACa,MAAM,CAAC;EACnB;EACA;EACA;EACA;EACAxB,YAAY,CAACwB,MAAM,CAAC,CAACV,IAAI,CAACa,SAAS,IAAI;IACrC,IAAGA,SAAS,EAAC;MACX;MACAV,SAAS,EAAE;MACX,IAAG,CAACC,KAAK,CAAC,0BAA0B,CAAC,EACnCU,MAAM,CAACC,QAAQ,CAACC,MAAM,EAAE;IAC5B;EACF,CAAC,CAAC;AACJ,CAAC;AAED,MAAMP,WAAW,GAAG,MAAMH,OAAO,IAAK;EACpC,MAAMW,OAAO,GAAG,MAAMlC,WAAW,CAACuB,OAAO,CAAC;EAC1C,MAAMY,UAAU,GAAGD,OAAO,CAACE,KAAK,CAAC,GAAG,CAAC;EACrC,OAAOD,UAAU,CAAC,CAAC,CAAC;AACtB,CAAC;AACD,MAAMf,SAAS,GAAG,MAAM;EACtBiB,aAAa,CAAChC,UAAU,CAAC;EACzBA,UAAU,GAAC,IAAI;AACjB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}