{"ast":null,"code":"var _jsxFileName = \"/home/giparang/threadweb/fortune/client/src/components/uploadFiles.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { postUploadArtwork, getMerge, temtTest } from \"../api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const UploadFiles = _ref => {\n  let {\n    fileBufferList,\n    fileInfoList,\n    finalHash,\n    title,\n    desc\n  } = _ref;\n\n  const checkParams = () => {//temtTest(finalHash);\n  };\n\n  const uploadItem = () => {\n    if (title !== null && desc !== null) {\n      console.log(title, desc);\n    } else {\n      alert('Please enter the title and description of the item to be uploaded');\n    }\n  };\n\n  const setFileChunks = () => {\n    const size = 1024 * 50; //50KB 50KB Section size\n\n    fileBufferList.map((file, index) => {\n      let fileChunks = [];\n      let fileIndex = 0;\n\n      for (let cur = 0; cur < file.length; cur += size) {\n        fileChunks.push({\n          section: fileIndex++,\n          chunk: file.slice(cur, cur + size)\n        });\n      }\n\n      uploadList(fileChunks, index++);\n    });\n    mergeChunks();\n  };\n\n  const uploadList = (fileChunks, _index) => {\n    fileChunks.map((item, index) => {\n      const record = {\n        fileName: fileInfoList[_index].name,\n        section: item.section,\n        chunk: item.chunk\n      };\n      console.log(record);\n      postUploadArtwork(record).then(result => {\n        console.log(result);\n      });\n    });\n  };\n\n  const mergeChunks = () => {\n    fileInfoList.map((item, idx) => {\n      getMerge(item.name, finalHash).then(response => {\n        console.log(response);\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \"test-uploadfiles.js\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: uploadItem,\n      children: \"upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}; // const uploadFiles = () => {\n//     \n//     //postUploadArtwork\n//   }\n\n_c = UploadFiles;\n\nvar _c;\n\n$RefreshReg$(_c, \"UploadFiles\");","map":{"version":3,"names":["React","useState","useEffect","postUploadArtwork","getMerge","temtTest","UploadFiles","fileBufferList","fileInfoList","finalHash","title","desc","checkParams","uploadItem","console","log","alert","setFileChunks","size","map","file","index","fileChunks","fileIndex","cur","length","push","section","chunk","slice","uploadList","mergeChunks","_index","item","record","fileName","name","then","result","idx","response"],"sources":["/home/giparang/threadweb/fortune/client/src/components/uploadFiles.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { postUploadArtwork, getMerge, temtTest } from \"../api\";\n\nexport const UploadFiles = ({\n    fileBufferList,\n    fileInfoList,\n    finalHash,\n    title, desc,\n  }) => {\n\n  const checkParams = () => {\n    //temtTest(finalHash);\n  }\n  const uploadItem = () => {\n    if(title !== null && desc !== null){\n      console.log(title, desc);\n    }\n    else{\n      alert('Please enter the title and description of the item to be uploaded')\n    }\n  }\n  const setFileChunks = () => {\n    const size = 1024 * 50; //50KB 50KB Section size\n\n    fileBufferList.map((file, index) => {\n      let fileChunks = [];\n      let fileIndex = 0;\n      for(let cur = 0; cur < file.length; cur += size) {\n        fileChunks.push({\n          section: fileIndex++,\n          chunk: file.slice(cur, cur + size),\n        });\n      }\n      uploadList(fileChunks, index++);\n    })\n    mergeChunks();\n  }\n  const uploadList = (fileChunks, _index) => {\n    fileChunks.map((item, index) => {\n      const record = {\n        fileName: fileInfoList[_index].name,\n        section: item.section,\n        chunk: item.chunk,\n      }\n      console.log(record);\n      postUploadArtwork(record).then(result => {\n        console.log(result);\n      })\n    })\n  }\n  const mergeChunks = () => {\n    fileInfoList.map((item, idx) => {\n      getMerge(item.name, finalHash).then(response => {\n        console.log(response);\n      })\n    })\n  }\n  return(\n    <>\n      <h5>test-uploadfiles.js</h5>\n      {/* <button onClick={checkParams}>checkParams</button><br/> */}\n      <button onClick={uploadItem}>upload</button>\n    </>\n  )\n}\n\n// const uploadFiles = () => {\n//     \n//     //postUploadArtwork\n//   }"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,iBAAT,EAA4BC,QAA5B,EAAsCC,QAAtC,QAAsD,QAAtD;;;AAEA,OAAO,MAAMC,WAAW,GAAG,QAKnB;EAAA,IALoB;IACxBC,cADwB;IAExBC,YAFwB;IAGxBC,SAHwB;IAIxBC,KAJwB;IAIjBC;EAJiB,CAKpB;;EAEN,MAAMC,WAAW,GAAG,MAAM,CACxB;EACD,CAFD;;EAGA,MAAMC,UAAU,GAAG,MAAM;IACvB,IAAGH,KAAK,KAAK,IAAV,IAAkBC,IAAI,KAAK,IAA9B,EAAmC;MACjCG,OAAO,CAACC,GAAR,CAAYL,KAAZ,EAAmBC,IAAnB;IACD,CAFD,MAGI;MACFK,KAAK,CAAC,mEAAD,CAAL;IACD;EACF,CAPD;;EAQA,MAAMC,aAAa,GAAG,MAAM;IAC1B,MAAMC,IAAI,GAAG,OAAO,EAApB,CAD0B,CACF;;IAExBX,cAAc,CAACY,GAAf,CAAmB,CAACC,IAAD,EAAOC,KAAP,KAAiB;MAClC,IAAIC,UAAU,GAAG,EAAjB;MACA,IAAIC,SAAS,GAAG,CAAhB;;MACA,KAAI,IAAIC,GAAG,GAAG,CAAd,EAAiBA,GAAG,GAAGJ,IAAI,CAACK,MAA5B,EAAoCD,GAAG,IAAIN,IAA3C,EAAiD;QAC/CI,UAAU,CAACI,IAAX,CAAgB;UACdC,OAAO,EAAEJ,SAAS,EADJ;UAEdK,KAAK,EAAER,IAAI,CAACS,KAAL,CAAWL,GAAX,EAAgBA,GAAG,GAAGN,IAAtB;QAFO,CAAhB;MAID;;MACDY,UAAU,CAACR,UAAD,EAAaD,KAAK,EAAlB,CAAV;IACD,CAVD;IAWAU,WAAW;EACZ,CAfD;;EAgBA,MAAMD,UAAU,GAAG,CAACR,UAAD,EAAaU,MAAb,KAAwB;IACzCV,UAAU,CAACH,GAAX,CAAe,CAACc,IAAD,EAAOZ,KAAP,KAAiB;MAC9B,MAAMa,MAAM,GAAG;QACbC,QAAQ,EAAE3B,YAAY,CAACwB,MAAD,CAAZ,CAAqBI,IADlB;QAEbT,OAAO,EAAEM,IAAI,CAACN,OAFD;QAGbC,KAAK,EAAEK,IAAI,CAACL;MAHC,CAAf;MAKAd,OAAO,CAACC,GAAR,CAAYmB,MAAZ;MACA/B,iBAAiB,CAAC+B,MAAD,CAAjB,CAA0BG,IAA1B,CAA+BC,MAAM,IAAI;QACvCxB,OAAO,CAACC,GAAR,CAAYuB,MAAZ;MACD,CAFD;IAGD,CAVD;EAWD,CAZD;;EAaA,MAAMP,WAAW,GAAG,MAAM;IACxBvB,YAAY,CAACW,GAAb,CAAiB,CAACc,IAAD,EAAOM,GAAP,KAAe;MAC9BnC,QAAQ,CAAC6B,IAAI,CAACG,IAAN,EAAY3B,SAAZ,CAAR,CAA+B4B,IAA/B,CAAoCG,QAAQ,IAAI;QAC9C1B,OAAO,CAACC,GAAR,CAAYyB,QAAZ;MACD,CAFD;IAGD,CAJD;EAKD,CAND;;EAOA,oBACE;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAGE;MAAQ,OAAO,EAAE3B,UAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAHF;EAAA,gBADF;AAOD,CA7DM,C,CA+DP;AACA;AACA;AACA;;KAlEaP,W"},"metadata":{},"sourceType":"module"}