{"ast":null,"code":"import Web3 from \"web3/dist/web3.min.js\";\n\nconst getWeb3 = () => new Promise((resolve, reject) => {\n  // Wait for loading completion to avoid race conditions with web3 injection timing.\n  window.addEventListener(\"load\", async () => {\n    console.log('check-A'); // Modern dapp browsers...\n\n    if (window.ethereum) {\n      const web3 = new Web3(window.ethereum);\n\n      try {\n        // Request account access if needed\n        await window.ethereum.enable(); // Accounts now exposed\n\n        resolve(web3);\n      } catch (error) {\n        reject(error);\n      }\n    } // Legacy dapp browsers...\n    else if (window.web3) {\n      // Use Mist/MetaMask's provider.\n      const web3 = window.web3;\n      console.log(\"Injected web3 detected.\");\n      resolve(web3);\n    } // Fallback to localhost; use dev console port by default...\n    else {\n      const provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:8545\");\n      const web3 = new Web3(provider);\n      console.log(\"No web3 instance injected, using Local web3.\");\n      resolve(web3);\n    }\n  });\n});\n\nexport default getWeb3;","map":{"version":3,"names":["Web3","getWeb3","Promise","resolve","reject","window","addEventListener","console","log","ethereum","web3","enable","error","provider","providers","HttpProvider"],"sources":["/home/giparang/threadweb/fortune/client/src/getWeb3.js"],"sourcesContent":["import Web3 from \"web3/dist/web3.min.js\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      console.log('check-A')\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        \n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,uBAAjB;;AAEA,MAAMC,OAAO,GAAG,MACd,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;EAC/B;EACAC,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;IAC1CC,OAAO,CAACC,GAAR,CAAY,SAAZ,EAD0C,CAE1C;;IACA,IAAIH,MAAM,CAACI,QAAX,EAAqB;MAEnB,MAAMC,IAAI,GAAG,IAAIV,IAAJ,CAASK,MAAM,CAACI,QAAhB,CAAb;;MACA,IAAI;QACF;QACA,MAAMJ,MAAM,CAACI,QAAP,CAAgBE,MAAhB,EAAN,CAFE,CAGF;;QACAR,OAAO,CAACO,IAAD,CAAP;MACD,CALD,CAKE,OAAOE,KAAP,EAAc;QACdR,MAAM,CAACQ,KAAD,CAAN;MACD;IACF,CAXD,CAYA;IAZA,KAaK,IAAIP,MAAM,CAACK,IAAX,EAAiB;MACpB;MACA,MAAMA,IAAI,GAAGL,MAAM,CAACK,IAApB;MACAH,OAAO,CAACC,GAAR,CAAY,yBAAZ;MACAL,OAAO,CAACO,IAAD,CAAP;IACD,CALI,CAML;IANK,KAOA;MACH,MAAMG,QAAQ,GAAG,IAAIb,IAAI,CAACc,SAAL,CAAeC,YAAnB,CACf,uBADe,CAAjB;MAGA,MAAML,IAAI,GAAG,IAAIV,IAAJ,CAASa,QAAT,CAAb;MACAN,OAAO,CAACC,GAAR,CAAY,8CAAZ;MACAL,OAAO,CAACO,IAAD,CAAP;IACD;EACF,CA/BD;AAgCD,CAlCD,CADF;;AAqCA,eAAeT,OAAf"},"metadata":{},"sourceType":"module"}