{"ast":null,"code":"import MintServiceABI from '../contracts/MintService.json';\nimport Web3 from \"web3/dist/web3.min.js\";\nconst web3 = new Web3('wss://ws-mumbai.matic.today');\nconst chainId = await web3.eth.getChainId();\nconst nonce = await web3.eth.getTransactionCount(SEND_ADDR, 'latest');\nconst gasPrice = await web3.eth.getGasPrice();\nconst MintServiceADDR = '0x0C531EC4031F49B8eA9d7FFA75920e7896c2C078';\nconst MarketPlaceADDR = '0xd13643364b2D2d64e4621602ceC58069e6725564';\n\nconst mintService = () => {\n  const contract_Instance = new web3.eth.Contract(MintServiceABI, MintServiceADDR);\n  return contract_Instance;\n};\n\nexport const hexToUTF8 = async hex => {\n  try {\n    const result = web3.utils.hexToUtf8(hex);\n    return result;\n  } catch (err) {\n    const result = web3.utils.toAscii(hex);\n    return result;\n  }\n};\nexport const getSymbol = async web3 => {\n  return new Promise(resolve => {\n    mintService(web3).methods.symbol().call().then(symbol => {\n      resolve(symbol);\n    }, err => {\n      console.log('err: ', err);\n    });\n  });\n};\nexport const getTokenOwner = async toknId => {\n  return new Promise(resolve => {\n    mintService().methods.ownerOf(toknId).call().then(result => {\n      resolve(result);\n    });\n  });\n};\nexport const getTokenUri = async toknId => {\n  return new Promise(resolve => {\n    mintService().methods.tokenURI(toknId).call().then(result => {\n      resolve(result);\n    });\n  });\n};\nexport const getTokenStatus = async toknId => {\n  return new Promise(resolve => {\n    mintService().methods.tradeNum(toknId).call().then(result => {\n      resolve(result);\n    });\n  });\n};\nexport const getAmountAll = async () => {\n  return new Promise(resolve => {\n    mintService().methods.totalSupply().call().then(result => {\n      resolve(result);\n    });\n  });\n};\nexport const getApproveState = async owner => {\n  return new Promise(resolve => {\n    mintService().methods.isApprovedForAll(owner, MarketPlaceADDR).call().then(result => {\n      resolve(result);\n    });\n  });\n};\nexport const EstSetApprovalAll = async SEND_ADDR => {\n  const method = await mintService(web3).methods.setApprovalForAll(SEND_ADDR, MarketPlaceADDR);\n  const estGas = await method.estimateGas({\n    from: SEND_ADDR\n  });\n  return estGas;\n};\n_c = EstSetApprovalAll;\nexport const EstGasopenTokenBatch = async (SEND_ADDR, fromId, toId, price) => {\n  const method = await mintService(web3).methods.openToknBatch(price, fromId, toId);\n  const estGas = await method.estimateGas({\n    from: SEND_ADDR\n  });\n  return estGas;\n};\n_c2 = EstGasopenTokenBatch;\nexport const openTokenBatch = async (toknId, toToknId, price, SEND_ADDR, PRIVATE_KEY) => {\n  const method = mintService(web3).methods.openToknBatch(price, toknId, toToknId);\n  const estGas = await method.estimateGas({\n    from: SEND_ADDR\n  });\n  const code = await method.encodeABI();\n  const tx = {\n    nonce: nonce,\n    chainId: chainId,\n    from: SEND_ADDR,\n    to: MintServiceADDR,\n    value: '0',\n    data: code,\n    gasPrice: gasPrice,\n    gas: estGas\n  };\n  const result = signTrx(tx, PRIVATE_KEY);\n  console.log(result);\n};\n\nconst signTrx = (tx, PRIVATE_KEY) => {\n  web3.eth.accounts.signTransaction(tx, PRIVATE_KEY).then(signedTx => {\n    web3.eth.sendSignedTransaction(signedTx.rawTransaction, function (error, hash) {\n      if (!error) if (!alert(`üéâ The hash of your transaction is: ${hash}\\n Check Polygon Scan to view the status of your transaction!`)) console.log('complete');else console.log(\"‚ùóSomething went wrong while submitting your transaction:\", error);\n    });\n  });\n};\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"EstSetApprovalAll\");\n$RefreshReg$(_c2, \"EstGasopenTokenBatch\");","map":{"version":3,"names":["MintServiceABI","Web3","web3","chainId","eth","getChainId","nonce","getTransactionCount","SEND_ADDR","gasPrice","getGasPrice","MintServiceADDR","MarketPlaceADDR","mintService","contract_Instance","Contract","hexToUTF8","hex","result","utils","hexToUtf8","err","toAscii","getSymbol","Promise","resolve","methods","symbol","call","then","console","log","getTokenOwner","toknId","ownerOf","getTokenUri","tokenURI","getTokenStatus","tradeNum","getAmountAll","totalSupply","getApproveState","owner","isApprovedForAll","EstSetApprovalAll","method","setApprovalForAll","estGas","estimateGas","from","EstGasopenTokenBatch","fromId","toId","price","openToknBatch","openTokenBatch","toToknId","PRIVATE_KEY","code","encodeABI","tx","to","value","data","gas","signTrx","accounts","signTransaction","signedTx","sendSignedTransaction","rawTransaction","error","hash","alert"],"sources":["/home/giparang/threadweb/fortune/client/src/utilityUnits/connMintService.js"],"sourcesContent":["import MintServiceABI from '../contracts/MintService.json';\nimport Web3 from \"web3/dist/web3.min.js\";\nconst web3 = new Web3('wss://ws-mumbai.matic.today');\nconst chainId = await web3.eth.getChainId();\nconst nonce = await web3.eth.getTransactionCount(SEND_ADDR, 'latest');\nconst gasPrice = await web3.eth.getGasPrice();\nconst MintServiceADDR = '0x0C531EC4031F49B8eA9d7FFA75920e7896c2C078';\nconst MarketPlaceADDR = '0xd13643364b2D2d64e4621602ceC58069e6725564';\n\nconst mintService = () => {\n    const contract_Instance = new web3.eth.Contract(\n      MintServiceABI, MintServiceADDR\n    )\n    return contract_Instance;\n}\n\nexport const hexToUTF8 = async(hex) => {\n    try{\n        const result = web3.utils.hexToUtf8(hex);\n        return result;\n    }\n    catch(err){\n        const result = web3.utils.toAscii(hex);\n        return result;\n    }\n}\nexport const getSymbol = async(web3) => {\n    return new Promise(resolve => {\n        mintService(web3).methods.symbol().call().then(\n        symbol => {\n            resolve(symbol);\n        },err => { \n            console.log('err: ', err); \n        })\n    })\n}\nexport const getTokenOwner = async(toknId) => {\n    return new Promise(resolve => {\n        mintService().methods.ownerOf(toknId).call().then(\n            result => {\n                resolve(result);\n            }\n        )\n    })\n}\nexport const getTokenUri = async(toknId) => {\n    return new Promise(resolve => {\n        mintService().methods.tokenURI(toknId).call().then(\n            result => {\n                resolve(result);\n            }\n        )\n    })\n}\nexport const getTokenStatus = async(toknId) => {\n    return new Promise(resolve => {\n        mintService().methods.tradeNum(toknId).call().then(\n            result => {\n                resolve(result);\n            }\n        )\n    })\n}\nexport const getAmountAll = async() => {\n    return new Promise(resolve => {\n        mintService().methods.totalSupply().call().then(\n            result => {\n                resolve(result);\n            }\n        )\n    })\n}\nexport const getApproveState = async(owner) => {\n    return new Promise(resolve => {\n        mintService().methods.isApprovedForAll(owner, MarketPlaceADDR).call().then(\n            result => {\n                resolve(result);\n            }\n        )\n    })\n}\nexport const EstSetApprovalAll = async(SEND_ADDR) => {\n    const method = await mintService(web3).methods.setApprovalForAll(SEND_ADDR, MarketPlaceADDR);\n    const estGas = await method.estimateGas({from: SEND_ADDR});\n    return estGas;\n}\nexport const EstGasopenTokenBatch = async(SEND_ADDR, fromId, toId, price) => {\n    const method = await mintService(web3).methods.openToknBatch(price, fromId, toId);\n    const estGas = await method.estimateGas({from: SEND_ADDR});\n    return estGas;\n}\nexport const openTokenBatch = async(toknId, toToknId, price, SEND_ADDR, PRIVATE_KEY) => {\n    const method = mintService(web3).methods.openToknBatch(price, toknId, toToknId);\n    const estGas = await method.estimateGas({from: SEND_ADDR});\n    const code = await method.encodeABI();\n    \n    const tx = {\n        nonce: nonce,\n        chainId: chainId,\n        from: SEND_ADDR,\n        to: MintServiceADDR,\n        value: '0',\n        data: code,\n        gasPrice: gasPrice,\n        gas: estGas\n    }\n    const result = signTrx(tx, PRIVATE_KEY);\n    console.log(result);\n}\nconst signTrx = (tx, PRIVATE_KEY) => {\n    web3.eth.accounts.signTransaction(tx, PRIVATE_KEY).then(signedTx => {\n        web3.eth.sendSignedTransaction(signedTx.rawTransaction, function(error, hash) {\n            if (!error)\n              if(!alert(`üéâ The hash of your transaction is: ${hash}\\n Check Polygon Scan to view the status of your transaction!`))\n                console.log('complete');\n            else\n              console.log(\"‚ùóSomething went wrong while submitting your transaction:\", error);\n        });\n    })\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}