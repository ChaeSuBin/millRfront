{"ast":null,"code":"var _jsxFileName = \"/home/giparang/threadweb/fortune/client/src/components/setFileHash.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { onFileInputChange } from \"../utilityUnits/fileToBuffer\";\nimport { fileToHash, setFinalHash } from '../utilityUnits/fileToHash';\nimport { FilesList } from \"../components/dispFileList\";\nimport { UploadFiles } from \"./uploadFiles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SetFileHash = _ref => {\n  _s();\n\n  let {\n    title,\n    desc,\n    pWire\n  } = _ref;\n  let te = -1;\n  const [fileBuffer, setFileBuffer] = useState([]);\n  const [fileInfo, setFileInfo] = useState([]);\n  const [fileHashs, setFileHash] = useState([]);\n  const [finalHash, setFinalH] = useState();\n  useEffect(() => {\n    setTimeout(() => {\n      sortFileSize().then(result => {\n        if (result) {\n          const hashArr = async () => {\n            await asyncGetFileInfo();\n          };\n\n          const finalHash = getFinalHash();\n          fileToHash(fileBuffer, setFileHash);\n          setFinalH(finalHash);\n          pWire(finalHash);\n        } else {\n          console.log(result);\n        }\n      });\n    }, 250);\n  }, [fileInfo]);\n\n  const asyncGetFileInfo = () => {\n    return new Promise(resolve => {\n      while (fileHashs.length === 0) {\n        console.log(fileHashs);\n      }\n\n      resolve(fileHashs);\n    });\n  };\n\n  const sortFileSize = async () => {\n    let asc = function (a, b) {\n      return a.length < b.length ? -1 : 1; //オブジェクトの昇順ソート\n    };\n\n    let ascIndex = function (a, b) {\n      return a.size < b.size ? -1 : 1;\n    };\n\n    if (fileBuffer.length !== 0) {\n      fileBuffer.sort(asc);\n      fileInfo.sort(ascIndex);\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const getFinalHash = () => {\n    let fileNum = 0;\n    let hashsStr = ''; //let fileTypeArr = [];\n\n    do {\n      hashsStr += fileHashs[fileNum]; //fileTypeArr.push((fileInfo[fileNum].type).split('/').pop());\n\n      ++fileNum;\n    } while (fileHashs.length > fileNum);\n\n    return setFinalHash(hashsStr);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"extract\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"inputfile\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: evt => onFileInputChange(evt, setFileBuffer, setFileInfo),\n        multiple: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 36\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 27\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), fileInfo.map(uploadItems => /*#__PURE__*/_jsxDEV(FilesList, {\n      row: ++te,\n      title: uploadItems.name,\n      type: uploadItems.type,\n      size: uploadItems.size,\n      hash: fileHashs[te]\n    }, uploadItems.name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(UploadFiles, {\n      title: title,\n      desc: desc,\n      fileBufferList: fileBuffer,\n      fileInfoList: fileInfo,\n      finalHash: finalHash\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SetFileHash, \"/Jaoven7/MYHIuG19lgcFy/b8Uo=\");\n\n_c = SetFileHash;\n\nvar _c;\n\n$RefreshReg$(_c, \"SetFileHash\");","map":{"version":3,"names":["React","useState","useEffect","onFileInputChange","fileToHash","setFinalHash","FilesList","UploadFiles","SetFileHash","title","desc","pWire","te","fileBuffer","setFileBuffer","fileInfo","setFileInfo","fileHashs","setFileHash","finalHash","setFinalH","setTimeout","sortFileSize","then","result","hashArr","asyncGetFileInfo","getFinalHash","console","log","Promise","resolve","length","asc","a","b","ascIndex","size","sort","fileNum","hashsStr","evt","map","uploadItems","name","type"],"sources":["/home/giparang/threadweb/fortune/client/src/components/setFileHash.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { onFileInputChange } from \"../utilityUnits/fileToBuffer\";\nimport { fileToHash, setFinalHash } from '../utilityUnits/fileToHash'\nimport { FilesList } from \"../components/dispFileList\";\nimport { UploadFiles } from \"./uploadFiles\";\n\nexport const SetFileHash = ({title, desc, pWire}) => {\n\n  let te = -1;\n  const [fileBuffer, setFileBuffer] = useState([]);\n  const [fileInfo, setFileInfo] = useState([]);\n  const [fileHashs, setFileHash] = useState([]);\n  const [finalHash, setFinalH] = useState();\n\n  useEffect(()=>{\n    setTimeout(() => {\n      sortFileSize().then(result => {\n        if(result){\n          const hashArr = async() => {\n            await asyncGetFileInfo();\n          }\n          const finalHash = getFinalHash();\n          fileToHash(fileBuffer, setFileHash);\n          setFinalH(finalHash);\n          pWire(finalHash);\n        }\n        else{\n          console.log(result);\n        }\n      })\n    }, 250);\n  },[fileInfo])\n\n  const asyncGetFileInfo = () => {\n    return new Promise(resolve => {\n      while(fileHashs.length === 0){\n        console.log(fileHashs);\n      }\n      resolve(fileHashs)\n    })\n  }\n\n  const sortFileSize = async() => {\n    let asc = function (a, b) {\n      return (a.length < b.length) ? -1 : 1;  //オブジェクトの昇順ソート\n    }\n    let ascIndex = function(a, b) {\n      return (a.size < b.size) ? -1 : 1;\n    }\n\n    if(fileBuffer.length !== 0){\n      fileBuffer.sort(asc);\n      fileInfo.sort(ascIndex);\n      return true;\n    }\n    else{\n      return false;\n    }  \n  }\n  \n  const getFinalHash = () => {\n    let fileNum = 0;\n    let hashsStr = '';\n    //let fileTypeArr = [];\n    do {\n      hashsStr += fileHashs[fileNum];\n      //fileTypeArr.push((fileInfo[fileNum].type).split('/').pop());\n      ++fileNum;\n    } while (fileHashs.length > fileNum);\n    \n    return setFinalHash(hashsStr);\n  }\n\n  return(\n    <div>\n      <h4>extract</h4>\n      <label className=\"inputfile\"><input type='file' \n        onChange={(evt)=>onFileInputChange(evt, setFileBuffer, setFileInfo)} \n        multiple/></label><br/>\n      <br/>\n      {fileInfo.map(uploadItems => (\n        <FilesList\n          key={uploadItems.name}\n          row={++te}\n          title = {uploadItems.name}\n          type = {uploadItems.type}\n          size = {uploadItems.size}\n          hash = {fileHashs[te]}\n        />\n      ))}\n      <UploadFiles\n        title = {title}\n        desc = {desc}\n        fileBufferList = {fileBuffer}\n        fileInfoList = {fileInfo}\n        finalHash = {finalHash}\n      />\n    </div>\n  )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}