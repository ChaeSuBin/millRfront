{"ast":null,"code":"import { getItemStatus, getTokenUri, getToknStatus, hexToUTF8 } from \"../../utilityUnits/connMintService\";\nexport const getBlockInfo = async _itemId => {\n  let count = 0;\n  const toknStatus = await getItemStatus(_itemId);\n  const toknURI = toknStatus.fileHash;\n  const useRange = setPermissionUse(toknURI.split('/'));\n\n  do {\n    toknStatus.royalty /= 1000000;\n    toknStatus.price /= 1000000;\n  } while (++count < 3);\n\n  return new Promise(resolve => {\n    hexToUTF8(toknStatus.status).then(result => {\n      resolve({\n        price: toknStatus.price,\n        royalty: toknStatus.royalty,\n        useRange: useRange,\n        remain: toknStatus.limit,\n        door: result\n      });\n    });\n  });\n};\nexport const getNftInfo = async _toknId => {\n  let count = 0;\n  const toknStatus = await getToknStatus(_toknId);\n  const toknURI = await getTokenUri(_toknId);\n  const useRange = setPermissionUse(toknURI.split('/'));\n\n  do {\n    toknStatus.royalty /= 1000000;\n    toknStatus.price /= 1000000;\n  } while (++count < 3);\n\n  return new Promise(resolve => {\n    hexToUTF8(toknStatus.status).then(result => {\n      resolve({\n        price: toknStatus.price,\n        royalty: toknStatus.royalty,\n        useRange: useRange,\n        remain: toknStatus.limit,\n        door: result\n      });\n    });\n  });\n};\n\nconst setPermissionUse = splitedUri => {\n  if (splitedUri[3] === '') {\n    return 'Only for personal use';\n  } else {\n    if (splitedUri[2] !== 'CO') return splitedUri[3] + ' (No commercially use)';else return splitedUri[3] + ' (Commercially Avaliable)';\n  }\n};","map":{"version":3,"names":["getItemStatus","getTokenUri","getToknStatus","hexToUTF8","getBlockInfo","_itemId","count","toknStatus","toknURI","fileHash","useRange","setPermissionUse","split","royalty","price","Promise","resolve","status","then","result","remain","limit","door","getNftInfo","_toknId","splitedUri"],"sources":["/home/giparang/threadweb/fortune/client/src/components/detailPages/setBlockIDX.js"],"sourcesContent":["import { getItemStatus, getTokenUri, getToknStatus, hexToUTF8 } from \"../../utilityUnits/connMintService\";\n\nexport const getBlockInfo = async(_itemId) => {\n    let count = 0;\n    const toknStatus = await getItemStatus(_itemId);\n    const toknURI = toknStatus.fileHash;\n    const useRange = setPermissionUse(toknURI.split('/'));\n    do{\n        toknStatus.royalty /= 1000000;\n        toknStatus.price /= 1000000;\n    }while(++count < 3)\n    \n    return new Promise(resolve => {\n        hexToUTF8(toknStatus.status).then(result => {\n            resolve({\n                price: toknStatus.price,\n                royalty: toknStatus.royalty,\n                useRange: useRange,\n                remain: toknStatus.limit,\n                door: result\n            })\n        })\n    })\n}\nexport const getNftInfo = async(_toknId) => {\n    let count = 0;\n    const toknStatus = await getToknStatus(_toknId);\n    const toknURI = await getTokenUri(_toknId);\n    const useRange = setPermissionUse(toknURI.split('/'));\n    do{\n        toknStatus.royalty /= 1000000;\n        toknStatus.price /= 1000000;\n    }while(++count < 3)\n    return new Promise(resolve => {\n        hexToUTF8(toknStatus.status).then(result => {\n            resolve({\n                price: toknStatus.price,\n                royalty: toknStatus.royalty,\n                useRange: useRange,\n                remain: toknStatus.limit,\n                door: result\n            })\n        })\n    })\n}\nconst setPermissionUse = (splitedUri) => {\n    if(splitedUri[3] === ''){\n        return('Only for personal use');\n      }\n      else{\n        if(splitedUri[2] !== 'CO')\n          return(splitedUri[3] + ' (No commercially use)');\n        else\n          return(splitedUri[3] + ' (Commercially Avaliable)');\n    }\n}"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,WAAxB,EAAqCC,aAArC,EAAoDC,SAApD,QAAqE,oCAArE;AAEA,OAAO,MAAMC,YAAY,GAAG,MAAMC,OAAN,IAAkB;EAC1C,IAAIC,KAAK,GAAG,CAAZ;EACA,MAAMC,UAAU,GAAG,MAAMP,aAAa,CAACK,OAAD,CAAtC;EACA,MAAMG,OAAO,GAAGD,UAAU,CAACE,QAA3B;EACA,MAAMC,QAAQ,GAAGC,gBAAgB,CAACH,OAAO,CAACI,KAAR,CAAc,GAAd,CAAD,CAAjC;;EACA,GAAE;IACEL,UAAU,CAACM,OAAX,IAAsB,OAAtB;IACAN,UAAU,CAACO,KAAX,IAAoB,OAApB;EACH,CAHD,QAGO,EAAER,KAAF,GAAU,CAHjB;;EAKA,OAAO,IAAIS,OAAJ,CAAYC,OAAO,IAAI;IAC1Bb,SAAS,CAACI,UAAU,CAACU,MAAZ,CAAT,CAA6BC,IAA7B,CAAkCC,MAAM,IAAI;MACxCH,OAAO,CAAC;QACJF,KAAK,EAAEP,UAAU,CAACO,KADd;QAEJD,OAAO,EAAEN,UAAU,CAACM,OAFhB;QAGJH,QAAQ,EAAEA,QAHN;QAIJU,MAAM,EAAEb,UAAU,CAACc,KAJf;QAKJC,IAAI,EAAEH;MALF,CAAD,CAAP;IAOH,CARD;EASH,CAVM,CAAP;AAWH,CArBM;AAsBP,OAAO,MAAMI,UAAU,GAAG,MAAMC,OAAN,IAAkB;EACxC,IAAIlB,KAAK,GAAG,CAAZ;EACA,MAAMC,UAAU,GAAG,MAAML,aAAa,CAACsB,OAAD,CAAtC;EACA,MAAMhB,OAAO,GAAG,MAAMP,WAAW,CAACuB,OAAD,CAAjC;EACA,MAAMd,QAAQ,GAAGC,gBAAgB,CAACH,OAAO,CAACI,KAAR,CAAc,GAAd,CAAD,CAAjC;;EACA,GAAE;IACEL,UAAU,CAACM,OAAX,IAAsB,OAAtB;IACAN,UAAU,CAACO,KAAX,IAAoB,OAApB;EACH,CAHD,QAGO,EAAER,KAAF,GAAU,CAHjB;;EAIA,OAAO,IAAIS,OAAJ,CAAYC,OAAO,IAAI;IAC1Bb,SAAS,CAACI,UAAU,CAACU,MAAZ,CAAT,CAA6BC,IAA7B,CAAkCC,MAAM,IAAI;MACxCH,OAAO,CAAC;QACJF,KAAK,EAAEP,UAAU,CAACO,KADd;QAEJD,OAAO,EAAEN,UAAU,CAACM,OAFhB;QAGJH,QAAQ,EAAEA,QAHN;QAIJU,MAAM,EAAEb,UAAU,CAACc,KAJf;QAKJC,IAAI,EAAEH;MALF,CAAD,CAAP;IAOH,CARD;EASH,CAVM,CAAP;AAWH,CApBM;;AAqBP,MAAMR,gBAAgB,GAAIc,UAAD,IAAgB;EACrC,IAAGA,UAAU,CAAC,CAAD,CAAV,KAAkB,EAArB,EAAwB;IACpB,OAAO,uBAAP;EACD,CAFH,MAGM;IACF,IAAGA,UAAU,CAAC,CAAD,CAAV,KAAkB,IAArB,EACE,OAAOA,UAAU,CAAC,CAAD,CAAV,GAAgB,wBAAvB,CADF,KAGE,OAAOA,UAAU,CAAC,CAAD,CAAV,GAAgB,2BAAvB;EACL;AACJ,CAVD"},"metadata":{},"sourceType":"module"}