{"ast":null,"code":"import { getItemStatus, getTokenUri, getToknStatus, hexToUTF8 } from \"../../utilityUnits/connMintService\";\nexport const getBlockInfo = async _itemId => {\n  let count = 0;\n  const toknStatus = await getItemStatus(_itemId);\n  const toknURI = toknStatus.fileHash;\n  const useRange = setPermissionUse(toknURI.split('/'));\n  do {\n    toknStatus.royalty /= 1000000;\n    toknStatus.price /= 1000000;\n  } while (++count < 3);\n  return new Promise(resolve => {\n    hexToUTF8(toknStatus.status).then(result => {\n      resolve({\n        price: toknStatus.price,\n        royalty: toknStatus.royalty,\n        useRange: useRange,\n        remain: toknStatus.limit,\n        door: result\n      });\n    });\n  });\n};\nexport const getNftInfo = async _toknId => {\n  let count = 0;\n  const toknStatus = await getToknStatus(_toknId);\n  const toknURI = await getTokenUri(_toknId);\n  const fileHash = toknURI.split('/')[4];\n  const useRange = setPermissionUse(toknURI.split('/'));\n  do {\n    toknStatus.royalty /= 1000000;\n    toknStatus.price /= 1000000;\n  } while (++count < 3);\n  return new Promise(resolve => {\n    hexToUTF8(toknStatus.status).then(result => {\n      resolve({\n        price: toknStatus.price,\n        royalty: toknStatus.royalty,\n        useRange: useRange,\n        fileHash: fileHash,\n        door: result\n      });\n    });\n  });\n};\nconst setPermissionUse = splitedUri => {\n  if (splitedUri[3] === '') {\n    return 'Only for personal use';\n  } else {\n    if (splitedUri[2] !== 'CO') return splitedUri[3] + ' (No commercially use)';else return splitedUri[3] + ' (Commercially Avaliable)';\n  }\n};","map":{"version":3,"names":["getItemStatus","getTokenUri","getToknStatus","hexToUTF8","getBlockInfo","_itemId","count","toknStatus","toknURI","fileHash","useRange","setPermissionUse","split","royalty","price","Promise","resolve","status","then","result","remain","limit","door","getNftInfo","_toknId","splitedUri"],"sources":["/home/giparang/threadweb/fortune/client/src/components/detailPages/setBlockIDX.js"],"sourcesContent":["import { getItemStatus, getTokenUri, getToknStatus, hexToUTF8 } from \"../../utilityUnits/connMintService\";\n\nexport const getBlockInfo = async(_itemId) => {\n    let count = 0;\n    const toknStatus = await getItemStatus(_itemId);\n    const toknURI = toknStatus.fileHash;\n    const useRange = setPermissionUse(toknURI.split('/'));\n    do{\n        toknStatus.royalty /= 1000000;\n        toknStatus.price /= 1000000;\n    }while(++count < 3)\n    \n    return new Promise(resolve => {\n        hexToUTF8(toknStatus.status).then(result => {\n            resolve({\n                price: toknStatus.price,\n                royalty: toknStatus.royalty,\n                useRange: useRange,\n                remain: toknStatus.limit,\n                door: result\n            })\n        })\n    })\n}\nexport const getNftInfo = async(_toknId) => {\n    let count = 0;\n    const toknStatus = await getToknStatus(_toknId);\n    const toknURI = await getTokenUri(_toknId);\n    const fileHash = toknURI.split('/')[4];\n    const useRange = setPermissionUse(toknURI.split('/'));\n    do{\n        toknStatus.royalty /= 1000000;\n        toknStatus.price /= 1000000;\n    }while(++count < 3)\n    return new Promise(resolve => {\n        hexToUTF8(toknStatus.status).then(result => {\n            resolve({\n                price: toknStatus.price,\n                royalty: toknStatus.royalty,\n                useRange: useRange,\n                fileHash: fileHash,\n                door: result\n            })\n        })\n    })\n}\nconst setPermissionUse = (splitedUri) => {\n    if(splitedUri[3] === ''){\n        return('Only for personal use');\n      }\n      else{\n        if(splitedUri[2] !== 'CO')\n          return(splitedUri[3] + ' (No commercially use)');\n        else\n          return(splitedUri[3] + ' (Commercially Avaliable)');\n    }\n}"],"mappings":"AAAA,SAASA,aAAa,EAAEC,WAAW,EAAEC,aAAa,EAAEC,SAAS,QAAQ,oCAAoC;AAEzG,OAAO,MAAMC,YAAY,GAAG,MAAMC,OAAO,IAAK;EAC1C,IAAIC,KAAK,GAAG,CAAC;EACb,MAAMC,UAAU,GAAG,MAAMP,aAAa,CAACK,OAAO,CAAC;EAC/C,MAAMG,OAAO,GAAGD,UAAU,CAACE,QAAQ;EACnC,MAAMC,QAAQ,GAAGC,gBAAgB,CAACH,OAAO,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC;EACrD,GAAE;IACEL,UAAU,CAACM,OAAO,IAAI,OAAO;IAC7BN,UAAU,CAACO,KAAK,IAAI,OAAO;EAC/B,CAAC,QAAM,EAAER,KAAK,GAAG,CAAC;EAElB,OAAO,IAAIS,OAAO,CAACC,OAAO,IAAI;IAC1Bb,SAAS,CAACI,UAAU,CAACU,MAAM,CAAC,CAACC,IAAI,CAACC,MAAM,IAAI;MACxCH,OAAO,CAAC;QACJF,KAAK,EAAEP,UAAU,CAACO,KAAK;QACvBD,OAAO,EAAEN,UAAU,CAACM,OAAO;QAC3BH,QAAQ,EAAEA,QAAQ;QAClBU,MAAM,EAAEb,UAAU,CAACc,KAAK;QACxBC,IAAI,EAAEH;MACV,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC,CAAC;AACN,CAAC;AACD,OAAO,MAAMI,UAAU,GAAG,MAAMC,OAAO,IAAK;EACxC,IAAIlB,KAAK,GAAG,CAAC;EACb,MAAMC,UAAU,GAAG,MAAML,aAAa,CAACsB,OAAO,CAAC;EAC/C,MAAMhB,OAAO,GAAG,MAAMP,WAAW,CAACuB,OAAO,CAAC;EAC1C,MAAMf,QAAQ,GAAGD,OAAO,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACtC,MAAMF,QAAQ,GAAGC,gBAAgB,CAACH,OAAO,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC;EACrD,GAAE;IACEL,UAAU,CAACM,OAAO,IAAI,OAAO;IAC7BN,UAAU,CAACO,KAAK,IAAI,OAAO;EAC/B,CAAC,QAAM,EAAER,KAAK,GAAG,CAAC;EAClB,OAAO,IAAIS,OAAO,CAACC,OAAO,IAAI;IAC1Bb,SAAS,CAACI,UAAU,CAACU,MAAM,CAAC,CAACC,IAAI,CAACC,MAAM,IAAI;MACxCH,OAAO,CAAC;QACJF,KAAK,EAAEP,UAAU,CAACO,KAAK;QACvBD,OAAO,EAAEN,UAAU,CAACM,OAAO;QAC3BH,QAAQ,EAAEA,QAAQ;QAClBD,QAAQ,EAAEA,QAAQ;QAClBa,IAAI,EAAEH;MACV,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC,CAAC;AACN,CAAC;AACD,MAAMR,gBAAgB,GAAIc,UAAU,IAAK;EACrC,IAAGA,UAAU,CAAC,CAAC,CAAC,KAAK,EAAE,EAAC;IACpB,OAAO,uBAAuB;EAChC,CAAC,MACG;IACF,IAAGA,UAAU,CAAC,CAAC,CAAC,KAAK,IAAI,EACvB,OAAOA,UAAU,CAAC,CAAC,CAAC,GAAG,wBAAwB,CAAE,KAEjD,OAAOA,UAAU,CAAC,CAAC,CAAC,GAAG,2BAA2B;EACxD;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}