{"ast":null,"code":"export const onFileInputChange = (e, setBuffer, setFileInfo, setCheckA) => {\n  const fileByteArray = [];\n  const fileInfo = [];\n  let fileNum = 0;\n  while (e.target.files.length > fileNum) {\n    const reader = new FileReader();\n    const fileBufferArray = [];\n    fileInfo.push({\n      name: e.target.files[fileNum].name,\n      type: e.target.files[fileNum].type,\n      size: e.target.files[fileNum].size\n    });\n    //console.log(e.target.files[fileNum]);\n    reader.readAsArrayBuffer(e.target.files[fileNum]);\n    reader.onloadend = _evt => {\n      if (_evt.target.readyState === FileReader.DONE) {\n        const arrayBuffer = _evt.target.result,\n          array = new Uint8Array(arrayBuffer);\n        for (const a of array) {\n          fileBufferArray.push(a);\n        }\n        fileByteArray.push(fileBufferArray);\n        if (fileByteArray.length === fileNum) {\n          setCheckA(true);\n        }\n      }\n    };\n    ++fileNum;\n  }\n  setBuffer(fileByteArray);\n  setFileInfo(fileInfo);\n};","map":{"version":3,"names":["onFileInputChange","e","setBuffer","setFileInfo","setCheckA","fileByteArray","fileInfo","fileNum","target","files","length","reader","FileReader","fileBufferArray","push","name","type","size","readAsArrayBuffer","onloadend","_evt","readyState","DONE","arrayBuffer","result","array","Uint8Array","a"],"sources":["/home/giparang/threadweb/fortune/client/src/utilityUnits/fileToBuffer.js"],"sourcesContent":["\nexport const onFileInputChange = (e, setBuffer, setFileInfo, setCheckA) => {\n  const fileByteArray = [];\n  const fileInfo = [];\n  let fileNum = 0;\n  \n  while(e.target.files.length > fileNum){\n    const reader = new FileReader();\n    const fileBufferArray = [];\n        \n    fileInfo.push({\n      name: e.target.files[fileNum].name,\n      type: e.target.files[fileNum].type,\n      size: e.target.files[fileNum].size\n    })\n    //console.log(e.target.files[fileNum]);\n    reader.readAsArrayBuffer(e.target.files[fileNum]);\n    reader.onloadend = (_evt) => {\n      if (_evt.target.readyState === FileReader.DONE) {\n        const arrayBuffer = _evt.target.result,\n        array = new Uint8Array(arrayBuffer);\n        for (const a of array) {\n          fileBufferArray.push(a);\n        }\n        fileByteArray.push(fileBufferArray);\n        if(fileByteArray.length === fileNum){\n          setCheckA(true);\n        }\n      }\n    }\n    ++fileNum;\n  }\n  setBuffer(fileByteArray);\n  setFileInfo(fileInfo);\n}"],"mappings":"AACA,OAAO,MAAMA,iBAAiB,GAAG,CAACC,CAAC,EAAEC,SAAS,EAAEC,WAAW,EAAEC,SAAS,KAAK;EACzE,MAAMC,aAAa,GAAG,EAAE;EACxB,MAAMC,QAAQ,GAAG,EAAE;EACnB,IAAIC,OAAO,GAAG,CAAC;EAEf,OAAMN,CAAC,CAACO,MAAM,CAACC,KAAK,CAACC,MAAM,GAAGH,OAAO,EAAC;IACpC,MAAMI,MAAM,GAAG,IAAIC,UAAU,EAAE;IAC/B,MAAMC,eAAe,GAAG,EAAE;IAE1BP,QAAQ,CAACQ,IAAI,CAAC;MACZC,IAAI,EAAEd,CAAC,CAACO,MAAM,CAACC,KAAK,CAACF,OAAO,CAAC,CAACQ,IAAI;MAClCC,IAAI,EAAEf,CAAC,CAACO,MAAM,CAACC,KAAK,CAACF,OAAO,CAAC,CAACS,IAAI;MAClCC,IAAI,EAAEhB,CAAC,CAACO,MAAM,CAACC,KAAK,CAACF,OAAO,CAAC,CAACU;IAChC,CAAC,CAAC;IACF;IACAN,MAAM,CAACO,iBAAiB,CAACjB,CAAC,CAACO,MAAM,CAACC,KAAK,CAACF,OAAO,CAAC,CAAC;IACjDI,MAAM,CAACQ,SAAS,GAAIC,IAAI,IAAK;MAC3B,IAAIA,IAAI,CAACZ,MAAM,CAACa,UAAU,KAAKT,UAAU,CAACU,IAAI,EAAE;QAC9C,MAAMC,WAAW,GAAGH,IAAI,CAACZ,MAAM,CAACgB,MAAM;UACtCC,KAAK,GAAG,IAAIC,UAAU,CAACH,WAAW,CAAC;QACnC,KAAK,MAAMI,CAAC,IAAIF,KAAK,EAAE;UACrBZ,eAAe,CAACC,IAAI,CAACa,CAAC,CAAC;QACzB;QACAtB,aAAa,CAACS,IAAI,CAACD,eAAe,CAAC;QACnC,IAAGR,aAAa,CAACK,MAAM,KAAKH,OAAO,EAAC;UAClCH,SAAS,CAAC,IAAI,CAAC;QACjB;MACF;IACF,CAAC;IACD,EAAEG,OAAO;EACX;EACAL,SAAS,CAACG,aAAa,CAAC;EACxBF,WAAW,CAACG,QAAQ,CAAC;AACvB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}