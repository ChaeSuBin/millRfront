{"ast":null,"code":"import { getTokenUri, mintingToken } from '../../utilityUnits/connMintService';\nimport { getToknId, getUserId, postMintTokn, putLogin } from '../../api';\nimport { SHA256 } from '../../utilityUnits/SHA256';\nexport const buyToknMint = async (_price, _itemId, setFlag, set_w_Flag, FROM_ADDR, PRIVATE_KEY) => {\n  const pHash = SHA256(PRIVATE_KEY);\n  const record = {\n    playerId: sessionStorage.getItem('userid'),\n    playerPass: SHA256(PRIVATE_KEY)\n  };\n  if (await putLogin(record)) {\n    const value = parseInt(_price * 100000) + '0000000000000';\n    mintingToken(FROM_ADDR, PRIVATE_KEY, _itemId, value).then(result => {\n      console.log(result);\n    });\n    serveToknIdx(FROM_ADDR);\n  } else {\n    alert('Private Key 를 확인 후 다시 시도하십시오');\n    set_w_Flag(false);\n  }\n};\nexport const serveToknIdx = async FROM_ADDR => {\n  const userId = await getUserId(FROM_ADDR);\n  const toknId = await getToknId(FROM_ADDR);\n  const fileHash = await getFileHash(toknId);\n  const record = {\n    hash: fileHash,\n    toknId: toknId,\n    userId: userId\n  };\n  // if(_remain == 1){\n  //   console.log(_remain);\n  //   putItemClose({itemID: idxId});\n  // }\n  postMintTokn(record).then(resultIdx => {\n    if (resultIdx) {\n      //set_w_Flag(false); setFlag(false);\n      if (!alert('🎉Successfully purchased')) window.location.reload();\n    }\n  });\n};\nconst getFileHash = async _toknId => {\n  let flag = true;\n  console.log(_toknId);\n  // const toknURI = await getTokenUri(_toknId);\n  while (flag) {\n    getTokenUri(_toknId).then(toknURI => {\n      const splitedUri = toknURI.split('/');\n      return splitedUri[4];\n    }).catch(err => {\n      setInterval(() => {\n        console.log(err);\n      }, 1000);\n    });\n  }\n};","map":{"version":3,"names":["getTokenUri","mintingToken","getToknId","getUserId","postMintTokn","putLogin","SHA256","buyToknMint","_price","_itemId","setFlag","set_w_Flag","FROM_ADDR","PRIVATE_KEY","pHash","record","playerId","sessionStorage","getItem","playerPass","value","parseInt","then","result","console","log","serveToknIdx","alert","userId","toknId","fileHash","getFileHash","hash","resultIdx","window","location","reload","_toknId","flag","toknURI","splitedUri","split","catch","err","setInterval"],"sources":["/home/giparang/threadweb/fortune/client/src/components/detailPages/toknMint.js"],"sourcesContent":["import { getTokenUri, mintingToken } from '../../utilityUnits/connMintService';\nimport { getToknId, getUserId, postMintTokn, putLogin } from '../../api';\nimport { SHA256 } from '../../utilityUnits/SHA256';\n\nexport const buyToknMint = async(_price, _itemId, setFlag, set_w_Flag, FROM_ADDR, PRIVATE_KEY) => {\n  const pHash = SHA256(PRIVATE_KEY);\n  const record = {\n    playerId: sessionStorage.getItem('userid'),\n    playerPass: SHA256(PRIVATE_KEY)\n  }\n  if(await putLogin(record)){\n    const value = parseInt(_price*100000) + '0000000000000';\n    mintingToken(FROM_ADDR, PRIVATE_KEY, _itemId, value).then(result => {\n      console.log(result); })\n    serveToknIdx(FROM_ADDR);\n  }\n  else{\n    alert('Private Key 를 확인 후 다시 시도하십시오');\n    set_w_Flag(false);\n  }\n}\n\nexport const serveToknIdx = async(FROM_ADDR) => {\n  const userId = await getUserId(FROM_ADDR);\n  const toknId = await getToknId(FROM_ADDR);\n  const fileHash = await getFileHash(toknId);\n  const record = {\n    hash: fileHash,\n    toknId: toknId,\n    userId: userId\n  }\n  // if(_remain == 1){\n  //   console.log(_remain);\n  //   putItemClose({itemID: idxId});\n  // }\n  postMintTokn(record).then(resultIdx => {\n    if(resultIdx){\n      //set_w_Flag(false); setFlag(false);\n      if(!alert('🎉Successfully purchased'))\n        window.location.reload();\n    }\n  })\n}\n\nconst getFileHash = async(_toknId) => {\n  let flag = true;\n  console.log(_toknId);\n  // const toknURI = await getTokenUri(_toknId);\n  while(flag){\n    getTokenUri(_toknId).then(toknURI => {\n      const splitedUri = toknURI.split('/');\n      return splitedUri[4];\n    }).catch(err => {\n      setInterval(() => {\n        console.log(err);\n      }, 1000);\n    })\n  }\n}"],"mappings":"AAAA,SAASA,WAAW,EAAEC,YAAY,QAAQ,oCAAoC;AAC9E,SAASC,SAAS,EAAEC,SAAS,EAAEC,YAAY,EAAEC,QAAQ,QAAQ,WAAW;AACxE,SAASC,MAAM,QAAQ,2BAA2B;AAElD,OAAO,MAAMC,WAAW,GAAG,OAAMC,MAAM,EAAEC,OAAO,EAAEC,OAAO,EAAEC,UAAU,EAAEC,SAAS,EAAEC,WAAW,KAAK;EAChG,MAAMC,KAAK,GAAGR,MAAM,CAACO,WAAW,CAAC;EACjC,MAAME,MAAM,GAAG;IACbC,QAAQ,EAAEC,cAAc,CAACC,OAAO,CAAC,QAAQ,CAAC;IAC1CC,UAAU,EAAEb,MAAM,CAACO,WAAW;EAChC,CAAC;EACD,IAAG,MAAMR,QAAQ,CAACU,MAAM,CAAC,EAAC;IACxB,MAAMK,KAAK,GAAGC,QAAQ,CAACb,MAAM,GAAC,MAAM,CAAC,GAAG,eAAe;IACvDP,YAAY,CAACW,SAAS,EAAEC,WAAW,EAAEJ,OAAO,EAAEW,KAAK,CAAC,CAACE,IAAI,CAACC,MAAM,IAAI;MAClEC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;IAAE,CAAC,CAAC;IACzBG,YAAY,CAACd,SAAS,CAAC;EACzB,CAAC,MACG;IACFe,KAAK,CAAC,8BAA8B,CAAC;IACrChB,UAAU,CAAC,KAAK,CAAC;EACnB;AACF,CAAC;AAED,OAAO,MAAMe,YAAY,GAAG,MAAMd,SAAS,IAAK;EAC9C,MAAMgB,MAAM,GAAG,MAAMzB,SAAS,CAACS,SAAS,CAAC;EACzC,MAAMiB,MAAM,GAAG,MAAM3B,SAAS,CAACU,SAAS,CAAC;EACzC,MAAMkB,QAAQ,GAAG,MAAMC,WAAW,CAACF,MAAM,CAAC;EAC1C,MAAMd,MAAM,GAAG;IACbiB,IAAI,EAAEF,QAAQ;IACdD,MAAM,EAAEA,MAAM;IACdD,MAAM,EAAEA;EACV,CAAC;EACD;EACA;EACA;EACA;EACAxB,YAAY,CAACW,MAAM,CAAC,CAACO,IAAI,CAACW,SAAS,IAAI;IACrC,IAAGA,SAAS,EAAC;MACX;MACA,IAAG,CAACN,KAAK,CAAC,0BAA0B,CAAC,EACnCO,MAAM,CAACC,QAAQ,CAACC,MAAM,EAAE;IAC5B;EACF,CAAC,CAAC;AACJ,CAAC;AAED,MAAML,WAAW,GAAG,MAAMM,OAAO,IAAK;EACpC,IAAIC,IAAI,GAAG,IAAI;EACfd,OAAO,CAACC,GAAG,CAACY,OAAO,CAAC;EACpB;EACA,OAAMC,IAAI,EAAC;IACTtC,WAAW,CAACqC,OAAO,CAAC,CAACf,IAAI,CAACiB,OAAO,IAAI;MACnC,MAAMC,UAAU,GAAGD,OAAO,CAACE,KAAK,CAAC,GAAG,CAAC;MACrC,OAAOD,UAAU,CAAC,CAAC,CAAC;IACtB,CAAC,CAAC,CAACE,KAAK,CAACC,GAAG,IAAI;MACdC,WAAW,CAAC,MAAM;QAChBpB,OAAO,CAACC,GAAG,CAACkB,GAAG,CAAC;MAClB,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,CAAC;EACJ;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}