{"ast":null,"code":"import TradeMarketABI from '../contracts/MarketPlace.json';\nimport Web3 from \"web3/dist/web3.min.js\";\nconst web3 = new Web3('https://rpc-mumbai.matic.today');\nconst TradeServiceADDR = '0x1434F691eCefeA03ce6532a4cA99FD7E08764e2d';\nconst tradeService = () => {\n  const contract_Instance = new web3.eth.Contract(TradeMarketABI, TradeServiceADDR);\n  return contract_Instance;\n};\nexport const getTradeBalance = async SEND_ADDR => {\n  return new Promise(resolve => {\n    tradeService().methods.getMyDeposit().call({\n      from: SEND_ADDR\n    }).then(result => {\n      resolve(result);\n    });\n  });\n};\nexport const eventTradeTokn = async ADDR => {\n  return new Promise(resolve => {\n    tradeService().events.tradingEvt({\n      filter: {\n        buyer: ADDR\n      },\n      fromBlock: 'latest'\n    }, (err, evt) => {\n      console.log('event call: ', evt);\n      resolve(evt.returnValues);\n    });\n  });\n};\nexport const buyNFT = async (SEND_ADDR, PRIVATE_KEY, toknId, toknPrice) => {\n  const chainId = await web3.eth.getChainId();\n  const nonce = await web3.eth.getTransactionCount(SEND_ADDR, 'latest');\n  const method = tradeService().methods.buyTokn(toknId);\n  const gasPrice = await web3.eth.getGasPrice();\n  const code = await method.encodeABI();\n  return new Promise(resolve => {\n    method.estimateGas({\n      from: SEND_ADDR,\n      value: toknPrice\n    }).then(estGas => {\n      const tx = {\n        nonce: nonce,\n        chainId: chainId,\n        from: SEND_ADDR,\n        to: TradeServiceADDR,\n        value: toknPrice,\n        //web3.utils.toHex(web3.utils.toWei(toknPrice, 'ether')),\n        data: code,\n        gasPrice: gasPrice,\n        gas: estGas\n      };\n      signTrx(tx, PRIVATE_KEY).then(result => {\n        console.log(result);\n        resolve(result);\n      });\n    }).catch(err => {\n      console.log(err);\n      resolve(err);\n    });\n  });\n};\nexport const withdrawSaleToknPrice = async (SEND_ADDR, PRIVATE_KEY, amount) => {\n  const chainId = await web3.eth.getChainId();\n  const nonce = await web3.eth.getTransactionCount(SEND_ADDR, 'latest');\n  const method = await tradeService().methods.withDrawal(amount);\n  const gasPrice = await web3.eth.getGasPrice();\n  const code = await method.encodeABI();\n  return new Promise(resolve => {\n    method.estimateGas({\n      from: SEND_ADDR\n    }).then(estGas => {\n      const tx = {\n        nonce: nonce,\n        chainId: chainId,\n        from: SEND_ADDR,\n        to: TradeServiceADDR,\n        value: '0',\n        data: code,\n        gasPrice: gasPrice,\n        gas: estGas\n      };\n      signTrx(tx, PRIVATE_KEY).then(result => {\n        console.log(result);\n        resolve(result);\n      });\n    }).catch(err => {\n      console.log(err);\n      resolve(err);\n    });\n  });\n};\nconst signTrx = (tx, PRIVATE_KEY) => {\n  return new Promise(resolve => {\n    web3.eth.accounts.signTransaction(tx, PRIVATE_KEY).then(signedTx => {\n      web3.eth.sendSignedTransaction(signedTx.rawTransaction, function (error, hash) {\n        if (!error) resolve(true);else resolve('Check again your Private_Key inputed');\n      });\n    }).catch(err => {\n      console.log(err.message);\n      resolve(err.message);\n    });\n  });\n};","map":{"version":3,"names":["TradeMarketABI","Web3","web3","TradeServiceADDR","tradeService","contract_Instance","eth","Contract","getTradeBalance","SEND_ADDR","Promise","resolve","methods","getMyDeposit","call","from","then","result","eventTradeTokn","ADDR","events","tradingEvt","filter","buyer","fromBlock","err","evt","console","log","returnValues","buyNFT","PRIVATE_KEY","toknId","toknPrice","chainId","getChainId","nonce","getTransactionCount","method","buyTokn","gasPrice","getGasPrice","code","encodeABI","estimateGas","value","estGas","tx","to","data","gas","signTrx","catch","withdrawSaleToknPrice","amount","withDrawal","accounts","signTransaction","signedTx","sendSignedTransaction","rawTransaction","error","hash","message"],"sources":["/home/giparang/threadweb/fortune/client/src/utilityUnits/connTradeService.js"],"sourcesContent":["import TradeMarketABI from '../contracts/MarketPlace.json';\nimport Web3 from \"web3/dist/web3.min.js\";\nconst web3 = new Web3('https://rpc-mumbai.matic.today');\nconst TradeServiceADDR = '0x1434F691eCefeA03ce6532a4cA99FD7E08764e2d';\n\nconst tradeService = () => {\n  const contract_Instance = new web3.eth.Contract(\n    TradeMarketABI, TradeServiceADDR\n  )\n  return contract_Instance;\n}\n\nexport const getTradeBalance = async(SEND_ADDR) => {\n  return new Promise(resolve => {\n    tradeService().methods.getMyDeposit().call({from: SEND_ADDR}).then(\n      result => {\n        resolve(result);\n      }\n    )\n  })\n}\nexport const eventTradeTokn = async(ADDR) => {\n  return new Promise(resolve => {\n    tradeService().events.tradingEvt(\n      {filter: {buyer: ADDR},\n      fromBlock: 'latest'},\n      (err, evt) => {\n        console.log('event call: ', evt);\n        resolve(evt.returnValues);            \n    })\n  })\n}\n\nexport const buyNFT = async(SEND_ADDR, PRIVATE_KEY, toknId, toknPrice) => {\n  const chainId = await web3.eth.getChainId();\n  const nonce = await web3.eth.getTransactionCount(SEND_ADDR, 'latest');\n  const method = tradeService().methods.buyTokn(toknId);\n  const gasPrice = await web3.eth.getGasPrice();\n  const code = await method.encodeABI();\n  return new Promise(resolve => {\n    method.estimateGas({from: SEND_ADDR, value: toknPrice}).then(estGas => {\n      const tx = {\n        nonce: nonce,\n        chainId: chainId,\n        from: SEND_ADDR,\n        to: TradeServiceADDR,\n        value: toknPrice, //web3.utils.toHex(web3.utils.toWei(toknPrice, 'ether')),\n        data: code,\n        gasPrice: gasPrice,\n        gas: estGas\n      };\n      signTrx(tx, PRIVATE_KEY).then(result => {\n        console.log(result);\n        resolve(result);\n      })\n    }).catch(err => {\n      console.log(err);\n      resolve(err);\n    })\n  })\n}\n\nexport const withdrawSaleToknPrice = async(SEND_ADDR, PRIVATE_KEY, amount) => {\n  const chainId = await web3.eth.getChainId();\n  const nonce = await web3.eth.getTransactionCount(SEND_ADDR, 'latest');\n  \n  const method = await tradeService().methods.withDrawal(amount);\n  const gasPrice = await web3.eth.getGasPrice();\n  const code = await method.encodeABI();\n  return new Promise(resolve => {\n    method.estimateGas({from: SEND_ADDR}).then(estGas => {\n      const tx = {\n        nonce: nonce,\n        chainId: chainId,\n        from: SEND_ADDR,\n        to: TradeServiceADDR,\n        value: '0',\n        data: code,\n        gasPrice: gasPrice,\n        gas: estGas\n      }\n      signTrx(tx, PRIVATE_KEY).then(result => {\n        console.log(result);\n        resolve(result);\n      })\n    }).catch(err => {\n      console.log(err);\n      resolve(err);\n    })\n  })\n}\nconst signTrx = (tx, PRIVATE_KEY) => {\n  return new Promise(resolve => {\n    web3.eth.accounts.signTransaction(tx, PRIVATE_KEY).then(signedTx => {\n      web3.eth.sendSignedTransaction(signedTx.rawTransaction, function(error, hash) {\n        if (!error)\n          resolve(true);\n        else\n          resolve('Check again your Private_Key inputed');\n      });\n    }).catch(err => {\n      console.log(err.message);\n      resolve(err.message);\n    })\n  })\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}